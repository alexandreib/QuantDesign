{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9982cadd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:18:38.865478Z",
     "iopub.status.busy": "2024-10-28T02:18:38.864933Z",
     "iopub.status.idle": "2024-10-28T02:19:00.640491Z",
     "shell.execute_reply": "2024-10-28T02:19:00.639052Z"
    },
    "papermill": {
     "duration": 21.803344,
     "end_time": "2024-10-28T02:19:00.643343",
     "exception": false,
     "start_time": "2024-10-28T02:18:38.839999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TF Version 2.16.1\n",
      "Interactive? False\n",
      "is_kaggle_gpu_enabled? False\n"
     ]
    }
   ],
   "source": [
    "import gc,os, sys, warnings, ctypes, re, joblib, copy, json, collections, abc, tqdm, multiprocessing, random\n",
    "libc = ctypes.CDLL('libc.so.6');\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import optuna \n",
    "from optuna.visualization import (plot_optimization_history,plot_param_importances,plot_parallel_coordinate)\n",
    "from IPython.display import clear_output\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import polars as pl\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "pd.options.display.max_columns = None\n",
    "\n",
    "import lightgbm, catboost, tensorflow # catboost => version 1.2.5\n",
    "print('TF Version',tensorflow.__version__)\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import GroupKFold, StratifiedKFold, StratifiedGroupKFold\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.feature_selection import SelectKBest, chi2, f_regression\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "import kaggle_evaluation.mcts_inference_server\n",
    "\n",
    "def is_interactive():\n",
    "    return 'runtime' in get_ipython().config.IPKernelApp.connection_file\n",
    "print('Interactive?', is_interactive())\n",
    "\n",
    "def is_kaggle_gpu_enabled():\n",
    "    from tensorflow.python.client import device_lib\n",
    "    # when only CPU is enabled the list shows two CPU entries, otherwise there are more, listing GPU as well\n",
    "    return len(device_lib.list_local_devices()) > 2\n",
    "print('is_kaggle_gpu_enabled?', is_kaggle_gpu_enabled())\n",
    "\n",
    "class dotdict(collections.defaultdict):\n",
    "    __getattr__ = dict.get\n",
    "    __setattr__ = dict.__setitem__\n",
    "    __delattr__ = dict.__delitem__\n",
    "    def __str__(self):\n",
    "        return str(' | '.join([f\"{key}: {value}\" for key, value in self.items()]))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b0fa3e8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:00.690146Z",
     "iopub.status.busy": "2024-10-28T02:19:00.689244Z",
     "iopub.status.idle": "2024-10-28T02:19:00.747411Z",
     "shell.execute_reply": "2024-10-28T02:19:00.746288Z"
    },
    "papermill": {
     "duration": 0.086027,
     "end_time": "2024-10-28T02:19:00.751473",
     "exception": false,
     "start_time": "2024-10-28T02:19:00.665446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_models : ['lgbm']\n",
      "fold_name : sgkfold\n",
      "fold_col : GameRulesetName\n",
      "l_optuna : []\n",
      "optuna_n_trials : 70\n",
      "n_splits : 5\n",
      "drop : ['Id', 'num_wins_agent1', 'num_draws_agent1', 'num_losses_agent1', 'agent1', 'agent2', 'LudRules', 'EnglishRules', 'Rules_players', 'Rules_rules', 'Rules_start', 'Rules_play', 'Rules_end', 'Rules_phase', 'Rules_meta', 'Rules_size_board', 'Rules_period', 'Rules_region', 'Rules_Opening', 'Rules_Playing', 'Rules_Rearrangement', 'Rules_Sowing', 'Rules_Placement', 'Rules_Move', 'Rules_Movement', 'Rules_OpeningP1', 'Rules_OpeningP2', 'Rules_SowingRestricted', 'Rules_BetweenRounds', 'Rules_PlacementLosingPlayer', 'Rules_Play', 'Rules_Opening1', 'Rules_Opening2', 'Rules_FirstTurn', 'Rules_SecondTurn', 'Rules_FirstMove', 'Rules_PlacementP1', 'Rules_HuntingP2', 'Rules_PlacementP2', 'Rules_HuntingP1', 'Rules_MovementP1', 'Rules_FirstTigerMovement', 'Rules_MovementP2', 'Rules_UnStacking', 'Rules_BearingOff', 'Rules_Main', 'Rules_Swapping', 'Rules_Choose', 'Rules_FirstPlacement', 'Rules_InitialPhase', 'Rules_MainPhase', 'Rules_Throwing', 'Rules_Moving', 'Rules_OuterPhase', 'Rules_OpeningPair', 'Rules_SecondMove', 'Rules_ThirdMove', 'Rules_Layout', 'Rules_RemoveCentre', 'Rules_Battle', 'Rules_Fly', 'Rules_Agreement', 'Rules_InitGame', 'Rules_PlacementCenter', 'Rules_Place', 'Rules_Rotate', 'Rules_Misoro', 'Rules_CapturingFirstPhase', 'Rules_FanoronaPhase', 'Rules_Capture', 'Rules_FoxPhase', 'Rules_HenPhase', 'Rules_General', 'Rules_Init', 'Rules_InitPhase', 'Rules_Remove', 'Rules_BullPlacement', 'Rules_MarkerPlacementAroundBull', 'Rules_DecisionForNextRound', 'Rules_Opening3', 'Rules_Opening4', 'Rules_Opening5', 'Rules_MiddlePhase', 'Rules_FinalPhase', 'Rules_EndGame', 'Rules_InitGuerrilla', 'Rules_GuerrillaMove', 'Rules_CoinMove', 'Rules_StartingMove', 'Rules_Setup', 'Rules_PlacePhase', 'Rules_MovePhase', 'Rules_Movement2', 'Rules_Produce2', 'Rules_Movement1', 'Rules_Produce1', 'Rules_PlacementTiger', 'Rules_MoveHuman', 'Rules_PlacementHuman', 'Rules_SowingCW', 'Rules_Rightmost', 'Rules_HomePhase', 'Rules_Placing', 'Rules_Throw Bread', 'Rules_Move Bread', 'Rules_PlayingPips', 'Rules_MultiJump', 'Rules_Select', 'Rules_Pie', 'Rules_SelectingHole', 'Rules_Game', 'Rules_PlacementAdjacent', 'Rules_Cross', 'Rules_Continue', 'Rules_PlaceKing', 'Rules_PlaceFirstElephant', 'Rules_PlaceOtherPieces', 'Rules_Stacking', 'Rules_Round', 'Rules_BetweenRound', 'Rules_Opening6', 'Rules_OpeningCounselor', 'Rules_OpeningSoldier', 'Rules_FirstPhase', 'Rules_SecondPhase', 'Rules_Swap', 'Rules_Passive', 'Rules_Aggressive', 'Rules_GetMoves', 'Rules_InitContagion', 'Rules_ContagionGrowth', 'Rules_Containment', 'Rules_Opening7', 'Rules_InitialSowing', 'Rules_CentrePlacing', 'Rules_Connection', 'Rules_PlacementFirstTiger', 'Rules_RemoveHuman', 'Rules_PlacementSecondTiger', 'Rules_TwoFirstTurn', 'Rules_CounterPlacement', 'Rules_DuxPlacement', 'Rules_MainP1', 'Rules_MainP2', 'Rules_MarkedPlacement', 'Rules_Replay', 'Rules_equipment', 'Rules_category', 'Rules_category1', 'Rules_category2', 'Rules_game', 'Rules_main_game', 'Efficiency', 'MovesNonDecision', 'SetVar', 'NumPlayPhase', 'ForwardLeftDirection', 'DecisionFactorChangeLineBestFit', 'SwapPlayersEffect', 'Edge', 'RectangleShape', 'ReplacementCapture', 'Variable', 'AdvantageP1_Rules_category2_mean', 'ChessComponent', 'NoMovesEnd', 'ScoreDifferenceMaximum', 'PenAndPaperStyle', 'NumTopSites', 'CountPiecesMoverComparison', 'SlideDecisionFrequency', 'DecisionFactorChangeNumTimes', 'HexTiling', 'SowRemove', 'LesserThan', 'Style', 'ScoreDifferenceVariance', 'MoveDistanceAverage', 'FromToDecisionEnemy', 'Math', 'ScoreDifferenceMaxIncrease', 'SowCCW', 'Division', 'MoveAgainFrequency', 'AddEffectFrequency', 'NoTargetPieceEndFrequency', 'PromotionDecision', 'LeapDecisionToEmpty', 'StepDecisionToEmpty', 'PolygonShape', 'GreaterThan', 'MovesEffects', 'NumBottomSites', 'Directions', 'TurnsDurationEfficiency', 'FromToDecisionEmpty', 'ForwardsDirection', 'Stack', 'FromToDecisionFriend', 'PieceNumberMaxDecrease', 'PieceValue', 'CircleShape', 'NumConvexCorners', 'DiceD2', 'AlquerqueBoardWithTwoTriangles', 'RookComponent', 'MoveDistanceMaxDecrease', 'LeapDecisionFrequency', 'SlideEffect', 'ConnectionWinFrequency', 'NoMovesWinFrequency', 'LeapDecisionToEmptyFrequency', 'PawnComponent', 'HopDecisionFriendToEmptyFrequency', 'Even', 'Modulo', 'SowBacktrackingFrequency', 'CaptureSequence', 'BackgammonStyle', 'SetValueFrequency', 'AdvantageP1_Rules_category1_std', 'MoveDistanceMedian', 'NoOwnPiecesWin', 'DiceD6', 'NoProgressDraw', 'FromToDecisionEnemyFrequency', 'FairyChessComponent', 'ShogiStyle', 'FromToEffect', 'Visual', 'Rules_players_len', 'Tiling', 'StackType', 'SetValue', 'ProgressCheck', 'NoOwnPiecesEnd', 'ReachWin', 'MaxMovesInTurn', 'SwapPlayersDecision', 'PositionalSuperko', 'ScoringEnd', 'IsPieceAt', 'ScoreDifferenceChangeAverage', 'SlideDecision', 'ConnectionWin', 'KingComponent', 'NumDice', 'SumDice', 'InternalCounter', 'Odd', 'AlquerqueBoard', 'ReplacementCaptureFrequency', 'NoProgressEndFrequency', 'PlayerValue', 'AdvantageP1_Rules_category1_mean', 'Repetition', 'Maximum', 'GraphStyle', 'CustodialCaptureFrequency', 'Algorithmics', 'ByDieMove', 'NoMovesLoss', 'StateType', 'Trigger', 'SiteState', 'Checkmate', 'SetNextPlayerFrequency', 'SowProperties', 'StepDecisionToEnemy', 'TriangleTiling', 'Fill', 'LeapDecisionToEnemyFrequency', 'ConnectionEnd', 'KnightComponent', 'PieceNumberMaximum', 'InitialScore', 'DiagonalDirection', 'QueenComponent', 'SetInternalCounter', 'Threat', 'BranchingFactorChangeAverage', 'NoOwnPiecesEndFrequency', 'AdvantageP1_Rules_category2_std', 'NoProgressEnd', 'MovesDecision', 'ScoringWin', 'SowBacktracking', 'NoPieceNext', 'CrossBoard', 'FromToDecisionWithinBoardFrequency', 'CaptureSequenceFrequency', 'SlideDecisionToEnemyFrequency', 'NoOwnPiecesWinFrequency', 'PromotionDecisionFrequency', 'GroupEnd', 'ComponentStyle', 'NumRows', 'ScoreDifferenceMedian', 'NoMovesDraw', 'SetSiteState', 'ScoringWinFrequency', 'ScoreDifferenceMaxDecrease', 'TrackOwned', 'LeapDecision', 'Group', 'FromToDecision', 'ConnectionEndFrequency', 'NumComponentsType', 'ChessStyle', 'PromotionEffect', 'ScoreDifferenceAverage', 'DiscComponent', 'BackwardDirection', 'Multiplication', 'Start', 'NoTargetPiece', 'MancalaFourRows', 'NumColumns', 'LeapDecisionToEnemy', 'MovesOperators', 'IsEmpty', 'Dice', 'RollFrequency', 'Minimum', 'LineOfSight', 'PromotionEffectFrequency', 'TrackLoop', 'Draw', 'Capture', 'Subtraction', 'PassDecisionFrequency', 'SingleSiteMoves', 'area', 'PieceState', 'BishopComponent', 'NumAdjacentDirections', 'SowCapture', 'CheckmateFrequency', 'RightwardDirection', 'MancalaStores', 'ForwardDirection', 'Connection', 'SetPending', 'MoveDistanceVariance', 'CanNotMove', 'HopCaptureMoreThanOne', 'RegularShape', 'State', 'MoveDistanceMaxIncrease', 'Parity', 'BoardStyle', 'PieceConditions', 'SquareTiling', 'IsEnemy', 'HexShape', 'NoPiece', 'Scoring', 'AllDirections', 'RemoveDecision', 'NoPieceMover', 'ForgetValues', 'NumDiagonalDirections', 'StepDecisionToEnemyFrequency', 'MarkerComponent', 'Meta', 'HopDecisionMoreThanOne', 'ForEachPiece', 'Addition', 'OpeningContract', 'Set', 'NumStartComponentsHandPerPlayer', 'CountPiecesNextComparison', 'NoTargetPieceEnd', 'LineEnd', 'AddDecisionFrequency', 'MoveDistanceChangeLineBestFit', 'SowRemoveFrequency', 'RememberValues', 'SowCW', 'FromToDecisionBetweenContainersFrequency', 'Shape', 'RemoveEffect', 'PieceNumberChangeLineBestFit', 'NumCentreSites', 'Conditions', 'Then', 'BoardSitesOccupiedChangeLineBestFit', 'NumDirections', 'FromToDecisionFriendFrequency', 'MoveDistanceMaximum', 'PieceNumberChangeAverage', 'AdvantageP1_SCORE_BOUNDS2_std', 'AdvantageP1_SCORE_BOUNDS1_mean', 'Balance_SCORE_BOUNDS2_mean', 'AdvantageP1_SCORE_BOUNDS2_mean', 'Balance_SCORE_BOUNDS1_std', 'Balance_SCORE_BOUNDS2_std', 'Balance_SCORE_BOUNDS1_mean', 'AdvantageP1_SCORE_BOUNDS1_std', 'Balance_agent1_std', 'Balance_agent2_std', 'AdvantageP1_agent1_std', 'Balance_agent2_mean', 'Balance_agent1_mean', 'AdvantageP1_agent2_std', 'AdvantageP1_agent1_mean', 'AdvantageP1_agent2_mean', 'Balance_SELECTION1_std', 'Balance_PLAYOUT1_mean', 'Balance_EXPLORATION_CONST1_mean', 'Balance_PLAYOUT1_std', 'Balance_SELECTION2_std', 'Balance_PLAYOUT2_mean', 'Balance_EXPLORATION_CONST2_mean', 'AdvantageP1_SELECTION1_std', 'AdvantageP1_EXPLORATION_CONST2_mean', 'AdvantageP1_EXPLORATION_CONST1_mean', 'AdvantageP1_SELECTION2_std', 'Balance_PLAYOUT2_std', 'Balance_EXPLORATION_CONST2_std', 'Balance_EXPLORATION_CONST1_std', 'AdvantageP1_PLAYOUT1_mean', 'AdvantageP1_PLAYOUT2_mean', 'Balance_SELECTION2_mean', 'AdvantageP1_PLAYOUT2_std', 'Balance_SELECTION1_mean', 'AdvantageP1_PLAYOUT1_std', 'AdvantageP1_SELECTION2_mean', 'AdvantageP1_SELECTION1_mean/AdvantageP1_EXPLORATION_CONST2_std', 'AdvantageP1_EXPLORATION_CONST2_std/Balance', 'AdvantageP1_EXPLORATION_CONST1_std/AdvantageP1_EXPLORATION_CONST2_std', 'AdvantageP1_SELECTION1_mean/Balance', 'AdvantageP1_EXPLORATION_CONST1_std/Balance', 'AdvantageP1_EXPLORATION_CONST2_std/AdvantageP1', 'AdvantageP1_EXPLORATION_CONST1_std/AdvantageP1', 'SquareShape', 'Rules_nombres_phase', 'Negation', 'SCORE_BOUNDS2', 'SCORE_BOUNDS1', 'Contains', 'NoMoves', 'Conjunction', 'AdvantageP1_EXPLORATION_CONST1_std', 'AdvantageP1_SELECTION1_mean', 'MoveDistanceChangeAverage', 'NumConcaveCorners', 'SowSkip', 'ScoreDifferenceChangeSign', 'TimeoutsPerDurationActions', 'MoveDistanceChangeSign', 'NumComponentsTypePerPlayer', 'ReachWinFrequency', 'ConcentricTiling', 'BoardSitesOccupiedChangeAverage', 'BoardSitesOccupiedMaxDecrease', 'RemoveDecisionFrequency', 'CheckmateWinFrequency', 'Distance', 'MoveDistanceChangeNumTimes', 'HopDecisionFrequency', 'GoStyle', 'StepEffect', 'NumRightSites', 'NumLeftSites', 'NumCorners', 'SowWithEffect', 'LineWin', 'BoardSitesOccupiedMaxIncrease', 'MorrisTiling', 'BoardCoverageFull', 'NumPlayableSites', 'NumStartComponentsPerPlayer', 'NumStartComponents', 'HopDecisionMoreThanOneFrequency', 'NumStartComponentsHand', 'HopCaptureMoreThanOneFrequency', 'NumPhasesBoard', 'HopDecisionEnemyToEmptyFrequency', 'CheckmateWin', 'HopCaptureFrequency', 'LineWinFrequency', 'NumOuterSites', 'CustodialCapture', 'tfid_EnglishRules_0', 'tfid_EnglishRules_1', 'tfid_EnglishRules_2', 'tfid_EnglishRules_3', 'tfid_EnglishRules_4', 'tfid_EnglishRules_5', 'tfid_EnglishRules_6', 'tfid_EnglishRules_7', 'tfid_EnglishRules_8', 'tfid_EnglishRules_9', 'tfid_EnglishRules_10', 'tfid_EnglishRules_11', 'tfid_EnglishRules_12', 'tfid_EnglishRules_13', 'tfid_EnglishRules_14', 'tfid_EnglishRules_15', 'tfid_EnglishRules_16', 'tfid_EnglishRules_17', 'tfid_EnglishRules_18', 'tfid_EnglishRules_19', 'tfid_EnglishRules_20', 'tfid_EnglishRules_21', 'tfid_EnglishRules_22', 'tfid_EnglishRules_23', 'tfid_EnglishRules_24', 'tfid_EnglishRules_25', 'tfid_EnglishRules_26', 'tfid_EnglishRules_27', 'tfid_EnglishRules_28', 'tfid_EnglishRules_29', 'tfid_EnglishRules_30', 'tfid_EnglishRules_31', 'tfid_EnglishRules_32', 'tfid_EnglishRules_33', 'tfid_EnglishRules_34', 'tfid_EnglishRules_35', 'tfid_EnglishRules_36', 'tfid_EnglishRules_37', 'tfid_EnglishRules_38', 'tfid_EnglishRules_39', 'tfid_EnglishRules_40', 'tfid_EnglishRules_41', 'tfid_EnglishRules_42', 'tfid_EnglishRules_43', 'tfid_EnglishRules_44', 'tfid_EnglishRules_45', 'tfid_EnglishRules_46', 'tfid_EnglishRules_47', 'tfid_EnglishRules_48', 'tfid_EnglishRules_49', 'tfid_EnglishRules_50', 'tfid_EnglishRules_51', 'tfid_EnglishRules_52', 'tfid_EnglishRules_53', 'tfid_EnglishRules_54', 'tfid_EnglishRules_55', 'tfid_EnglishRules_56', 'tfid_EnglishRules_57', 'tfid_EnglishRules_58', 'tfid_EnglishRules_59', 'tfid_EnglishRules_60', 'tfid_EnglishRules_61', 'tfid_EnglishRules_62', 'tfid_EnglishRules_63', 'tfid_EnglishRules_64', 'tfid_EnglishRules_65', 'tfid_EnglishRules_66', 'tfid_EnglishRules_67', 'tfid_EnglishRules_68', 'tfid_EnglishRules_69', 'tfid_EnglishRules_70', 'tfid_EnglishRules_71', 'tfid_EnglishRules_72', 'tfid_EnglishRules_73', 'tfid_EnglishRules_74', 'tfid_EnglishRules_75', 'tfid_EnglishRules_76', 'tfid_EnglishRules_77', 'tfid_EnglishRules_78', 'tfid_EnglishRules_79', 'tfid_EnglishRules_80', 'tfid_EnglishRules_81', 'tfid_EnglishRules_82', 'tfid_EnglishRules_83', 'tfid_EnglishRules_84', 'tfid_EnglishRules_85', 'tfid_EnglishRules_86', 'tfid_EnglishRules_87', 'tfid_EnglishRules_88', 'tfid_EnglishRules_89', 'tfid_EnglishRules_90', 'tfid_EnglishRules_91', 'tfid_EnglishRules_92', 'tfid_EnglishRules_93', 'tfid_EnglishRules_94', 'tfid_EnglishRules_95', 'tfid_EnglishRules_96', 'tfid_EnglishRules_97', 'tfid_EnglishRules_98', 'tfid_EnglishRules_99', 'tfid_EnglishRules_100', 'tfid_EnglishRules_101', 'tfid_EnglishRules_102', 'tfid_EnglishRules_103', 'tfid_EnglishRules_104', 'tfid_EnglishRules_105', 'tfid_EnglishRules_106', 'tfid_EnglishRules_107', 'tfid_EnglishRules_108', 'tfid_EnglishRules_109', 'tfid_EnglishRules_110', 'tfid_EnglishRules_111', 'tfid_EnglishRules_112', 'tfid_EnglishRules_113', 'tfid_EnglishRules_114', 'tfid_EnglishRules_115', 'tfid_EnglishRules_116', 'tfid_EnglishRules_117', 'tfid_EnglishRules_118', 'tfid_EnglishRules_119', 'tfid_EnglishRules_120', 'tfid_EnglishRules_121', 'tfid_EnglishRules_122', 'tfid_EnglishRules_123', 'tfid_EnglishRules_124', 'tfid_EnglishRules_125', 'tfid_EnglishRules_126', 'tfid_EnglishRules_127', 'tfid_EnglishRules_128', 'tfid_EnglishRules_129', 'tfid_EnglishRules_130', 'tfid_EnglishRules_131', 'tfid_EnglishRules_132', 'tfid_EnglishRules_133', 'tfid_EnglishRules_134', 'tfid_EnglishRules_135', 'tfid_EnglishRules_136', 'tfid_EnglishRules_137', 'tfid_EnglishRules_138', 'tfid_EnglishRules_139', 'tfid_EnglishRules_140', 'tfid_EnglishRules_141', 'tfid_EnglishRules_142', 'tfid_EnglishRules_143', 'tfid_EnglishRules_144', 'tfid_EnglishRules_145', 'tfid_EnglishRules_146', 'tfid_EnglishRules_147', 'tfid_EnglishRules_148', 'tfid_EnglishRules_149', 'tfid_EnglishRules_150', 'tfid_EnglishRules_151', 'tfid_EnglishRules_152', 'tfid_EnglishRules_153', 'tfid_EnglishRules_154', 'tfid_EnglishRules_155', 'tfid_EnglishRules_156', 'tfid_EnglishRules_157', 'tfid_EnglishRules_158', 'tfid_EnglishRules_159', 'tfid_EnglishRules_160', 'tfid_EnglishRules_161', 'tfid_EnglishRules_162', 'tfid_EnglishRules_163', 'tfid_EnglishRules_164', 'tfid_EnglishRules_165', 'tfid_EnglishRules_166', 'tfid_EnglishRules_167', 'tfid_EnglishRules_168', 'tfid_EnglishRules_169', 'tfid_EnglishRules_170', 'tfid_EnglishRules_171', 'tfid_EnglishRules_172', 'tfid_EnglishRules_173', 'tfid_EnglishRules_174', 'tfid_EnglishRules_175', 'tfid_EnglishRules_176', 'tfid_EnglishRules_177', 'tfid_EnglishRules_178', 'tfid_EnglishRules_179', 'tfid_EnglishRules_180', 'tfid_EnglishRules_181', 'tfid_EnglishRules_182', 'tfid_EnglishRules_183', 'tfid_EnglishRules_184', 'tfid_EnglishRules_185', 'tfid_EnglishRules_186', 'tfid_EnglishRules_187', 'tfid_EnglishRules_188', 'tfid_EnglishRules_189', 'tfid_EnglishRules_190', 'tfid_EnglishRules_191', 'tfid_EnglishRules_192', 'tfid_EnglishRules_193', 'tfid_EnglishRules_194', 'tfid_EnglishRules_195', 'tfid_EnglishRules_196', 'tfid_EnglishRules_197', 'tfid_EnglishRules_198', 'tfid_EnglishRules_199', 'tfid_EnglishRules_200', 'tfid_EnglishRules_201', 'tfid_EnglishRules_202', 'tfid_EnglishRules_203', 'tfid_EnglishRules_204', 'tfid_EnglishRules_205', 'tfid_EnglishRules_206', 'tfid_EnglishRules_207', 'tfid_EnglishRules_208', 'tfid_EnglishRules_209', 'tfid_EnglishRules_210', 'tfid_EnglishRules_211', 'tfid_EnglishRules_212', 'tfid_EnglishRules_213', 'tfid_EnglishRules_214', 'tfid_EnglishRules_215', 'tfid_EnglishRules_216', 'tfid_EnglishRules_217', 'tfid_EnglishRules_218', 'tfid_EnglishRules_219', 'tfid_EnglishRules_220', 'tfid_EnglishRules_221', 'tfid_EnglishRules_222', 'tfid_EnglishRules_223', 'tfid_EnglishRules_224', 'tfid_EnglishRules_225', 'tfid_EnglishRules_226', 'tfid_EnglishRules_227', 'tfid_EnglishRules_228', 'tfid_EnglishRules_229', 'tfid_EnglishRules_230', 'tfid_EnglishRules_231', 'tfid_EnglishRules_232', 'tfid_EnglishRules_233', 'tfid_EnglishRules_234', 'tfid_EnglishRules_235', 'tfid_EnglishRules_236', 'tfid_EnglishRules_237', 'tfid_EnglishRules_238', 'tfid_EnglishRules_239', 'tfid_EnglishRules_240', 'tfid_EnglishRules_241', 'tfid_EnglishRules_242', 'tfid_EnglishRules_243', 'tfid_EnglishRules_244', 'tfid_EnglishRules_245', 'tfid_EnglishRules_246', 'tfid_EnglishRules_247', 'tfid_EnglishRules_248', 'tfid_EnglishRules_249', 'tfid_EnglishRules_250', 'tfid_EnglishRules_251', 'tfid_EnglishRules_252', 'tfid_EnglishRules_253', 'tfid_EnglishRules_254', 'tfid_EnglishRules_255', 'tfid_EnglishRules_256', 'tfid_EnglishRules_257', 'tfid_EnglishRules_258', 'tfid_EnglishRules_259', 'tfid_EnglishRules_260', 'tfid_EnglishRules_261', 'tfid_EnglishRules_262', 'tfid_EnglishRules_263', 'tfid_EnglishRules_264', 'tfid_EnglishRules_265', 'tfid_EnglishRules_266', 'tfid_EnglishRules_267', 'tfid_EnglishRules_268', 'tfid_EnglishRules_269', 'tfid_EnglishRules_270', 'tfid_EnglishRules_271', 'tfid_EnglishRules_272', 'tfid_EnglishRules_273', 'tfid_EnglishRules_274', 'tfid_EnglishRules_275', 'tfid_EnglishRules_276', 'tfid_EnglishRules_277', 'tfid_EnglishRules_278', 'tfid_EnglishRules_279', 'tfid_EnglishRules_280', 'tfid_EnglishRules_281', 'tfid_EnglishRules_282', 'tfid_EnglishRules_283', 'tfid_EnglishRules_284', 'tfid_EnglishRules_285', 'tfid_EnglishRules_286', 'tfid_EnglishRules_287', 'tfid_EnglishRules_288', 'tfid_EnglishRules_289', 'tfid_EnglishRules_290', 'tfid_EnglishRules_291', 'tfid_EnglishRules_292', 'tfid_EnglishRules_293', 'tfid_EnglishRules_294', 'tfid_EnglishRules_295', 'tfid_EnglishRules_296', 'tfid_EnglishRules_297', 'tfid_EnglishRules_298', 'tfid_EnglishRules_299', 'tfid_EnglishRules_300', 'tfid_EnglishRules_301', 'tfid_EnglishRules_302', 'tfid_EnglishRules_303', 'tfid_EnglishRules_304', 'tfid_EnglishRules_305', 'tfid_EnglishRules_306', 'tfid_EnglishRules_307', 'tfid_EnglishRules_308', 'tfid_EnglishRules_309', 'tfid_EnglishRules_310', 'tfid_EnglishRules_311', 'tfid_EnglishRules_312', 'tfid_EnglishRules_313', 'tfid_EnglishRules_314', 'tfid_EnglishRules_315', 'tfid_EnglishRules_316', 'tfid_EnglishRules_317', 'tfid_EnglishRules_318', 'tfid_EnglishRules_319', 'tfid_EnglishRules_320', 'tfid_EnglishRules_321', 'tfid_EnglishRules_322', 'tfid_EnglishRules_323', 'tfid_EnglishRules_324', 'tfid_EnglishRules_325', 'tfid_EnglishRules_326', 'tfid_EnglishRules_327', 'tfid_EnglishRules_328', 'tfid_EnglishRules_329', 'tfid_EnglishRules_330', 'tfid_EnglishRules_331', 'tfid_EnglishRules_332', 'tfid_EnglishRules_333', 'tfid_EnglishRules_334', 'tfid_EnglishRules_335', 'tfid_EnglishRules_336', 'tfid_EnglishRules_337', 'tfid_EnglishRules_338', 'tfid_EnglishRules_339', 'tfid_EnglishRules_340', 'tfid_EnglishRules_341', 'tfid_EnglishRules_342', 'tfid_EnglishRules_343', 'tfid_EnglishRules_344', 'tfid_EnglishRules_345', 'tfid_EnglishRules_346', 'tfid_EnglishRules_347', 'tfid_EnglishRules_348', 'tfid_EnglishRules_349', 'tfid_EnglishRules_350', 'tfid_EnglishRules_351', 'tfid_EnglishRules_352', 'tfid_EnglishRules_353', 'tfid_EnglishRules_354', 'tfid_EnglishRules_355', 'tfid_EnglishRules_356', 'tfid_EnglishRules_357', 'tfid_EnglishRules_358', 'tfid_EnglishRules_359', 'tfid_EnglishRules_360', 'tfid_EnglishRules_361', 'tfid_EnglishRules_362', 'tfid_EnglishRules_363', 'tfid_EnglishRules_364', 'tfid_EnglishRules_365', 'tfid_EnglishRules_366', 'tfid_EnglishRules_367', 'tfid_EnglishRules_368', 'tfid_EnglishRules_369', 'tfid_EnglishRules_370', 'tfid_EnglishRules_371', 'tfid_EnglishRules_372', 'tfid_EnglishRules_373', 'tfid_EnglishRules_374', 'tfid_EnglishRules_375', 'tfid_EnglishRules_376', 'tfid_EnglishRules_377', 'tfid_EnglishRules_378', 'tfid_EnglishRules_379', 'tfid_EnglishRules_380', 'tfid_EnglishRules_381', 'tfid_EnglishRules_382', 'tfid_EnglishRules_383', 'tfid_EnglishRules_384', 'tfid_EnglishRules_385', 'tfid_EnglishRules_386', 'tfid_EnglishRules_387', 'tfid_EnglishRules_388', 'tfid_EnglishRules_389', 'tfid_EnglishRules_390', 'tfid_EnglishRules_391', 'tfid_EnglishRules_392', 'tfid_EnglishRules_393', 'tfid_EnglishRules_394', 'tfid_EnglishRules_395', 'tfid_EnglishRules_396', 'tfid_EnglishRules_397', 'tfid_EnglishRules_398', 'tfid_EnglishRules_399']\n",
      "categoricals : ['Rules_equipment', 'Rules_game', 'Rules_category1', 'Rules_category2', 'SELECTION1', 'PLAYOUT1', 'SELECTION2', 'PLAYOUT2']\n",
      "fixed_categories : ['SELECTION1', 'PLAYOUT1', 'SELECTION2', 'PLAYOUT2']\n",
      "categories_to_nan : ['Rules_equipment', 'Rules_game', 'Rules_category1', 'Rules_category2']\n",
      "encode_rare_category_together : {'Rules_game': 300, 'Rules_main_game': 300, 'Rules_equipment': 300, 'Rules_category': 300, 'Rules_category1': 300, 'Rules_category2': 300, 'GameRulesetName': 300, 'Rules_start': 300, 'Rules_play': 300, 'Rules_end': 300, 'Rules_phase': 300, 'Rules_meta': 300, 'SELECTION1': 0, 'PLAYOUT1': 0, 'SELECTION2': 0, 'PLAYOUT2': 0}\n",
      "l_tfid : []\n",
      "tfid_max_col : {'Rules_category': 5, 'EnglishRules': 400}\n",
      "l_select_kbest : []\n",
      "l_kmeans : ['EnglishRules']\n",
      "num_clusters : {'EnglishRules': 10}\n",
      "cols_onehot : []\n",
      "load : False\n",
      "load_path : /kaggle/input/um-mcts-gbt-baseline-v187\n",
      "l_permutation_importance : []\n",
      "post_processing : False\n",
      "device : cpu\n",
      "train_path : /kaggle/input/um-game-playing-strength-of-mcts-variants/train.csv\n",
      "batch_size : 65536\n",
      "low_memory : False\n",
      "target_col : utility_agent1\n",
      "weights : [1.0]\n",
      "early_stop : 100\n",
      "nn : epochs: 150 | lr: 0.01 | lr_start: 1e-05 | lr_max: 0.01 | lr_rampup: 2 | lr_sustain: 1 | lr_decay: 0.75\n",
      "lgbm : objective: rmse | verbose: -1 | random_seed: 42 | num_trees: 20000 | learning_rate: 0.011391593088960518 | max_depth: 12 | min_data_in_leaf: 69 | num_leaves: 2332 | subsample: 0.9583707249838648 | reg_lambda: 0.0681561641665741 | device: cpu | gpu_use_dp: False | metric: rmse | extra_trees: True | colsample_bytree: 0.524671448743249 | subsample_freq: 1\n",
      "catboost : objective: RMSE | verbose: -1 | random_seed: 42 | num_trees: 20000 | learning_rate: 0.03 | max_depth: 12 | min_data_in_leaf: 25 | reg_lambda: 0.0005 | task_type: CPU | eval_metric: RMSE | random_strength: 0.01\n"
     ]
    }
   ],
   "source": [
    "CFG = dotdict(dict)\n",
    "#\n",
    "CFG.l_models = ['lgbm'] #catboost, lgbm, nn\n",
    "CFG.fold_name = 'sgkfold'\n",
    "CFG.fold_col = 'GameRulesetName' #GameRulesetName #main_game_rules\n",
    "CFG.l_optuna = []\n",
    "CFG.optuna_n_trials = 70 if not is_interactive() else 2\n",
    "CFG.n_splits = 5 if not is_interactive() else 2\n",
    "#\n",
    "CFG.drop = list(dict.fromkeys(['Id', 'num_wins_agent1', 'num_draws_agent1', 'num_losses_agent1', \n",
    "            'agent1', 'agent2', # splits in several columns\n",
    "            'LudRules', # splits in 'game', 'players', 'equipment', 'rules'\n",
    "            'EnglishRules', \n",
    "            \"Rules_players\", # replaced by Rules_players_len 'Rules_players_len',\n",
    "            'Rules_rules', ###\n",
    "            'Rules_start', 'Rules_play', 'Rules_end', 'Rules_phase',  'Rules_meta', \n",
    "            'Rules_size_board', 'Rules_period', 'Rules_region', \n",
    "            'Rules_Opening', 'Rules_Playing', 'Rules_Rearrangement', 'Rules_Sowing', 'Rules_Placement', 'Rules_Move', 'Rules_Movement', 'Rules_OpeningP1', 'Rules_OpeningP2', 'Rules_SowingRestricted', 'Rules_BetweenRounds', 'Rules_PlacementLosingPlayer', 'Rules_Play', 'Rules_Opening1', 'Rules_Opening2', 'Rules_FirstTurn', 'Rules_SecondTurn', 'Rules_FirstMove', 'Rules_PlacementP1', 'Rules_HuntingP2', 'Rules_PlacementP2', 'Rules_HuntingP1', 'Rules_MovementP1', 'Rules_FirstTigerMovement', 'Rules_MovementP2', 'Rules_UnStacking', 'Rules_BearingOff', 'Rules_Main', 'Rules_Swapping', 'Rules_Choose', 'Rules_FirstPlacement', 'Rules_InitialPhase', 'Rules_MainPhase', 'Rules_Throwing', 'Rules_Moving', 'Rules_OuterPhase', 'Rules_OpeningPair', 'Rules_SecondMove', 'Rules_ThirdMove', 'Rules_Layout', 'Rules_RemoveCentre', 'Rules_Battle', 'Rules_Fly', 'Rules_Agreement', 'Rules_InitGame', 'Rules_PlacementCenter', 'Rules_Place', 'Rules_Rotate', 'Rules_Misoro', 'Rules_CapturingFirstPhase', 'Rules_FanoronaPhase', 'Rules_Capture', 'Rules_FoxPhase', 'Rules_HenPhase', 'Rules_General', 'Rules_Init', 'Rules_InitPhase', 'Rules_Remove', 'Rules_BullPlacement', 'Rules_MarkerPlacementAroundBull', 'Rules_DecisionForNextRound', 'Rules_Opening3', 'Rules_Opening4', 'Rules_Opening5', 'Rules_MiddlePhase', 'Rules_FinalPhase', 'Rules_EndGame', 'Rules_InitGuerrilla', 'Rules_GuerrillaMove', 'Rules_CoinMove', 'Rules_StartingMove', 'Rules_Setup', 'Rules_PlacePhase', 'Rules_MovePhase', 'Rules_Movement2', 'Rules_Produce2', 'Rules_Movement1', 'Rules_Produce1', 'Rules_start', 'Rules_play', 'Rules_PlacementTiger', 'Rules_MoveHuman', 'Rules_PlacementHuman', 'Rules_SowingCW', 'Rules_Rightmost', 'Rules_HomePhase', 'Rules_Placing', 'Rules_Throw Bread', 'Rules_Move Bread', 'Rules_PlayingPips', 'Rules_MultiJump', 'Rules_Select', 'Rules_Pie', 'Rules_SelectingHole', 'Rules_Game', 'Rules_PlacementAdjacent', 'Rules_Cross', 'Rules_Continue', 'Rules_PlaceKing', 'Rules_PlaceFirstElephant', 'Rules_PlaceOtherPieces', 'Rules_Stacking', 'Rules_Round', 'Rules_BetweenRound', 'Rules_Opening6', 'Rules_OpeningCounselor', 'Rules_OpeningSoldier', 'Rules_FirstPhase', 'Rules_SecondPhase', 'Rules_Swap', 'Rules_Passive', 'Rules_Aggressive', 'Rules_GetMoves', 'Rules_InitContagion', 'Rules_ContagionGrowth', 'Rules_Containment', 'Rules_Opening7', 'Rules_InitialSowing', 'Rules_CentrePlacing', 'Rules_Connection', 'Rules_PlacementFirstTiger', 'Rules_RemoveHuman', 'Rules_PlacementSecondTiger', 'Rules_TwoFirstTurn', 'Rules_CounterPlacement', 'Rules_DuxPlacement', 'Rules_MainP1', 'Rules_MainP2', 'Rules_MarkedPlacement', 'Rules_Replay',\n",
    "            'Rules_equipment', \n",
    "            'Rules_category','Rules_category1', 'Rules_category2', \n",
    "            'Rules_game',# will use Rules_main_game in cat col\n",
    "            'Rules_main_game',# will use Rules_game in cat col    \n",
    "            # < 10-5 perm importance                   \n",
    "            'Efficiency', 'MovesNonDecision', 'SetVar', 'NumPlayPhase', 'ForwardLeftDirection', 'DecisionFactorChangeLineBestFit', 'SwapPlayersEffect', 'Edge', 'RectangleShape', 'Rules_category1', 'ReplacementCapture', 'Variable', 'AdvantageP1_Rules_category2_mean', 'ChessComponent', 'Rules_category2', 'NoMovesEnd', 'ScoreDifferenceMaximum', 'PenAndPaperStyle', 'NumTopSites', 'CountPiecesMoverComparison', 'SlideDecisionFrequency', 'DecisionFactorChangeNumTimes', 'HexTiling', 'SowRemove', 'LesserThan', 'Style', 'ScoreDifferenceVariance', 'MoveDistanceAverage', 'FromToDecisionEnemy', 'Math', 'ScoreDifferenceMaxIncrease', 'SowCCW', 'Division', 'MoveAgainFrequency', 'AddEffectFrequency', 'NoTargetPieceEndFrequency', 'PromotionDecision', 'LeapDecisionToEmpty', 'StepDecisionToEmpty', 'PolygonShape', 'GreaterThan', 'MovesEffects', 'NumBottomSites', 'Directions', 'TurnsDurationEfficiency', 'FromToDecisionEmpty', 'ForwardsDirection', 'Stack', 'FromToDecisionFriend', 'PieceNumberMaxDecrease', 'PieceValue', 'CircleShape', 'NumConvexCorners', 'DiceD2', 'AlquerqueBoardWithTwoTriangles', 'RookComponent', 'MoveDistanceMaxDecrease', 'LeapDecisionFrequency', 'SlideEffect', 'ConnectionWinFrequency', 'NoMovesWinFrequency', 'LeapDecisionToEmptyFrequency', 'PawnComponent', 'HopDecisionFriendToEmptyFrequency', 'Even', 'Modulo', 'SowBacktrackingFrequency', 'CaptureSequence', 'BackgammonStyle', 'SetValueFrequency', 'AdvantageP1_Rules_category1_std', 'MoveDistanceMedian', 'NoOwnPiecesWin', 'DiceD6', 'NoProgressDraw', 'FromToDecisionEnemyFrequency', 'FairyChessComponent', 'ShogiStyle', 'FromToEffect', 'Visual', 'Rules_players_len', 'Tiling', 'StackType', 'SetValue', 'ProgressCheck', 'NoOwnPiecesEnd', 'ReachWin', 'MaxMovesInTurn', 'SwapPlayersDecision', 'PositionalSuperko', 'ScoringEnd', 'IsPieceAt', 'ScoreDifferenceChangeAverage', 'SlideDecision', 'ConnectionWin', 'KingComponent', 'NumDice', 'SumDice', 'InternalCounter', 'Odd', 'AlquerqueBoard', 'ReplacementCaptureFrequency', 'NoProgressEndFrequency', 'PlayerValue', 'AdvantageP1_Rules_category1_mean', 'Repetition', 'Maximum', 'GraphStyle', 'CustodialCaptureFrequency', 'Algorithmics', 'ByDieMove', 'NoMovesLoss', 'StateType', 'Trigger', 'SiteState', 'Checkmate', 'SetNextPlayerFrequency', 'SowProperties', 'StepDecisionToEnemy', 'TriangleTiling', 'Fill', 'LeapDecisionToEnemyFrequency', 'ConnectionEnd', 'KnightComponent', 'PieceNumberMaximum', 'InitialScore', 'DiagonalDirection', 'QueenComponent', 'SetInternalCounter', 'Threat', 'BranchingFactorChangeAverage', 'NoOwnPiecesEndFrequency', 'AdvantageP1_Rules_category2_std', 'NoProgressEnd', 'MovesDecision', 'ScoringWin', 'SowBacktracking', 'NoPieceNext', 'CrossBoard', 'FromToDecisionWithinBoardFrequency', 'CaptureSequenceFrequency', 'SlideDecisionToEnemyFrequency', 'NoOwnPiecesWinFrequency', 'PromotionDecisionFrequency', 'GroupEnd', 'ComponentStyle', 'NumRows', 'ScoreDifferenceMedian', 'NoMovesDraw', 'SetSiteState', 'ScoringWinFrequency', 'ScoreDifferenceMaxDecrease', 'TrackOwned', 'LeapDecision', 'Group', 'FromToDecision', 'ConnectionEndFrequency', 'NumComponentsType', 'ChessStyle', 'PromotionEffect', 'ScoreDifferenceAverage', 'DiscComponent', 'BackwardDirection', 'Multiplication', 'Start', 'NoTargetPiece', 'MancalaFourRows', 'NumColumns', 'LeapDecisionToEnemy', 'MovesOperators', 'IsEmpty', 'Dice', 'RollFrequency', 'Minimum', 'LineOfSight', 'PromotionEffectFrequency', 'TrackLoop', 'Draw', 'Capture', 'Subtraction', 'PassDecisionFrequency', 'SingleSiteMoves', 'area', 'PieceState', 'BishopComponent', 'NumAdjacentDirections', 'SowCapture', 'CheckmateFrequency', 'RightwardDirection', 'MancalaStores', 'ForwardDirection', 'Connection', 'SetPending', 'MoveDistanceVariance', 'CanNotMove', 'HopCaptureMoreThanOne', 'RegularShape', 'State', 'MoveDistanceMaxIncrease', 'Parity', 'BoardStyle', 'PieceConditions', 'SquareTiling', 'IsEnemy', 'HexShape', 'NoPiece', 'Scoring', 'AllDirections', 'RemoveDecision', 'NoPieceMover', 'ForgetValues', 'NumDiagonalDirections', 'StepDecisionToEnemyFrequency', 'MarkerComponent', 'Meta', 'HopDecisionMoreThanOne', 'ForEachPiece', 'Addition', 'OpeningContract', 'Set', 'NumStartComponentsHandPerPlayer', 'CountPiecesNextComparison', 'NoTargetPieceEnd', 'LineEnd', 'AddDecisionFrequency', 'MoveDistanceChangeLineBestFit', 'SowRemoveFrequency', 'RememberValues',\n",
    "            # < 10-5 perm importance                   \n",
    "            'SowCW', 'FromToDecisionBetweenContainersFrequency', 'Shape', 'RemoveEffect', 'PieceNumberChangeLineBestFit', 'NumCentreSites', 'Conditions', 'Then', 'BoardSitesOccupiedChangeLineBestFit', 'NumDirections', 'FromToDecisionFriendFrequency', 'MoveDistanceMaximum', 'PieceNumberChangeAverage',\n",
    "            # <0 Permutation importance new FES\n",
    "            'AdvantageP1_SCORE_BOUNDS2_std', 'AdvantageP1_SCORE_BOUNDS1_mean', 'Balance_SCORE_BOUNDS2_mean', 'AdvantageP1_SCORE_BOUNDS2_mean', 'Balance_SCORE_BOUNDS1_std', 'Balance_SCORE_BOUNDS2_std', 'Balance_SCORE_BOUNDS1_mean', 'AdvantageP1_SCORE_BOUNDS1_std', 'Balance_agent1_std', 'Balance_agent2_std', 'AdvantageP1_agent1_std', 'Balance_agent2_mean', 'Balance_agent1_mean', 'AdvantageP1_agent2_std', 'AdvantageP1_agent1_mean', 'AdvantageP1_agent2_mean', 'Balance_SELECTION1_std', 'Balance_PLAYOUT1_mean', 'Balance_EXPLORATION_CONST1_mean', 'Balance_PLAYOUT1_std', 'Balance_SELECTION2_std', 'Balance_PLAYOUT2_mean', 'Balance_EXPLORATION_CONST2_mean', 'AdvantageP1_SELECTION1_std', 'AdvantageP1_EXPLORATION_CONST2_mean', 'AdvantageP1_EXPLORATION_CONST1_mean', 'AdvantageP1_SELECTION2_std', 'Balance_PLAYOUT2_std', 'Balance_EXPLORATION_CONST2_std', 'Balance_EXPLORATION_CONST1_std', 'AdvantageP1_PLAYOUT1_mean', 'AdvantageP1_PLAYOUT2_mean', 'Balance_SELECTION2_mean', 'AdvantageP1_PLAYOUT2_std', 'Balance_SELECTION1_mean', 'AdvantageP1_PLAYOUT1_std', 'AdvantageP1_SELECTION2_mean',    \n",
    "            # <0 Permutation importance cross FES                \n",
    "            'AdvantageP1_SELECTION1_mean/AdvantageP1_EXPLORATION_CONST2_std', 'AdvantageP1_EXPLORATION_CONST2_std/Balance', 'AdvantageP1_EXPLORATION_CONST1_std/AdvantageP1_EXPLORATION_CONST2_std', 'AdvantageP1_SELECTION1_mean/Balance', 'AdvantageP1_EXPLORATION_CONST1_std/Balance', 'AdvantageP1_EXPLORATION_CONST2_std/AdvantageP1', 'AdvantageP1_EXPLORATION_CONST1_std/AdvantageP1',                   \n",
    "            ## Features les plus importantes, avec <0 Permutation importance \n",
    "            'SquareShape', 'Rules_nombres_phase', 'Negation', 'SCORE_BOUNDS2', 'SCORE_BOUNDS1', 'Contains', 'Rules_category2', 'NoMoves', 'Conjunction', 'AdvantageP1_EXPLORATION_CONST1_std', 'AdvantageP1_SELECTION1_mean',\n",
    "            ## Features les moins importantes avec <0 permutation importance\n",
    "            'MoveDistanceChangeAverage', 'NumConcaveCorners', 'SowSkip', 'ScoreDifferenceChangeSign', 'TimeoutsPerDurationActions', 'MoveDistanceChangeSign', 'NumComponentsTypePerPlayer', 'ReachWinFrequency', 'ConcentricTiling', 'BoardSitesOccupiedChangeAverage', 'BoardSitesOccupiedMaxDecrease', 'RemoveDecisionFrequency', 'CheckmateWinFrequency', 'Distance', 'MoveDistanceChangeNumTimes', 'HopDecisionFrequency', 'GoStyle', 'StepEffect', 'NumRightSites', 'NumLeftSites', 'NumCorners', 'SowWithEffect', 'LineWin', 'BoardSitesOccupiedMaxIncrease', 'MorrisTiling', 'BoardCoverageFull', 'NumPlayableSites', 'NumStartComponentsPerPlayer', 'NumStartComponents', 'HopDecisionMoreThanOneFrequency', 'NumStartComponentsHand', 'HopCaptureMoreThanOneFrequency', 'NumPhasesBoard', 'HopDecisionEnemyToEmptyFrequency', 'CheckmateWin', 'HopCaptureFrequency', 'LineWinFrequency', 'NumOuterSites', 'CustodialCapture',                   \n",
    "            ]))\n",
    "CFG.categoricals = [ #'GameRulesetName',\n",
    "                    'Rules_equipment', \"Rules_game\", # 'Rules_main_game',\n",
    "                    #'Rules_start', 'Rules_play', 'Rules_end', 'Rules_phase',  'Rules_meta',\n",
    "                    #'Rules_category', \n",
    "                    'Rules_category1', 'Rules_category2',\n",
    "                    'SELECTION1', 'PLAYOUT1', 'SELECTION2', 'PLAYOUT2']\n",
    "## Rules_main_game col not the same between train and test\n",
    "## Rules_game col not the same between train and test\n",
    "## fixed_categories : test categorical = train categoricals.\n",
    "CFG.fixed_categories = ['SELECTION1', 'PLAYOUT1', 'SELECTION2', 'PLAYOUT2']\n",
    "CFG.categories_to_nan = [x for x in CFG.categoricals if x not in CFG.fixed_categories]\n",
    "CFG.encode_rare_category_together = {}\n",
    "CFG.encode_rare_category_together['Rules_game'] = 300\n",
    "CFG.encode_rare_category_together['Rules_main_game'] = 300\n",
    "CFG.encode_rare_category_together['Rules_equipment'] = 300\n",
    "CFG.encode_rare_category_together['Rules_category'] = 300\n",
    "CFG.encode_rare_category_together['Rules_category1'] = 300\n",
    "CFG.encode_rare_category_together['Rules_category2'] = 300\n",
    "CFG.encode_rare_category_together['GameRulesetName'] = 300\n",
    "CFG.encode_rare_category_together['Rules_start'] = 300\n",
    "CFG.encode_rare_category_together['Rules_play'] = 300\n",
    "CFG.encode_rare_category_together['Rules_end'] = 300\n",
    "CFG.encode_rare_category_together['Rules_phase'] = 300\n",
    "CFG.encode_rare_category_together['Rules_meta'] = 300\n",
    "for col in CFG.fixed_categories : CFG.encode_rare_category_together[col] = 0\n",
    "#\n",
    "CFG.l_tfid = []\n",
    "CFG.tfid_max_col = {}\n",
    "CFG.tfid_max_col['Rules_category'] = 5\n",
    "CFG.tfid_max_col['EnglishRules'] = 400\n",
    "CFG.l_select_kbest = []\n",
    "CFG.l_kmeans =['EnglishRules']\n",
    "CFG.num_clusters = {}\n",
    "CFG.num_clusters['EnglishRules'] = 10\n",
    "CFG.drop += [f'tfid_EnglishRules_{x}' for x in range(CFG.tfid_max_col['EnglishRules'] )]\n",
    "#       \n",
    "CFG.cols_onehot = []\n",
    "# Flow Parameters\n",
    "CFG.load = False\n",
    "CFG.load_path = '/kaggle/input/um-mcts-gbt-baseline-v187'\n",
    "CFG.l_permutation_importance = []\n",
    "CFG.post_processing = False\n",
    "CFG.device = 'gpu' if is_kaggle_gpu_enabled() else 'cpu'\n",
    "CFG.train_path = '/kaggle/input/um-game-playing-strength-of-mcts-variants/train.csv'\n",
    "CFG.batch_size = 65536\n",
    "CFG.low_memory = False  \n",
    "CFG.target_col = 'utility_agent1'\n",
    "CFG.weights = [1/len(CFG.l_models) for x in CFG.l_models] \n",
    "CFG.early_stop = 100\n",
    "# Models Parameters\n",
    "CFG.nn = dotdict(dict)\n",
    "CFG.nn.epochs = 150 if not is_interactive() else 1\n",
    "CFG.nn.lr = 0.01\n",
    "CFG.nn.lr_start = 1e-5\n",
    "CFG.nn.lr_max = 1e-2\n",
    "CFG.nn.lr_rampup = 2\n",
    "CFG.nn.lr_sustain = 1\n",
    "CFG.nn.lr_decay = 0.75\n",
    "# \n",
    "CFG.lgbm = dotdict(dict)\n",
    "CFG.lgbm.objective = 'rmse'\n",
    "CFG.lgbm.verbose = -1\n",
    "CFG.lgbm.random_seed = 42\n",
    "CFG.lgbm.num_trees = 20_000 if not is_interactive() else 5 #num_iteration, n_iter, num_tree, num_trees, num_round, num_rounds, nrounds, num_boost_round, n_estimators, max_iter\n",
    "CFG.lgbm.learning_rate = 0.011391593088960518\n",
    "CFG.lgbm.max_depth = 12\n",
    "CFG.lgbm.min_data_in_leaf = 69\n",
    "CFG.lgbm.num_leaves = 2332\n",
    "CFG.lgbm.subsample = 0.9583707249838648\n",
    "CFG.lgbm.reg_lambda = 0.0681561641665741\n",
    "\n",
    "CFG.lgbm.device = CFG.device.lower()\n",
    "CFG.lgbm.gpu_use_dp = True if CFG.device.lower() == 'gpu' else False\n",
    "CFG.lgbm.metric  = 'rmse' \n",
    "CFG.lgbm.extra_trees = True\n",
    "CFG.lgbm.colsample_bytree = 0.524671448743249\n",
    "CFG.lgbm.subsample_freq = 1\n",
    "#\n",
    "CFG.catboost = dotdict(dict)\n",
    "CFG.catboost.objective = 'RMSE'\n",
    "CFG.catboost.verbose = -1\n",
    "CFG.catboost.random_seed = 42\n",
    "CFG.catboost.num_trees = 20_000 if not is_interactive() else 5 # num_boost_round, n_estimators, num_trees\n",
    "CFG.catboost.learning_rate = 0.03\n",
    "CFG.catboost.max_depth = 12\n",
    "CFG.catboost.min_data_in_leaf = 25\n",
    "# CFG.catboost.num_leaves = 64\n",
    "# CFG.catboost.subsample = 1\n",
    "CFG.catboost.reg_lambda = 0.0005\n",
    "\n",
    "CFG.catboost.task_type = CFG.device.upper()\n",
    "CFG.catboost.eval_metric = 'RMSE'\n",
    "# CFG.catboost.colsample_bylevel = 0.8\n",
    "CFG.catboost.random_strength = 0.01\n",
    "#        \n",
    "# CFG = json.load(open(CFG.load_path + '/CFG.json', 'r'))\n",
    "json.dump(CFG, open('CFG.json', 'w'))\n",
    "    \n",
    "if not is_interactive(): \n",
    "    for key, value in CFG.items() : \n",
    "        print(f'{key} : {value}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e63ea83",
   "metadata": {
    "papermill": {
     "duration": 0.021645,
     "end_time": "2024-10-28T02:19:00.795033",
     "exception": false,
     "start_time": "2024-10-28T02:19:00.773388",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Read train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c09e106e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:00.840813Z",
     "iopub.status.busy": "2024-10-28T02:19:00.840404Z",
     "iopub.status.idle": "2024-10-28T02:19:09.349533Z",
     "shell.execute_reply": "2024-10-28T02:19:09.348177Z"
    },
    "papermill": {
     "duration": 8.535602,
     "end_time": "2024-10-28T02:19:09.352589",
     "exception": false,
     "start_time": "2024-10-28T02:19:00.816987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pl.read_csv(CFG.train_path, low_memory= CFG.low_memory, batch_size=CFG.batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "874a05a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:09.401770Z",
     "iopub.status.busy": "2024-10-28T02:19:09.400458Z",
     "iopub.status.idle": "2024-10-28T02:19:09.471642Z",
     "shell.execute_reply": "2024-10-28T02:19:09.470552Z"
    },
    "papermill": {
     "duration": 0.097792,
     "end_time": "2024-10-28T02:19:09.474288",
     "exception": false,
     "start_time": "2024-10-28T02:19:09.376496",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "list_rounding = list(train[CFG.target_col].unique(maintain_order = True))\n",
    "list_rounding.sort()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dcc442bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:09.520260Z",
     "iopub.status.busy": "2024-10-28T02:19:09.519785Z",
     "iopub.status.idle": "2024-10-28T02:19:14.548922Z",
     "shell.execute_reply": "2024-10-28T02:19:14.547605Z"
    },
    "papermill": {
     "duration": 5.055336,
     "end_time": "2024-10-28T02:19:14.551869",
     "exception": false,
     "start_time": "2024-10-28T02:19:09.496533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = copy.deepcopy(train.to_pandas())\n",
    "g = df.groupby([CFG.fold_col])[CFG.target_col].std()\n",
    "l_std_target_0 = list(g[g==0].index)\n",
    "g = df[df[CFG.fold_col].isin(l_std_target_0)].groupby([CFG.fold_col])[CFG.target_col].mean()\n",
    "dic_std_target_0 = g.to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74db21eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:14.599758Z",
     "iopub.status.busy": "2024-10-28T02:19:14.598699Z",
     "iopub.status.idle": "2024-10-28T02:19:14.608025Z",
     "shell.execute_reply": "2024-10-28T02:19:14.606663Z"
    },
    "papermill": {
     "duration": 0.037028,
     "end_time": "2024-10-28T02:19:14.611004",
     "exception": false,
     "start_time": "2024-10-28T02:19:14.573976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(233234, 814)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train = train.filter(~pl.col(CFG.fold_col).is_in(l_std_target_0))\n",
    "len_train = train.shape[0]\n",
    "train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88113c21",
   "metadata": {
    "papermill": {
     "duration": 0.021852,
     "end_time": "2024-10-28T02:19:14.656989",
     "exception": false,
     "start_time": "2024-10-28T02:19:14.635137",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6ff649ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:14.704375Z",
     "iopub.status.busy": "2024-10-28T02:19:14.703048Z",
     "iopub.status.idle": "2024-10-28T02:19:14.709789Z",
     "shell.execute_reply": "2024-10-28T02:19:14.708473Z"
    },
    "papermill": {
     "duration": 0.032878,
     "end_time": "2024-10-28T02:19:14.712397",
     "exception": false,
     "start_time": "2024-10-28T02:19:14.679519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # 4 cases have != English \n",
    "# dft = train.to_pandas()\n",
    "# g = dft.groupby('LudRules')['EnglishRules'].unique()\n",
    "# f = dft.groupby('LudRules')['EnglishRules'].nunique() \n",
    "# f = f[f == 2]\n",
    "\n",
    "# dic_LudRules_English_non_unique_rules = {}\n",
    "# for idx in range(len(f.index)) :\n",
    "#     EnglishRules = ''\n",
    "#     for idx_rules in range(2):\n",
    "#         rules = g[g.index == f.index[idx]].values[0][idx_rules]\n",
    "#         if len(rules) > len(EnglishRules) :\n",
    "#             EnglishRules = rules\n",
    "#     dic_LudRules_English_non_unique_rules[g[g.index == f.index[idx]].index[0]] = EnglishRules\n",
    "    \n",
    "# del dft, f, g\n",
    "# # dft[dft['LudRules'] == f.index[0]]['EnglishRules'].value_counts()\n",
    "# train = train.with_columns(\n",
    "#         pl.col('LudRules').replace(dic_LudRules_English_non_unique_rules).alias('EnglishRules')\n",
    "# )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d5ea26d",
   "metadata": {
    "papermill": {
     "duration": 0.022793,
     "end_time": "2024-10-28T02:19:14.757021",
     "exception": false,
     "start_time": "2024-10-28T02:19:14.734228",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# FIT : RULES DATA\n",
    "### 'game', 'players', 'equipment', 'rules'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "391b538f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:14.811739Z",
     "iopub.status.busy": "2024-10-28T02:19:14.811276Z",
     "iopub.status.idle": "2024-10-28T02:19:16.894574Z",
     "shell.execute_reply": "2024-10-28T02:19:16.892708Z"
    },
    "papermill": {
     "duration": 2.109746,
     "end_time": "2024-10-28T02:19:16.897686",
     "exception": false,
     "start_time": "2024-10-28T02:19:14.787940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1373/1373 [00:01<00:00, 1040.95it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1373, 5)\n",
      "['LudRules', 'game', 'players', 'equipment', 'rules']\n"
     ]
    }
   ],
   "source": [
    "def symbol_match(rule):\n",
    "    stack = []\n",
    "    data = []\n",
    "    for i in range(len(rule)):\n",
    "        if rule[i] in ['(', '{']:\n",
    "            stack.append(rule[i])\n",
    "        elif rule[i] in [')', '}']:\n",
    "            stack = stack[:-1]\n",
    "        elif (rule[i] == '\"') and (len(stack) > 0) and (stack[-1] == '\"'):\n",
    "            stack = stack[:-1]\n",
    "        elif rule[i] == '\"':\n",
    "            stack.append('\"')\n",
    "        data.append(rule[i])\n",
    "        if len(stack) == 0:\n",
    "            return ''.join(data).strip(), rule[i + 1:].strip()\n",
    "    return '', ''\n",
    "\n",
    "def get_ruledata(rule, patern = '(game '):\n",
    "    rule = rule[len(patern):-1].strip()\n",
    "    datas = []\n",
    "    while len(rule):\n",
    "        data, rule = symbol_match(rule)\n",
    "        datas.append(data)\n",
    "    return datas\n",
    "\n",
    "def process_rules(rules, chunk_size=100):\n",
    "    with multiprocessing.Pool(multiprocessing.cpu_count()) as pool:\n",
    "        # tqdm for progress bar, use imap_unordered for faster return of results\n",
    "        result = list(tqdm.tqdm(pool.imap(get_ruledata, rules, chunksize=chunk_size), total=len(rules)))\n",
    "    return result\n",
    "\n",
    "LudRules_unique = train['LudRules'].unique(maintain_order = True)\n",
    "df_rules = process_rules(LudRules_unique)\n",
    "df_rules = pl.DataFrame(df_rules, orient='row', schema = ['game', 'players', 'equipment', 'rules']).insert_column(0, LudRules_unique)\n",
    "\n",
    "df_rules = df_rules.with_columns(\n",
    "    pl.col('equipment').str.tail(-13).str.head(-4),\n",
    "    pl.col('rules').str.tail(-7).str.head(-2)\n",
    ")\n",
    "\n",
    "print(df_rules.shape)\n",
    "print(df_rules.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49e9f4a3",
   "metadata": {
    "papermill": {
     "duration": 0.029701,
     "end_time": "2024-10-28T02:19:16.950230",
     "exception": false,
     "start_time": "2024-10-28T02:19:16.920529",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### start, phase, end, meta, play"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b65ef5a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:17.005386Z",
     "iopub.status.busy": "2024-10-28T02:19:17.004771Z",
     "iopub.status.idle": "2024-10-28T02:19:18.478422Z",
     "shell.execute_reply": "2024-10-28T02:19:18.476346Z"
    },
    "papermill": {
     "duration": 1.502418,
     "end_time": "2024-10-28T02:19:18.481411",
     "exception": false,
     "start_time": "2024-10-28T02:19:16.978993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1373, 10)\n",
      "['rules', 'play', 'end', 'start', 'phase', 'meta']\n"
     ]
    }
   ],
   "source": [
    "def extract_rule(rule):\n",
    "    dic_data = {}\n",
    "    dic_data['rules'] = rule\n",
    "    data = \"\"\n",
    "    count = 0\n",
    "    for i in range(len(rule)):\n",
    "        data+=rule[i]            \n",
    "        if rule[i] in ['(', '{']:\n",
    "            count+=1\n",
    "        elif rule[i] in [')', '}']:\n",
    "            count-=1\n",
    "        if count == 0 :\n",
    "            data = data[1:-1].strip()\n",
    "            if len(data) > 0 :\n",
    "                if (data[0] == '('):\n",
    "                    key = 'phase'\n",
    "                    value = data\n",
    "                else:\n",
    "                    split = re.split('(.*?)[({]', data.strip(), maxsplit = 1)\n",
    "                    key = split[1].strip()\n",
    "                    if key == 'rules' : print('error')\n",
    "                    value = split[2].strip()[:-2]\n",
    "                dic_data[key] = value\n",
    "                data = \"\"\n",
    "    return dic_data\n",
    "\n",
    "\n",
    "rules_unique = df_rules['rules'].unique(maintain_order = True)\n",
    "l_rules = []\n",
    "for rule in rules_unique:   \n",
    "    l_rules.append(extract_rule(rule))\n",
    "\n",
    "df_rules = df_rules.join(pl.DataFrame(pd.DataFrame(l_rules)), on='rules', how='left')\n",
    "\n",
    "print(df_rules.shape)\n",
    "print(pl.DataFrame(pd.DataFrame(l_rules)).columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b763c563",
   "metadata": {
    "papermill": {
     "duration": 0.023193,
     "end_time": "2024-10-28T02:19:18.529146",
     "exception": false,
     "start_time": "2024-10-28T02:19:18.505953",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Phases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fd8f2439",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:18.578516Z",
     "iopub.status.busy": "2024-10-28T02:19:18.578040Z",
     "iopub.status.idle": "2024-10-28T02:19:18.692500Z",
     "shell.execute_reply": "2024-10-28T02:19:18.690902Z"
    },
    "papermill": {
     "duration": 0.142229,
     "end_time": "2024-10-28T02:19:18.695350",
     "exception": false,
     "start_time": "2024-10-28T02:19:18.553121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1373, 141)\n",
      "['phase', 'GetMoves', 'Movement', 'nombres_phase', 'Placement', 'Sowing', 'BetweenRounds', 'Opening', 'Main', 'Playing', 'PlacementP1', 'PlacementP2', 'FirstPhase', 'SecondPhase', 'PlacementLosingPlayer', 'start', 'play', 'SelectingHole', 'Placing', 'Moving', 'FirstMove', 'Play', 'SowingCW', 'OuterPhase', 'MainPhase', 'InitContagion', 'ContagionGrowth', 'Containment', 'Init', 'Cross', 'Continue', 'Rightmost', 'HomePhase', 'PlacementCenter', 'StartingMove', 'MovementP1', 'MovementP2', 'UnStacking', 'BearingOff', 'BullPlacement', 'MarkerPlacementAroundBull', 'EndGame', 'Game', 'FirstPlacement', 'Pie', 'Move', 'Throw Bread', 'Move Bread', 'Setup', 'Opening1', 'Opening2', 'CentrePlacing', 'Round', 'BetweenRound', 'MainP1', 'MainP2', 'HuntingP2', 'HuntingP1', 'MultiJump', 'InitGuerrilla', 'GuerrillaMove', 'CoinMove', 'OpeningP1', 'OpeningP2', 'SecondMove', 'ThirdMove', 'Replay', 'Opening3', 'InitialSowing', 'General', 'Capture', 'DecisionForNextRound', 'FirstTigerMovement', 'Opening4', 'Opening5', 'Opening6', 'Opening7', 'CounterPlacement', 'DuxPlacement', 'Agreement', 'Rearrangement', 'SowingRestricted', 'Misoro', 'FirstTurn', 'Throwing', 'Stacking', 'Swapping', 'Choose', 'InitPhase', 'MarkedPlacement', 'Place', 'Rotate', 'Remove', 'Swap', 'Select', 'InitialPhase', 'MiddlePhase', 'FinalPhase', 'FoxPhase', 'HenPhase', 'PlacementTiger', 'MoveHuman', 'PlacementHuman', 'PlacementFirstTiger', 'RemoveHuman', 'PlacementSecondTiger', 'PlacementAdjacent', 'PlacePhase', 'MovePhase', 'OpeningCounselor', 'OpeningSoldier', 'PlayingPips', 'Passive', 'Aggressive', 'PlaceKing', 'PlaceFirstElephant', 'PlaceOtherPieces', 'InitGame', 'OpeningPair', 'SecondTurn', 'TwoFirstTurn', 'Layout', 'RemoveCentre', 'Battle', 'Fly', 'Connection', 'CapturingFirstPhase', 'FanoronaPhase', 'Movement2', 'Produce2', 'Movement1', 'Produce1']\n"
     ]
    }
   ],
   "source": [
    "phases_unique = df_rules['phase'].unique(maintain_order = True).drop_nulls()\n",
    "\n",
    "dic_check = {}\n",
    "l_phases = []\n",
    "for phase in phases_unique :\n",
    "    dic_data = {}\n",
    "    dic_data['phase'] = phase\n",
    "    splits = re.split('\\(phase \"', phase.strip())\n",
    "    for split in splits[1: ]:\n",
    "        key, value = re.split('\"', split.strip(), maxsplit = 1)\n",
    "        dic_data[key.strip()]= value[:-1].strip()\n",
    "    dic_data['nombres_phase'] = len(dic_data)\n",
    "    l_phases.append(dic_data)\n",
    "    \n",
    "    dic_check[phase] = len(l_phases)\n",
    "\n",
    "df_rules = df_rules.join(pl.DataFrame(pd.DataFrame(l_phases)), on = 'phase', how = 'left')\n",
    "\n",
    "print(df_rules.shape)\n",
    "print(pl.DataFrame(pd.DataFrame(l_phases)).columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "451e3272",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:18.743637Z",
     "iopub.status.busy": "2024-10-28T02:19:18.743173Z",
     "iopub.status.idle": "2024-10-28T02:19:18.788546Z",
     "shell.execute_reply": "2024-10-28T02:19:18.787307Z"
    },
    "papermill": {
     "duration": 0.072517,
     "end_time": "2024-10-28T02:19:18.791132",
     "exception": false,
     "start_time": "2024-10-28T02:19:18.718615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1373, 144)\n",
      "['period', 'region', 'category', 'derived', 'game_derived']\n"
     ]
    }
   ],
   "source": [
    "df_luidi = pl.read_csv('/kaggle/input/um-mcts-web-scrap-ludii-portal/ludi_games.csv')\n",
    "\n",
    "df_rules = df_rules.with_columns(\n",
    "    pl.col('game').str.replace('\\(', '').str.replace('\\)', '').str.replace_all(\"\\\"\",\"\").alias('game_derived')\n",
    ")\n",
    "\n",
    "df_luidi = df_luidi.with_columns(\n",
    "    pl.concat_str(\n",
    "        [ pl.col(\"game\"), pl.col(\"derived\") ], separator=\" \",  ignore_nulls=True\n",
    "    ).alias(\"game_derived\"),\n",
    ").drop('game')\n",
    "\n",
    "df_luidi = df_luidi.unique (subset = 'game_derived')\n",
    "\n",
    "df_rules = df_rules.join(df_luidi, on = 'game_derived', how = 'left').drop(['game_derived', 'derived'])\n",
    "\n",
    "print(df_rules.shape)\n",
    "print(df_luidi.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ec056544",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:18.840222Z",
     "iopub.status.busy": "2024-10-28T02:19:18.839732Z",
     "iopub.status.idle": "2024-10-28T02:19:18.885394Z",
     "shell.execute_reply": "2024-10-28T02:19:18.884013Z"
    },
    "papermill": {
     "duration": 0.074179,
     "end_time": "2024-10-28T02:19:18.888523",
     "exception": false,
     "start_time": "2024-10-28T02:19:18.814344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1373, 149)\n",
      "['Rules_LudRules', 'Rules_game', 'Rules_players', 'Rules_equipment', 'Rules_rules', 'Rules_play', 'Rules_end', 'Rules_start', 'Rules_phase', 'Rules_meta', 'Rules_GetMoves', 'Rules_Movement', 'Rules_nombres_phase', 'Rules_Placement', 'Rules_Sowing', 'Rules_BetweenRounds', 'Rules_Opening', 'Rules_Main', 'Rules_Playing', 'Rules_PlacementP1', 'Rules_PlacementP2', 'Rules_FirstPhase', 'Rules_SecondPhase', 'Rules_PlacementLosingPlayer', 'Rules_start_right', 'Rules_play_right', 'Rules_SelectingHole', 'Rules_Placing', 'Rules_Moving', 'Rules_FirstMove', 'Rules_Play', 'Rules_SowingCW', 'Rules_OuterPhase', 'Rules_MainPhase', 'Rules_InitContagion', 'Rules_ContagionGrowth', 'Rules_Containment', 'Rules_Init', 'Rules_Cross', 'Rules_Continue', 'Rules_Rightmost', 'Rules_HomePhase', 'Rules_PlacementCenter', 'Rules_StartingMove', 'Rules_MovementP1', 'Rules_MovementP2', 'Rules_UnStacking', 'Rules_BearingOff', 'Rules_BullPlacement', 'Rules_MarkerPlacementAroundBull', 'Rules_EndGame', 'Rules_Game', 'Rules_FirstPlacement', 'Rules_Pie', 'Rules_Move', 'Rules_Throw Bread', 'Rules_Move Bread', 'Rules_Setup', 'Rules_Opening1', 'Rules_Opening2', 'Rules_CentrePlacing', 'Rules_Round', 'Rules_BetweenRound', 'Rules_MainP1', 'Rules_MainP2', 'Rules_HuntingP2', 'Rules_HuntingP1', 'Rules_MultiJump', 'Rules_InitGuerrilla', 'Rules_GuerrillaMove', 'Rules_CoinMove', 'Rules_OpeningP1', 'Rules_OpeningP2', 'Rules_SecondMove', 'Rules_ThirdMove', 'Rules_Replay', 'Rules_Opening3', 'Rules_InitialSowing', 'Rules_General', 'Rules_Capture', 'Rules_DecisionForNextRound', 'Rules_FirstTigerMovement', 'Rules_Opening4', 'Rules_Opening5', 'Rules_Opening6', 'Rules_Opening7', 'Rules_CounterPlacement', 'Rules_DuxPlacement', 'Rules_Agreement', 'Rules_Rearrangement', 'Rules_SowingRestricted', 'Rules_Misoro', 'Rules_FirstTurn', 'Rules_Throwing', 'Rules_Stacking', 'Rules_Swapping', 'Rules_Choose', 'Rules_InitPhase', 'Rules_MarkedPlacement', 'Rules_Place', 'Rules_Rotate', 'Rules_Remove', 'Rules_Swap', 'Rules_Select', 'Rules_InitialPhase', 'Rules_MiddlePhase', 'Rules_FinalPhase', 'Rules_FoxPhase', 'Rules_HenPhase', 'Rules_PlacementTiger', 'Rules_MoveHuman', 'Rules_PlacementHuman', 'Rules_PlacementFirstTiger', 'Rules_RemoveHuman', 'Rules_PlacementSecondTiger', 'Rules_PlacementAdjacent', 'Rules_PlacePhase', 'Rules_MovePhase', 'Rules_OpeningCounselor', 'Rules_OpeningSoldier', 'Rules_PlayingPips', 'Rules_Passive', 'Rules_Aggressive', 'Rules_PlaceKing', 'Rules_PlaceFirstElephant', 'Rules_PlaceOtherPieces', 'Rules_InitGame', 'Rules_OpeningPair', 'Rules_SecondTurn', 'Rules_TwoFirstTurn', 'Rules_Layout', 'Rules_RemoveCentre', 'Rules_Battle', 'Rules_Fly', 'Rules_Connection', 'Rules_CapturingFirstPhase', 'Rules_FanoronaPhase', 'Rules_Movement2', 'Rules_Produce2', 'Rules_Movement1', 'Rules_Produce1', 'Rules_period', 'Rules_region', 'Rules_category', 'Rules_players_len', 'Rules_main_game', 'Rules_size_board', 'Rules_category1', 'Rules_category2']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (1, 149)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Rules_LudRules</th><th>Rules_game</th><th>Rules_players</th><th>Rules_equipment</th><th>Rules_rules</th><th>Rules_play</th><th>Rules_end</th><th>Rules_start</th><th>Rules_phase</th><th>Rules_meta</th><th>Rules_GetMoves</th><th>Rules_Movement</th><th>Rules_nombres_phase</th><th>Rules_Placement</th><th>Rules_Sowing</th><th>Rules_BetweenRounds</th><th>Rules_Opening</th><th>Rules_Main</th><th>Rules_Playing</th><th>Rules_PlacementP1</th><th>Rules_PlacementP2</th><th>Rules_FirstPhase</th><th>Rules_SecondPhase</th><th>Rules_PlacementLosingPlayer</th><th>Rules_start_right</th><th>Rules_play_right</th><th>Rules_SelectingHole</th><th>Rules_Placing</th><th>Rules_Moving</th><th>Rules_FirstMove</th><th>Rules_Play</th><th>Rules_SowingCW</th><th>Rules_OuterPhase</th><th>Rules_MainPhase</th><th>Rules_InitContagion</th><th>Rules_ContagionGrowth</th><th>Rules_Containment</th><th>&hellip;</th><th>Rules_PlacementFirstTiger</th><th>Rules_RemoveHuman</th><th>Rules_PlacementSecondTiger</th><th>Rules_PlacementAdjacent</th><th>Rules_PlacePhase</th><th>Rules_MovePhase</th><th>Rules_OpeningCounselor</th><th>Rules_OpeningSoldier</th><th>Rules_PlayingPips</th><th>Rules_Passive</th><th>Rules_Aggressive</th><th>Rules_PlaceKing</th><th>Rules_PlaceFirstElephant</th><th>Rules_PlaceOtherPieces</th><th>Rules_InitGame</th><th>Rules_OpeningPair</th><th>Rules_SecondTurn</th><th>Rules_TwoFirstTurn</th><th>Rules_Layout</th><th>Rules_RemoveCentre</th><th>Rules_Battle</th><th>Rules_Fly</th><th>Rules_Connection</th><th>Rules_CapturingFirstPhase</th><th>Rules_FanoronaPhase</th><th>Rules_Movement2</th><th>Rules_Produce2</th><th>Rules_Movement1</th><th>Rules_Produce1</th><th>Rules_period</th><th>Rules_region</th><th>Rules_category</th><th>Rules_players_len</th><th>Rules_main_game</th><th>Rules_size_board</th><th>Rules_category1</th><th>Rules_category2</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>&hellip;</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>u32</td><td>str</td><td>i8</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;(game &quot;00&#x27;Y&#x27;&quot; (players 2) (equ…</td><td>&quot;00&#x27;Y&#x27;&quot;</td><td>&quot;(players 2)&quot;</td><td>&quot;(board (tri Limping 4) use:Ver…</td><td>&quot;(play (priority { (if (is Prev…</td><td>&quot;priority { (if (is Prev Mover)…</td><td>&quot;(if (is Triggered &quot;Win&quot; Next) …</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>null</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&hellip;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;nan&quot;</td><td>&quot;Modern&quot;</td><td>&quot;nan&quot;</td><td>&quot;Board Space Connection&quot;</td><td>11</td><td>&quot;00&#x27;Y&#x27;&quot;</td><td>4</td><td>&quot;Board&quot;</td><td>&quot;Space&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (1, 149)\n",
       "┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐\n",
       "│ Rules_Lud ┆ Rules_gam ┆ Rules_pla ┆ Rules_equ ┆ … ┆ Rules_mai ┆ Rules_siz ┆ Rules_cat ┆ Rules_ca │\n",
       "│ Rules     ┆ e         ┆ yers      ┆ ipment    ┆   ┆ n_game    ┆ e_board   ┆ egory1    ┆ tegory2  │\n",
       "│ ---       ┆ ---       ┆ ---       ┆ ---       ┆   ┆ ---       ┆ ---       ┆ ---       ┆ ---      │\n",
       "│ str       ┆ str       ┆ str       ┆ str       ┆   ┆ str       ┆ i8        ┆ str       ┆ str      │\n",
       "╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡\n",
       "│ (game     ┆ 00'Y'     ┆ (players  ┆ (board    ┆ … ┆ 00'Y'     ┆ 4         ┆ Board     ┆ Space    │\n",
       "│ \"00'Y'\"   ┆           ┆ 2)        ┆ (tri      ┆   ┆           ┆           ┆           ┆          │\n",
       "│ (players  ┆           ┆           ┆ Limping   ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 2) (equ…  ┆           ┆           ┆ 4)        ┆   ┆           ┆           ┆           ┆          │\n",
       "│           ┆           ┆           ┆ use:Ver…  ┆   ┆           ┆           ┆           ┆          │\n",
       "└───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_rules = df_rules.with_columns(\n",
    "    pl.col(\"players\").str.len_chars().alias('players_len'),\n",
    "    pl.col('game').str.replace(r'\\(.*', \"\").str.strip_chars().alias(\"main_game\"),\n",
    "    pl.col(\"LudRules\").str.extract('\\(board \\(.*?\\)', 0).str.replace(r\"\\(board \\(\", \"\").str.replace(r\"\\)\", \"\").str.tail(1).str.strip_chars().alias(\"size_board\").cast(pl.Int8, strict=False),\n",
    ")\n",
    "df_rules = df_rules.with_columns(df_rules['game'].str.replace_all(\"\\\"\", \"\"))\n",
    "df_rules = df_rules.with_columns(df_rules['main_game'].str.replace_all(\"\\\"\", \"\"))\n",
    "df_rules = df_rules.with_columns(pl.col('category').str.split_exact(\" \", 1).struct.rename_fields(['category1','category2']).alias('category_splited')).unnest('category_splited')\n",
    "\n",
    "df_rules.columns = [\"Rules_\" + col for col in df_rules.columns] ## to avoid _right in join, and always keep same names in columns\n",
    "\n",
    "df_rules = df_rules.fill_null('nan')\n",
    "\n",
    "print(df_rules.shape)\n",
    "print(df_rules.columns)\n",
    "df_rules.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7026e07e",
   "metadata": {
    "papermill": {
     "duration": 0.023641,
     "end_time": "2024-10-28T02:19:18.937807",
     "exception": false,
     "start_time": "2024-10-28T02:19:18.914166",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Features / Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6b960111",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:18.987904Z",
     "iopub.status.busy": "2024-10-28T02:19:18.987348Z",
     "iopub.status.idle": "2024-10-28T02:19:39.633048Z",
     "shell.execute_reply": "2024-10-28T02:19:39.631670Z"
    },
    "papermill": {
     "duration": 20.674205,
     "end_time": "2024-10-28T02:19:39.636000",
     "exception": false,
     "start_time": "2024-10-28T02:19:18.961795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Error loading stopwords: <urlopen error [Errno -3]\n",
      "[nltk_data]     Temporary failure in name resolution>\n"
     ]
    }
   ],
   "source": [
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import SnowballStemmer\n",
    "import nltk\n",
    "\n",
    "nltk.download('stopwords')\n",
    "stemmer = SnowballStemmer(\"english\")\n",
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "\n",
    "def clean_serie(serie):\n",
    "    serie = serie.fill_null('nan')\n",
    "    serie = serie.str.to_lowercase()\n",
    "    #ps='!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n",
    "    serie = serie.str.replace_all(r\"[^a-zA-Z0-9]\", \" \").str.strip_chars()\n",
    "    return serie\n",
    "\n",
    "def preprocess_text(text):\n",
    "    text = re.sub(r'\\W+', ' ', text)\n",
    "    text = re.sub(r'\\d+', '', text)\n",
    "    text = text.lower()\n",
    "    text = ' '.join([stemmer.stem(word) for word in text.split() if word not in stop_words])\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "013a4907",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:39.687162Z",
     "iopub.status.busy": "2024-10-28T02:19:39.686512Z",
     "iopub.status.idle": "2024-10-28T02:19:39.751793Z",
     "shell.execute_reply": "2024-10-28T02:19:39.750597Z"
    },
    "papermill": {
     "duration": 0.094365,
     "end_time": "2024-10-28T02:19:39.754647",
     "exception": false,
     "start_time": "2024-10-28T02:19:39.660282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FE:\n",
    "    def __init__(self):\n",
    "        self.dic_tfid_vectorizer = {}\n",
    "        self.dic_tfid_selected_feature = {}\n",
    "        self.dic_kmeans = {}\n",
    "\n",
    "    def get_new_columns(self, df) :\n",
    "        df = df.join(df_rules, left_on = 'LudRules', right_on = 'Rules_LudRules', how = 'left')\n",
    "\n",
    "        df = pl.DataFrame(df).with_columns( \n",
    "                                        pl.col(\"agent1\").str.split_exact(\"-\", n=5).struct.rename_fields([\"MCTS1\", \"SELECTION1\", \"EXPLORATION_CONST1\", \"PLAYOUT1\", \"SCORE_BOUNDS1\" ]).alias(\"split1\"),\n",
    "                                        pl.col(\"agent2\").str.split_exact(\"-\", n=5).struct.rename_fields([\"MCTS2\", \"SELECTION2\", \"EXPLORATION_CONST2\", \"PLAYOUT2\", \"SCORE_BOUNDS2\" ]).alias(\"split2\")\n",
    "                                        ).unnest(\"split1\").unnest(\"split2\").drop(['MCTS1','MCTS2'])\n",
    "\n",
    "        df = pl.DataFrame(df).with_columns( \n",
    "            pl.col(\"SCORE_BOUNDS1\").replace_strict({\"false\": 0, \"true\":1}).cast(pl.Int8),\n",
    "            pl.col(\"SCORE_BOUNDS2\").replace_strict({\"false\": 0, \"true\":1}).cast(pl.Int8),\n",
    "            pl.col('EXPLORATION_CONST1').cast(pl.Float64),\n",
    "            pl.col('EXPLORATION_CONST2').cast(pl.Float64),\n",
    "        )\n",
    "        return df\n",
    "            \n",
    "    def encoders_fit(self, df) :\n",
    "        ### TFID ENCODER FIT\n",
    "        for col in CFG.l_tfid :\n",
    "            serie = df[col].unique(maintain_order = True)\n",
    "            #serie_cleaned = clean_serie(serie)\n",
    "            serie_cleaned = serie.map_elements(preprocess_text)\n",
    "            self.dic_tfid_vectorizer[col] = TfidfVectorizer(max_features= CFG.tfid_max_col[col]).fit(serie_cleaned)\n",
    "            df_fitted = pl.DataFrame(self.dic_tfid_vectorizer[col].transform(serie_cleaned).toarray()).rename(lambda column_name: \"tfid_\" + col + column_name[6:] )\n",
    "            self.dic_tfid_selected_feature[col] = df_fitted.columns\n",
    "\n",
    "            if col in CFG.l_select_kbest :\n",
    "                df_fitted = df_fitted.with_columns(serie)\n",
    "                df_fitted = df.join(df_fitted, on = col, how = 'left')[self.dic_tfid_selected_feature[col] + [CFG.target_col]]\n",
    "                selector = SelectKBest(f_regression, k=int(len(self.dic_tfid_selected_feature[col])/4))\n",
    "                selector.fit(df_fitted[self.dic_tfid_selected_feature[col]], df[CFG.target_col])\n",
    "                selected_feature_indices = selector.get_support(indices=True)\n",
    "                self.dic_tfid_selected_feature[col] = [df_fitted[self.dic_tfid_selected_feature[col]].columns[i] for i in selected_feature_indices]\n",
    "            \n",
    "            if col in CFG.l_kmeans :\n",
    "                self.dic_kmeans[col] = KMeans(n_clusters=CFG.num_clusters[col], random_state=42)\n",
    "                self.dic_kmeans[col] = self.dic_kmeans[col].fit(df_fitted[self.dic_tfid_selected_feature[col]])\n",
    "            \n",
    "            print(f\"{col} : {len(self.dic_tfid_selected_feature[col])} : {list(self.dic_tfid_selected_feature[col])[0]} ... {list(self.dic_tfid_selected_feature[col])[-1]}\")\n",
    "            \n",
    "        ### LABEL ENCODER FIT        \n",
    "        for col in CFG.categoricals :\n",
    "            if col not in cols: cols[col] = dotdict(dict)\n",
    "            serie = df[col].fill_null('nan')\n",
    "            l_uniques = list(serie.unique(maintain_order = True))\n",
    "            \n",
    "            vc = serie.value_counts(normalize = False)\n",
    "            smaller_cat_size =  vc['count'].min()\n",
    "            filtre = max(CFG.encode_rare_category_together[col], smaller_cat_size)\n",
    "            vc = vc.filter(vc['count'] <= filtre)\n",
    "            cols[col].rare = list(vc[col])\n",
    "\n",
    "            # [print(f'{k} : {vc[v]*100:0.2f} : {vc[v] * 233_234:0.0f}') for k, v in cols[col].encode.items() if v in cols[col].rare]\n",
    "            cols[col].encode = {}\n",
    "            for j, k in enumerate(l_uniques, start=1) :\n",
    "                if k in cols[col].rare :\n",
    "                    cols[col].encode[k] = 0\n",
    "                else :\n",
    "                    cols[col].encode[k] = j\n",
    "\n",
    "            l_unique_values_encoded = set(list(cols[col].encode.values()))\n",
    "            cols[col].cat_size = int(len(l_unique_values_encoded) + 1) \n",
    "            cols[col].cat_emb = int(np.ceil( np.sqrt(cols[col].cat_size + 1))) \n",
    "            print(f'{col}: nunique={len(l_uniques)}, rare_ct={len(cols[col].rare)}, number of nan : {vc[\"count\"].sum()}, '+\\\n",
    "                  f'smaller_cat_size : {smaller_cat_size}, filtre : {filtre}, unique col after rare : {len(l_unique_values_encoded)}')\n",
    "        \n",
    "        ### ONE HOT ENCODER FIT            \n",
    "        for col in CFG.cols_onehot :\n",
    "            if col not in cols: cols[col] = dotdict(dict) \n",
    "            cols[col].one_hot_encoder = list(df[col].unique(maintain_order = True))\n",
    "    \n",
    "    def encoders_transform(self, df):                 \n",
    "        ### TFID ENCODER TRANSFORM\n",
    "        for col in CFG.l_tfid :\n",
    "            serie = df[col].unique(maintain_order = True)\n",
    "            #serie_cleaned = clean_serie(serie)\n",
    "            serie_cleaned = serie.map_elements(preprocess_text)\n",
    "            df_fitted = pl.DataFrame(self.dic_tfid_vectorizer[col].transform(serie_cleaned).toarray()).rename(lambda column_name: \"tfid_\" + col + column_name[6:])\n",
    "            df_fitted = pl.concat([pl.DataFrame(serie), df_fitted], how = 'horizontal')\n",
    "            df = df.join(df_fitted[[col] + self.dic_tfid_selected_feature[col]], on=col, how='left')      \n",
    "            \n",
    "            if col in CFG.l_kmeans :\n",
    "                labels = self.dic_kmeans[col].predict(df_fitted[self.dic_tfid_selected_feature[col]])\n",
    "                df_fitted = df_fitted.with_columns(pl.Series(name=f'labels_kmeans_{col}', values=labels))\n",
    "                df = df.join(df_fitted[[col] + [f'labels_kmeans_{col}']], on=col, how='left')      \n",
    "            \n",
    "        ### LABEL ENCODER TRANSFORM\n",
    "        for col in CFG.categoricals :\n",
    "            df = df.with_columns(pl.when(pl.col(col).is_in(list(cols[col].encode.keys())))\n",
    "                    .then(pl.col(col)) )\n",
    "            df = df.with_columns(pl.col(col).replace_strict(cols[col].encode).fill_null(0))\n",
    "\n",
    "        ### ONE HOT ENCODER TRANSFORM\n",
    "        for i, col in enumerate(CFG.cols_onehot) :\n",
    "            for unique in cols[col].one_hot_encoder:\n",
    "                df = df.with_columns((df[col] == unique).cast(pl.Int8).alias(f'ofe_{col}_{i}'))\n",
    "        return df\n",
    "    \n",
    "    def feature_engineering(self, df) :            \n",
    "        ## FEATURES\n",
    "        df = pl.DataFrame(df).with_columns( \n",
    "            (pl.col('PlayoutsPerSecond') / (pl.col('MovesPerSecond') + 1e-15) ).alias('PlayoutsPerMoves'),\n",
    "            #(pl.col('MovesPerSecond') / (pl.col('PlayoutsPerSecond') + 1e-15) ).alias('EfficiencyPerPlayout'),\n",
    "            (pl.col('DurationActions') / (pl.col('DurationTurnsStdDev') + 1e-15) ).alias('TurnsDurationEfficiency'),\n",
    "            (pl.col('AdvantageP1') / (pl.col('Balance') + 1e-15) ).alias('AdvantageBalanceRatio'),\n",
    "            (pl.col('DurationActions') / (pl.col('MovesPerSecond') + 1e-15) ).alias('ActionTimeEfficiency'),\n",
    "            (pl.col('DurationTurnsStdDev') / (pl.col('DurationActions') + 1e-15) ).alias('StandardizedTurnsEfficiency'),\n",
    "            (pl.col('AdvantageP1') / (pl.col('DurationActions') + 1e-15) ).alias('AdvantageTimeImpact'),\n",
    "            (pl.col('DurationActions') / (pl.col('StateTreeComplexity') + 1e-15) ).alias('DurationToComplexityRatio'),\n",
    "            (pl.col('GameTreeComplexity') / (pl.col('StateTreeComplexity') + 1e-15) ).alias('NormalizedGameTreeComplexity'),\n",
    "            (pl.col('Balance') * pl.col('GameTreeComplexity')).alias('ComplexityBalanceInteraction'),\n",
    "            (pl.col('StateTreeComplexity') + pl.col('GameTreeComplexity')).alias('OverallComplexity'),\n",
    "            (pl.col('GameTreeComplexity') / (pl.col('PlayoutsPerSecond') + 1e-15) ).alias('ComplexityPerPlayout'),\n",
    "            (pl.col('DurationTurnsNotTimeouts') / (pl.col('MovesPerSecond') + 1e-15) ).alias('TurnsNotTimeoutsPerMoves'),\n",
    "            (pl.col('Timeouts') / (pl.col('DurationActions') + 1e-15) ).alias('TimeoutsPerDurationActions'),\n",
    "            (pl.col('OutcomeUniformity') / (pl.col('AdvantageP1') + 1e-15) ).alias('OutcomeUniformityPerAdvantageP1'),\n",
    "            (pl.col('NumRows') * pl.col('NumColumns') ).alias('area'),\n",
    "            (pl.col('NumColumns')==pl.col('NumRows')).cast(pl.Int8).alias('row_equal_col')\n",
    "        )\n",
    "        #for rule in ['EnglishRules', 'LudRules']:\n",
    "            #df[rule+\"_ARI\"]=df[rule].apply(lambda x:self.ARI(x))\n",
    "            #df[rule+\"CLRI\"]=df[rule].apply(lambda x:self.CLRI(x))\n",
    "            #df[rule+\"McAlpine_EFLAW\"]=df[rule].apply(lambda x:self.McAlpine_EFLAW(x))      \n",
    "            \n",
    "        cols = ['agent1', 'agent2',  \"SELECTION1\", \"EXPLORATION_CONST1\", \"PLAYOUT1\", \"SCORE_BOUNDS1\",\n",
    "                \"SELECTION2\", \"EXPLORATION_CONST2\", \"PLAYOUT2\", \"SCORE_BOUNDS2\",\n",
    "               ]\n",
    "        cols2 = []\n",
    "        for col in cols :\n",
    "            group = df.group_by(col).agg(\n",
    "                pl.col(\"AdvantageP1\").std().alias(f'AdvantageP1_{col}_std'),\n",
    "                pl.col(\"AdvantageP1\").mean().alias(f'AdvantageP1_{col}_mean'),\n",
    "                pl.col(\"Balance\").std().alias(f'Balance_{col}_std'),\n",
    "                pl.col(\"Balance\").mean().alias(f'Balance_{col}_mean'),\n",
    "            )\n",
    "            cols2 += [f'AdvantageP1_{col}_std', f'AdvantageP1_{col}_mean', f'Balance_{col}_std', f'Balance_{col}_mean']\n",
    "            df = df.join(group, on = col, how = 'left')   \n",
    "\n",
    "        \n",
    "        ## CROSS FEATURES          \n",
    "        cols =  cols2 +['AdvantageP1', 'Balance']\n",
    "        cols = [col for col in cols if col not in CFG.drop]\n",
    "        #'AdvantageP1_Rules_main_game_mean', 'AdvantageP1_Rules_main_game_std', 'AdvantageP1_Rules_equipment_mean', 'AdvantageP1_Rules_equipment_std',\n",
    "        #'AdvantageP1_Rules_category_mean',  'AdvantageP1_Rules_category_std', 'AdvantageP1_Rules_game_mean',  'AdvantageP1_Rules_game_std' ]\n",
    "        for i in range(len(cols)):\n",
    "            for j in range(i+1,len(cols)):\n",
    "                if (cols[i] in df.columns and cols[j] in df.columns) :\n",
    "                    df = pl.DataFrame(df).with_columns( \n",
    "#                             (pl.col(cols[i]) + pl.col(cols[j]) ).alias(f\"{cols[i]}+{cols[j]}\"),\n",
    "#                             (pl.col(cols[i]) - pl.col(cols[j]) ).alias(f\"{cols[i]}-{cols[j]}\"),\n",
    "#                             (pl.col(cols[i]) * pl.col(cols[j]) ).alias(f\"{cols[i]}*{cols[j]}\"),\n",
    "                            (pl.col(cols[i]) / (pl.col(cols[j]) + 1e-15)).alias(f\"{cols[i]}/{cols[j]}\"),\n",
    "                        )\n",
    "                    \n",
    "#                     CFG.l_permutation_importance += [f\"{cols[i]}/{cols[j]}\"]\n",
    "\n",
    "        ######################### All Negative Permutation Importance :\n",
    "        # cols1 = ['Rules_equipment', \"Rules_game\", 'GameRulesetName']\n",
    "        # cols2 = [\"SELECTION1\", \"EXPLORATION_CONST1\", \"PLAYOUT1\", \"SCORE_BOUNDS1\",\"SELECTION1\", \"EXPLORATION_CONST1\", \"PLAYOUT1\", \"SCORE_BOUNDS1\",]\n",
    "        # for col1 in cols1 :\n",
    "        #     for col2 in cols2 :\n",
    "        #         group = df.group_by(col2).agg(pl.col(col1).count().alias(f'{col1}_count_over_{col2}'))\n",
    "        #         #CFG.l_permutation_importance += [f'{col1}_count_over_{col2}']\n",
    "        #         df = df.join(group, on = col2, how = 'left')   \n",
    "        return df\n",
    "    \n",
    "    def scaler_fit(self, df):\n",
    "        cols.numercials_means = df[cols.numericals].mean().to_dicts()[0]\n",
    "        cols.numercials_std = df[cols.numericals].std().to_dicts()[0]\n",
    "\n",
    "    def scaler_transform(self, df):\n",
    "        for col in cols.numericals:\n",
    "            df = df.with_columns( (pl.col(col) - cols.numercials_means[col]) / cols.numercials_std[col])\n",
    "        return df\n",
    "    \n",
    "    def clean(self, df):\n",
    "        ## DROP\n",
    "        df = df.drop([col for col in cols.drop if col in df.columns])\n",
    "         \n",
    "        ## FILL / CAST\n",
    "        df[cols.categoricals] = df[cols.categoricals].fill_null('nan')\n",
    "        df = df.with_columns([pl.col(col).cast(pl.String).cast(pl.Categorical) for col in CFG.categoricals if col in df.columns]) # \n",
    "        for col in cols.numericals:\n",
    "            if col in df.columns:\n",
    "                if isinstance(df.select(pl.col(col).drop_nulls().first()).item(), int) :\n",
    "                    df = pl.DataFrame(df).with_columns( pl.col(col).fill_null(strategy = 'mean') )\n",
    "                    if df.select(pl.col(col).drop_nulls().max()).item() < 128 :\n",
    "                        df = df.with_columns(pl.col(col).cast(pl.Int8))\n",
    "                    else:\n",
    "                        df = df.with_columns(pl.col(col).cast(pl.Int32))\n",
    "                else :\n",
    "                    df = df.with_columns(pl.col(col).cast(pl.Float64))        \n",
    "        \n",
    "        ##PANDA\n",
    "        df = df.to_pandas()\n",
    "        return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b61f93f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:39.804612Z",
     "iopub.status.busy": "2024-10-28T02:19:39.803435Z",
     "iopub.status.idle": "2024-10-28T02:19:39.810356Z",
     "shell.execute_reply": "2024-10-28T02:19:39.809174Z"
    },
    "papermill": {
     "duration": 0.034584,
     "end_time": "2024-10-28T02:19:39.812768",
     "exception": false,
     "start_time": "2024-10-28T02:19:39.778184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#     #https://www.nhooo.com/note/qa0tpe.html\n",
    "#     def ARI(txt):\n",
    "#         characters=len(txt)\n",
    "#         words=len(re.split(' |\\\\n|\\\\.|\\\\?|\\\\!|\\,',txt))\n",
    "#         sentence=len(re.split('\\\\.|\\\\?|\\\\!',txt))\n",
    "#         ari_score=4.71*(characters/words)+0.5*(words/sentence)-21.43\n",
    "#         return ari_score\n",
    "#     \"\"\"\n",
    "#     http://www.supermagnus.com/mac/Word_Counter/index.html\n",
    "#     McAlpine EFLAW© Test\n",
    "#          (W + SW) / S\n",
    "#     McAlpine EFLAW© Readability\n",
    "#          Scale:\n",
    "#          1-20: Easy\n",
    "#          21-25: Quite Easy\n",
    "#          26-29: Mildly Difficult\n",
    "#          ≥ 30: Very Confusing\n",
    "#          S:total sentences\n",
    "#          W:total words\n",
    "#     \"\"\"\n",
    "#     def McAlpine_EFLAW(txt):\n",
    "#         W=len(re.split(' |\\\\n|\\\\.|\\\\?|\\\\!|\\,',txt))\n",
    "#         S=len(re.split('\\\\.|\\\\?|\\\\!',txt))\n",
    "#         mcalpine_eflaw_score=(W+S*W)/S\n",
    "#         return mcalpine_eflaw_score\n",
    "#     \"\"\"\n",
    "#     https://readable.com/readability/coleman-liau-readability-index/\n",
    "\n",
    "#     =0.0588*L-0.296*S-15.8\n",
    "#     \"\"\"\n",
    "#     def CLRI(txt):\n",
    "#         characters=len(txt)\n",
    "#         words=len(re.split(' |\\\\n|\\\\.|\\\\?|\\\\!|\\,',txt))\n",
    "#         sentence=len(re.split('\\\\.|\\\\?|\\\\!',txt))\n",
    "#         L=100*characters/words\n",
    "#         S=100*sentence/words\n",
    "#         clri_score=0.0588*L-0.296*S-15.8\n",
    "#         return clri_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "091a0498",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:39.863459Z",
     "iopub.status.busy": "2024-10-28T02:19:39.862977Z",
     "iopub.status.idle": "2024-10-28T02:19:40.382541Z",
     "shell.execute_reply": "2024-10-28T02:19:40.381122Z"
    },
    "papermill": {
     "duration": 0.548225,
     "end_time": "2024-10-28T02:19:40.385150",
     "exception": false,
     "start_time": "2024-10-28T02:19:39.836925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape train: (233234, 814)\n",
      "Rules_equipment: nunique=1049, rare_ct=925, number of nan : 153678, smaller_cat_size : 70, filtre : 300, unique col after rare : 125\n",
      "Rules_game: nunique=1030, rare_ct=962, number of nan : 165984, smaller_cat_size : 4, filtre : 300, unique col after rare : 69\n",
      "Rules_category1: nunique=5, rare_ct=1, number of nan : 540, smaller_cat_size : 540, filtre : 540, unique col after rare : 5\n",
      "Rules_category2: nunique=10, rare_ct=1, number of nan : 206, smaller_cat_size : 206, filtre : 300, unique col after rare : 10\n",
      "SELECTION1: nunique=4, rare_ct=1, number of nan : 57924, smaller_cat_size : 57924, filtre : 57924, unique col after rare : 4\n",
      "PLAYOUT1: nunique=3, rare_ct=1, number of nan : 77360, smaller_cat_size : 77360, filtre : 77360, unique col after rare : 3\n",
      "SELECTION2: nunique=4, rare_ct=1, number of nan : 57924, smaller_cat_size : 57924, filtre : 57924, unique col after rare : 4\n",
      "PLAYOUT2: nunique=3, rare_ct=1, number of nan : 77360, smaller_cat_size : 77360, filtre : 77360, unique col after rare : 3\n",
      "Shape train: (233234, 970)\n"
     ]
    }
   ],
   "source": [
    "cols = dotdict(dict)\n",
    "\n",
    "## Data Pipeline\n",
    "print(f'Shape train: {train.shape}')\n",
    "fe = FE()\n",
    "train = fe.get_new_columns(train)\n",
    "\n",
    "fe.encoders_fit(train)\n",
    "print(f'Shape train: {train.shape}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c305ffc",
   "metadata": {
    "papermill": {
     "duration": 0.02443,
     "end_time": "2024-10-28T02:19:40.433521",
     "exception": false,
     "start_time": "2024-10-28T02:19:40.409091",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Folds : Skfold , Gkfold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d25599e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:40.484659Z",
     "iopub.status.busy": "2024-10-28T02:19:40.484186Z",
     "iopub.status.idle": "2024-10-28T02:19:42.547685Z",
     "shell.execute_reply": "2024-10-28T02:19:42.546239Z"
    },
    "papermill": {
     "duration": 2.092657,
     "end_time": "2024-10-28T02:19:42.550548",
     "exception": false,
     "start_time": "2024-10-28T02:19:40.457891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape train: (233234, 970)\n",
      "Shape train: (233234, 970)\n"
     ]
    }
   ],
   "source": [
    "class fold():       \n",
    "    ## Kfold done before concat with df_duplicated    \n",
    "    def prepare(self, df) :\n",
    "        self.group = df[CFG.fold_col] \n",
    "        bins = int(np.floor(1 + np.log2(len(df))))\n",
    "        bins = pd.cut(df[CFG.target_col], bins=bins, labels=False)\n",
    "        \n",
    "        self.folds = {}\n",
    "        if CFG.fold_name == 'skfold' : \n",
    "            kf = StratifiedKFold(CFG.n_splits, random_state=42, shuffle=True)\n",
    "            for fold, (train_index, valid_index) in enumerate(kf.split(df, bins)):\n",
    "                self.folds[fold] = (train_index, valid_index)\n",
    "        \n",
    "        if CFG.fold_name == 'gkfold' : \n",
    "            kf = GroupKFold(CFG.n_splits)\n",
    "            for fold, (train_index, valid_index) in enumerate(kf.split(df, df[CFG.target_col], self.group)):\n",
    "                self.folds[fold] = (train_index, valid_index)\n",
    "        \n",
    "        if CFG.fold_name == 'sgkfold' : \n",
    "            kf = StratifiedGroupKFold(n_splits=CFG.n_splits,random_state=42,shuffle=True)\n",
    "            for fold, (train_index, valid_index) in enumerate(kf.split(df, bins, self.group)):\n",
    "                    self.folds[fold] = (train_index, valid_index)\n",
    "    \n",
    "#         for fold in range(CFG.n_splits) :\n",
    "#             (train_index, valid_index) = self.folds[fold] \n",
    "#             train_index = np.concatenate([train_index , train_index + len(df)])\n",
    "#             valid_index = np.concatenate([valid_index , valid_index + len(df)])\n",
    "#             self.folds[fold] = (train_index, valid_index)\n",
    "        \n",
    "#         if len(CFG.categories_to_nan) > 0:\n",
    "#             df_duplicated = copy.deepcopy(df)\n",
    "#             print(CFG.categories_to_nan)\n",
    "#             for col in CFG.categories_to_nan :\n",
    "#                 for key in cols[col].encode : ## Find the key which will be encoded in 0 / nan\n",
    "#                     if cols[col].encode[key] == 0 :\n",
    "#                         break\n",
    "#                 df_duplicated = df_duplicated.with_columns(pl.lit(key).alias(col))                    \n",
    "#         df = pl.concat([df, df_duplicated])\n",
    "        return df\n",
    "        \n",
    "    def get_index(self, fold) :\n",
    "        return self.folds[fold]\n",
    "    \n",
    "fld = fold()\n",
    "print(f'Shape train: {train.shape}')\n",
    "train = fld.prepare(train)\n",
    "print(f'Shape train: {train.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f0551647",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:42.603574Z",
     "iopub.status.busy": "2024-10-28T02:19:42.603072Z",
     "iopub.status.idle": "2024-10-28T02:19:42.916367Z",
     "shell.execute_reply": "2024-10-28T02:19:42.914987Z"
    },
    "papermill": {
     "duration": 0.343611,
     "end_time": "2024-10-28T02:19:42.918916",
     "exception": false,
     "start_time": "2024-10-28T02:19:42.575305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape train: (233234, 970)\n",
      "Shape train: (233234, 1029)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (1, 1_029)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Id</th><th>GameRulesetName</th><th>agent1</th><th>agent2</th><th>Properties</th><th>Format</th><th>Time</th><th>Discrete</th><th>Realtime</th><th>Turns</th><th>Alternating</th><th>Simultaneous</th><th>Stochastic</th><th>HiddenInformation</th><th>Match</th><th>Asymmetric</th><th>AsymmetricRules</th><th>AsymmetricPlayRules</th><th>AsymmetricEndRules</th><th>AsymmetricForces</th><th>AsymmetricSetup</th><th>AsymmetricPiecesType</th><th>Players</th><th>NumPlayers</th><th>Simulation</th><th>Solitaire</th><th>TwoPlayer</th><th>Multiplayer</th><th>PlayersWithDirections</th><th>Cooperation</th><th>Team</th><th>Coalition</th><th>Puzzle</th><th>DeductionPuzzle</th><th>PlanningPuzzle</th><th>Equipment</th><th>Container</th><th>&hellip;</th><th>Balance_agent2_std</th><th>Balance_agent2_mean</th><th>AdvantageP1_SELECTION1_std</th><th>AdvantageP1_SELECTION1_mean</th><th>Balance_SELECTION1_std</th><th>Balance_SELECTION1_mean</th><th>AdvantageP1_EXPLORATION_CONST1_std</th><th>AdvantageP1_EXPLORATION_CONST1_mean</th><th>Balance_EXPLORATION_CONST1_std</th><th>Balance_EXPLORATION_CONST1_mean</th><th>AdvantageP1_PLAYOUT1_std</th><th>AdvantageP1_PLAYOUT1_mean</th><th>Balance_PLAYOUT1_std</th><th>Balance_PLAYOUT1_mean</th><th>AdvantageP1_SCORE_BOUNDS1_std</th><th>AdvantageP1_SCORE_BOUNDS1_mean</th><th>Balance_SCORE_BOUNDS1_std</th><th>Balance_SCORE_BOUNDS1_mean</th><th>AdvantageP1_SELECTION2_std</th><th>AdvantageP1_SELECTION2_mean</th><th>Balance_SELECTION2_std</th><th>Balance_SELECTION2_mean</th><th>AdvantageP1_EXPLORATION_CONST2_std</th><th>AdvantageP1_EXPLORATION_CONST2_mean</th><th>Balance_EXPLORATION_CONST2_std</th><th>Balance_EXPLORATION_CONST2_mean</th><th>AdvantageP1_PLAYOUT2_std</th><th>AdvantageP1_PLAYOUT2_mean</th><th>Balance_PLAYOUT2_std</th><th>Balance_PLAYOUT2_mean</th><th>AdvantageP1_SCORE_BOUNDS2_std</th><th>AdvantageP1_SCORE_BOUNDS2_mean</th><th>Balance_SCORE_BOUNDS2_std</th><th>Balance_SCORE_BOUNDS2_mean</th><th>AdvantageP1_EXPLORATION_CONST2_std/AdvantageP1</th><th>AdvantageP1_EXPLORATION_CONST2_std/Balance</th><th>AdvantageP1/Balance</th></tr><tr><td>i64</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>&hellip;</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>0</td><td>&quot;00Y&quot;</td><td>&quot;MCTS-ProgressiveHistory-0.1-MA…</td><td>&quot;MCTS-ProgressiveHistory-0.6-Ra…</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>&hellip;</td><td>0.276078</td><td>0.739962</td><td>0.186584</td><td>0.511471</td><td>0.282364</td><td>0.734062</td><td>0.186789</td><td>0.511843</td><td>0.283084</td><td>0.734073</td><td>0.186629</td><td>0.511214</td><td>0.28236</td><td>0.733788</td><td>0.181619</td><td>0.511587</td><td>0.276185</td><td>0.740186</td><td>0.186584</td><td>0.511471</td><td>0.282364</td><td>0.734062</td><td>0.187023</td><td>0.511301</td><td>0.282793</td><td>0.733101</td><td>0.187609</td><td>0.511831</td><td>0.283888</td><td>0.73255</td><td>0.181619</td><td>0.511587</td><td>0.276185</td><td>0.740186</td><td>0.374047</td><td>0.212527</td><td>0.568182</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (1, 1_029)\n",
       "┌─────┬────────────┬────────────┬────────────┬───┬────────────┬────────────┬───────────┬───────────┐\n",
       "│ Id  ┆ GameRulese ┆ agent1     ┆ agent2     ┆ … ┆ Balance_SC ┆ AdvantageP ┆ Advantage ┆ Advantage │\n",
       "│ --- ┆ tName      ┆ ---        ┆ ---        ┆   ┆ ORE_BOUNDS ┆ 1_EXPLORAT ┆ P1_EXPLOR ┆ P1/Balanc │\n",
       "│ i64 ┆ ---        ┆ str        ┆ str        ┆   ┆ 2_mean     ┆ ION_CONST2 ┆ ATION_CON ┆ e         │\n",
       "│     ┆ str        ┆            ┆            ┆   ┆ ---        ┆ …          ┆ ST2…      ┆ ---       │\n",
       "│     ┆            ┆            ┆            ┆   ┆ f64        ┆ ---        ┆ ---       ┆ f64       │\n",
       "│     ┆            ┆            ┆            ┆   ┆            ┆ f64        ┆ f64       ┆           │\n",
       "╞═════╪════════════╪════════════╪════════════╪═══╪════════════╪════════════╪═══════════╪═══════════╡\n",
       "│ 0   ┆ 00Y        ┆ MCTS-Progr ┆ MCTS-Progr ┆ … ┆ 0.740186   ┆ 0.374047   ┆ 0.212527  ┆ 0.568182  │\n",
       "│     ┆            ┆ essiveHist ┆ essiveHist ┆   ┆            ┆            ┆           ┆           │\n",
       "│     ┆            ┆ ory-0.1-MA ┆ ory-0.6-Ra ┆   ┆            ┆            ┆           ┆           │\n",
       "│     ┆            ┆ …          ┆ …          ┆   ┆            ┆            ┆           ┆           │\n",
       "└─────┴────────────┴────────────┴────────────┴───┴────────────┴────────────┴───────────┴───────────┘"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(f'Shape train: {train.shape}')\n",
    "train = fe.encoders_transform(train)\n",
    "train = fe.feature_engineering(train)\n",
    "print(f'Shape train: {train.shape}')\n",
    "train[CFG.categoricals].head(1)\n",
    "train.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad5efa1b",
   "metadata": {
    "papermill": {
     "duration": 0.024067,
     "end_time": "2024-10-28T02:19:42.968034",
     "exception": false,
     "start_time": "2024-10-28T02:19:42.943967",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Columns Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "48498ee4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:43.022635Z",
     "iopub.status.busy": "2024-10-28T02:19:43.022174Z",
     "iopub.status.idle": "2024-10-28T02:19:49.195333Z",
     "shell.execute_reply": "2024-10-28T02:19:49.193874Z"
    },
    "papermill": {
     "duration": 6.203846,
     "end_time": "2024-10-28T02:19:49.199239",
     "exception": false,
     "start_time": "2024-10-28T02:19:42.995393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "len(drop) : 1271\n"
     ]
    }
   ],
   "source": [
    "cols.drop = copy.deepcopy(CFG.drop)\n",
    "# cols_null_value\n",
    "cols.drop += ['Behaviour', 'StateRepetition', 'Duration', 'Complexity', 'BoardCoverage', 'GameOutcome', 'StateEvaluation', 'Clarity', 'Decisiveness', 'Drama', 'MoveEvaluation', 'StateEvaluationDifference', 'BoardSitesOccupied', 'BranchingFactor', 'DecisionFactor', 'MoveDistance', 'PieceNumber', 'ScoreDifference']\n",
    "# cols_unique_value\n",
    "cols.drop += ['Properties', 'Format', 'Time', 'Discrete', 'Realtime', 'Turns', 'Alternating', 'Simultaneous', 'HiddenInformation', 'Match', 'AsymmetricRules', 'AsymmetricPlayRules', 'AsymmetricEndRules', 'AsymmetricSetup', 'Players', 'NumPlayers', 'Simulation', 'Solitaire', 'TwoPlayer', 'Multiplayer', 'Coalition', 'Puzzle', 'DeductionPuzzle', 'PlanningPuzzle', 'Equipment', 'Container', 'Board', 'PrismShape', 'ParallelogramShape', 'RectanglePyramidalShape', 'TargetShape', 'BrickTiling', 'CelticTiling', 'QuadHexTiling', 'Hints', 'PlayableSites', 'Component', 'DiceD3', 'BiasedDice', 'Card', 'Domino', 'Rules', 'SituationalTurnKo', 'SituationalSuperko', 'InitialAmount', 'InitialPot', 'Play', 'BetDecision', 'BetDecisionFrequency', 'VoteDecisionFrequency', 'ChooseTrumpSuitDecision', 'ChooseTrumpSuitDecisionFrequency', 'LeapDecisionToFriend', 'LeapDecisionToFriendFrequency', 'HopDecisionEnemyToFriend', 'HopDecisionEnemyToFriendFrequency', 'HopDecisionFriendToFriend', 'FromToDecisionWithinBoard', 'FromToDecisionBetweenContainers', 'BetEffect', 'BetEffectFrequency', 'VoteEffectFrequency', 'SwapPlayersEffectFrequency', 'TakeControl', 'TakeControlFrequency', 'PassEffectFrequency', 'SetCost', 'SetCostFrequency', 'SetPhase', 'SetPhaseFrequency', 'SetTrumpSuit', 'SetTrumpSuitFrequency', 'StepEffectFrequency', 'SlideEffectFrequency', 'LeapEffectFrequency', 'HopEffectFrequency', 'FromToEffectFrequency', 'SwapPiecesEffect', 'SwapPiecesEffectFrequency', 'ShootEffect', 'ShootEffectFrequency', 'MaxCapture', 'OffDiagonalDirection', 'Information', 'HidePieceType', 'HidePieceOwner', 'HidePieceCount', 'HidePieceRotation', 'HidePieceValue', 'HidePieceState', 'InvisiblePiece', 'End', 'LineDrawFrequency', 'ConnectionDraw', 'ConnectionDrawFrequency', 'GroupLossFrequency', 'GroupDrawFrequency', 'LoopLossFrequency', 'LoopDraw', 'LoopDrawFrequency', 'PatternLoss', 'PatternLossFrequency', 'PatternDraw', 'PatternDrawFrequency', 'PathExtentEndFrequency', 'PathExtentWinFrequency', 'PathExtentLossFrequency', 'PathExtentDraw', 'PathExtentDrawFrequency', 'TerritoryLoss', 'TerritoryLossFrequency', 'TerritoryDraw', 'TerritoryDrawFrequency', 'CheckmateLoss', 'CheckmateLossFrequency', 'CheckmateDraw', 'CheckmateDrawFrequency', 'NoTargetPieceLoss', 'NoTargetPieceLossFrequency', 'NoTargetPieceDraw', 'NoTargetPieceDrawFrequency', 'NoOwnPiecesDraw', 'NoOwnPiecesDrawFrequency', 'FillLoss', 'FillLossFrequency', 'FillDraw', 'FillDrawFrequency', 'ScoringDrawFrequency', 'NoProgressWin', 'NoProgressWinFrequency', 'NoProgressLoss', 'NoProgressLossFrequency', 'SolvedEnd', 'PositionalRepetition', 'SituationalRepetition', 'Narrowness', 'Variance', 'DecisivenessMoves', 'DecisivenessThreshold', 'LeadChange', 'Stability', 'DramaAverage', 'DramaMedian', 'DramaMaximum', 'DramaMinimum', 'DramaVariance', 'DramaChangeAverage', 'DramaChangeSign', 'DramaChangeLineBestFit', 'DramaChangeNumTimes', 'DramaMaxIncrease', 'DramaMaxDecrease', 'MoveEvaluationAverage', 'MoveEvaluationMedian', 'MoveEvaluationMaximum', 'MoveEvaluationMinimum', 'MoveEvaluationVariance', 'MoveEvaluationChangeAverage', 'MoveEvaluationChangeSign', 'MoveEvaluationChangeLineBestFit', 'MoveEvaluationChangeNumTimes', 'MoveEvaluationMaxIncrease', 'MoveEvaluationMaxDecrease', 'StateEvaluationDifferenceAverage', 'StateEvaluationDifferenceMedian', 'StateEvaluationDifferenceMaximum', 'StateEvaluationDifferenceMinimum', 'StateEvaluationDifferenceVariance', 'StateEvaluationDifferenceChangeAverage', 'StateEvaluationDifferenceChangeSign', 'StateEvaluationDifferenceChangeLineBestFit', 'StateEvaluationDifferenceChangeNumTimes', 'StateEvaluationDifferenceMaxIncrease', 'StateEvaluationDifferenceMaxDecrease', 'BoardSitesOccupiedMinimum', 'BranchingFactorMinimum', 'DecisionFactorMinimum', 'MoveDistanceMinimum', 'PieceNumberMinimum', 'ScoreDifferenceMinimum', 'ScoreDifferenceChangeNumTimes', 'Roots', 'Cosine', 'Sine', 'Tangent', 'Exponential', 'Logarithm', 'ExclusiveDisjunction', 'Float', 'HandComponent', 'SetHidden', 'SetInvisible', 'SetHiddenCount', 'SetHiddenRotation', 'SetHiddenState', 'SetHiddenValue', 'SetHiddenWhat', 'SetHiddenWho']\n",
    "# cols_duplicated_value\n",
    "cols.drop += ['AsymmetricForces', 'PieceDirection', 'Sow', 'Roll', 'CircleTiling', 'LeftwardDirection', 'NumPerimeterSites', 'StackState', 'SwapOption', 'BackwardRightDirection', 'SowOriginFirst', 'MancalaStyle', 'ForwardRightDirection', 'AsymmetricPiecesType', 'NoProgressDrawFrequency']\n",
    "# cols_onehot\n",
    "cols.drop += CFG.cols_onehot\n",
    "# cols_percentages_to_drop\n",
    "cols_percentages_to_drop = [col for col in train.columns if train[col].value_counts(normalize = True).max()['proportion'].item() > 0.99]\n",
    "cols.drop += cols_percentages_to_drop\n",
    "cols.drop = list(dict.fromkeys(cols.drop)) #removing duplicates\n",
    "\n",
    "cols.categoricals = list(dict.fromkeys(copy.deepcopy(CFG.categoricals)))\n",
    "### Priotity to CAT cols => if col in cat it will not be dropped\n",
    "cols.drop = [col for col in cols.drop if col not in cols.categoricals] \n",
    "### Drop categoricals col which are one hot encoded\n",
    "cols.categoricals = [col for col in cols.categoricals if col not in CFG.cols_onehot] \n",
    "\n",
    "\n",
    "cols.numericals = [col for col in train.columns if (col not in cols.categoricals + cols.drop + [CFG.target_col] and train[col].dtype.is_numeric())]\n",
    "cols.numericals = list(dict.fromkeys(cols.numericals))\n",
    "# double_check_cols = [col for col in train.columns if col not in cols.categoricals + cols.drop + cols.numericals + [CFG.target_col]]\n",
    "# cols.drop +=  double_check_cols\n",
    "# print(f\"double_check_cols : {double_check_cols}\")\n",
    "\n",
    "cols.drop = list(dict.fromkeys(cols.drop)) #removing duplicates\n",
    "print(f\"len(drop) : {len(cols.drop)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "11383b2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:49.258152Z",
     "iopub.status.busy": "2024-10-28T02:19:49.257016Z",
     "iopub.status.idle": "2024-10-28T02:19:49.478123Z",
     "shell.execute_reply": "2024-10-28T02:19:49.476731Z"
    },
    "papermill": {
     "duration": 0.252554,
     "end_time": "2024-10-28T02:19:49.480979",
     "exception": false,
     "start_time": "2024-10-28T02:19:49.228425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**********************************************************************\n",
      "number categoricals cols : 8, number numericals cols : 157, number drop cols : 1271, number target : 1\n",
      "total = 1437 == 1029 : train.shape\n",
      "cat categoricals : ['Rules_equipment', 'Rules_game', 'Rules_category1', 'Rules_category2', 'SELECTION1', 'PLAYOUT1', 'SELECTION2', 'PLAYOUT2']\n",
      "debug : ['AdvantageP1_Rules_category2_mean', 'AdvantageP1_Rules_category1_std', 'AdvantageP1_Rules_category1_mean', 'AdvantageP1_Rules_category2_std', 'AdvantageP1_SELECTION1_mean/AdvantageP1_EXPLORATION_CONST2_std', 'AdvantageP1_EXPLORATION_CONST1_std/AdvantageP1_EXPLORATION_CONST2_std', 'AdvantageP1_SELECTION1_mean/Balance', 'AdvantageP1_EXPLORATION_CONST1_std/Balance', 'AdvantageP1_EXPLORATION_CONST1_std/AdvantageP1', 'tfid_EnglishRules_0', 'tfid_EnglishRules_1', 'tfid_EnglishRules_2', 'tfid_EnglishRules_3', 'tfid_EnglishRules_4', 'tfid_EnglishRules_5', 'tfid_EnglishRules_6', 'tfid_EnglishRules_7', 'tfid_EnglishRules_8', 'tfid_EnglishRules_9', 'tfid_EnglishRules_10', 'tfid_EnglishRules_11', 'tfid_EnglishRules_12', 'tfid_EnglishRules_13', 'tfid_EnglishRules_14', 'tfid_EnglishRules_15', 'tfid_EnglishRules_16', 'tfid_EnglishRules_17', 'tfid_EnglishRules_18', 'tfid_EnglishRules_19', 'tfid_EnglishRules_20', 'tfid_EnglishRules_21', 'tfid_EnglishRules_22', 'tfid_EnglishRules_23', 'tfid_EnglishRules_24', 'tfid_EnglishRules_25', 'tfid_EnglishRules_26', 'tfid_EnglishRules_27', 'tfid_EnglishRules_28', 'tfid_EnglishRules_29', 'tfid_EnglishRules_30', 'tfid_EnglishRules_31', 'tfid_EnglishRules_32', 'tfid_EnglishRules_33', 'tfid_EnglishRules_34', 'tfid_EnglishRules_35', 'tfid_EnglishRules_36', 'tfid_EnglishRules_37', 'tfid_EnglishRules_38', 'tfid_EnglishRules_39', 'tfid_EnglishRules_40', 'tfid_EnglishRules_41', 'tfid_EnglishRules_42', 'tfid_EnglishRules_43', 'tfid_EnglishRules_44', 'tfid_EnglishRules_45', 'tfid_EnglishRules_46', 'tfid_EnglishRules_47', 'tfid_EnglishRules_48', 'tfid_EnglishRules_49', 'tfid_EnglishRules_50', 'tfid_EnglishRules_51', 'tfid_EnglishRules_52', 'tfid_EnglishRules_53', 'tfid_EnglishRules_54', 'tfid_EnglishRules_55', 'tfid_EnglishRules_56', 'tfid_EnglishRules_57', 'tfid_EnglishRules_58', 'tfid_EnglishRules_59', 'tfid_EnglishRules_60', 'tfid_EnglishRules_61', 'tfid_EnglishRules_62', 'tfid_EnglishRules_63', 'tfid_EnglishRules_64', 'tfid_EnglishRules_65', 'tfid_EnglishRules_66', 'tfid_EnglishRules_67', 'tfid_EnglishRules_68', 'tfid_EnglishRules_69', 'tfid_EnglishRules_70', 'tfid_EnglishRules_71', 'tfid_EnglishRules_72', 'tfid_EnglishRules_73', 'tfid_EnglishRules_74', 'tfid_EnglishRules_75', 'tfid_EnglishRules_76', 'tfid_EnglishRules_77', 'tfid_EnglishRules_78', 'tfid_EnglishRules_79', 'tfid_EnglishRules_80', 'tfid_EnglishRules_81', 'tfid_EnglishRules_82', 'tfid_EnglishRules_83', 'tfid_EnglishRules_84', 'tfid_EnglishRules_85', 'tfid_EnglishRules_86', 'tfid_EnglishRules_87', 'tfid_EnglishRules_88', 'tfid_EnglishRules_89', 'tfid_EnglishRules_90', 'tfid_EnglishRules_91', 'tfid_EnglishRules_92', 'tfid_EnglishRules_93', 'tfid_EnglishRules_94', 'tfid_EnglishRules_95', 'tfid_EnglishRules_96', 'tfid_EnglishRules_97', 'tfid_EnglishRules_98', 'tfid_EnglishRules_99', 'tfid_EnglishRules_100', 'tfid_EnglishRules_101', 'tfid_EnglishRules_102', 'tfid_EnglishRules_103', 'tfid_EnglishRules_104', 'tfid_EnglishRules_105', 'tfid_EnglishRules_106', 'tfid_EnglishRules_107', 'tfid_EnglishRules_108', 'tfid_EnglishRules_109', 'tfid_EnglishRules_110', 'tfid_EnglishRules_111', 'tfid_EnglishRules_112', 'tfid_EnglishRules_113', 'tfid_EnglishRules_114', 'tfid_EnglishRules_115', 'tfid_EnglishRules_116', 'tfid_EnglishRules_117', 'tfid_EnglishRules_118', 'tfid_EnglishRules_119', 'tfid_EnglishRules_120', 'tfid_EnglishRules_121', 'tfid_EnglishRules_122', 'tfid_EnglishRules_123', 'tfid_EnglishRules_124', 'tfid_EnglishRules_125', 'tfid_EnglishRules_126', 'tfid_EnglishRules_127', 'tfid_EnglishRules_128', 'tfid_EnglishRules_129', 'tfid_EnglishRules_130', 'tfid_EnglishRules_131', 'tfid_EnglishRules_132', 'tfid_EnglishRules_133', 'tfid_EnglishRules_134', 'tfid_EnglishRules_135', 'tfid_EnglishRules_136', 'tfid_EnglishRules_137', 'tfid_EnglishRules_138', 'tfid_EnglishRules_139', 'tfid_EnglishRules_140', 'tfid_EnglishRules_141', 'tfid_EnglishRules_142', 'tfid_EnglishRules_143', 'tfid_EnglishRules_144', 'tfid_EnglishRules_145', 'tfid_EnglishRules_146', 'tfid_EnglishRules_147', 'tfid_EnglishRules_148', 'tfid_EnglishRules_149', 'tfid_EnglishRules_150', 'tfid_EnglishRules_151', 'tfid_EnglishRules_152', 'tfid_EnglishRules_153', 'tfid_EnglishRules_154', 'tfid_EnglishRules_155', 'tfid_EnglishRules_156', 'tfid_EnglishRules_157', 'tfid_EnglishRules_158', 'tfid_EnglishRules_159', 'tfid_EnglishRules_160', 'tfid_EnglishRules_161', 'tfid_EnglishRules_162', 'tfid_EnglishRules_163', 'tfid_EnglishRules_164', 'tfid_EnglishRules_165', 'tfid_EnglishRules_166', 'tfid_EnglishRules_167', 'tfid_EnglishRules_168', 'tfid_EnglishRules_169', 'tfid_EnglishRules_170', 'tfid_EnglishRules_171', 'tfid_EnglishRules_172', 'tfid_EnglishRules_173', 'tfid_EnglishRules_174', 'tfid_EnglishRules_175', 'tfid_EnglishRules_176', 'tfid_EnglishRules_177', 'tfid_EnglishRules_178', 'tfid_EnglishRules_179', 'tfid_EnglishRules_180', 'tfid_EnglishRules_181', 'tfid_EnglishRules_182', 'tfid_EnglishRules_183', 'tfid_EnglishRules_184', 'tfid_EnglishRules_185', 'tfid_EnglishRules_186', 'tfid_EnglishRules_187', 'tfid_EnglishRules_188', 'tfid_EnglishRules_189', 'tfid_EnglishRules_190', 'tfid_EnglishRules_191', 'tfid_EnglishRules_192', 'tfid_EnglishRules_193', 'tfid_EnglishRules_194', 'tfid_EnglishRules_195', 'tfid_EnglishRules_196', 'tfid_EnglishRules_197', 'tfid_EnglishRules_198', 'tfid_EnglishRules_199', 'tfid_EnglishRules_200', 'tfid_EnglishRules_201', 'tfid_EnglishRules_202', 'tfid_EnglishRules_203', 'tfid_EnglishRules_204', 'tfid_EnglishRules_205', 'tfid_EnglishRules_206', 'tfid_EnglishRules_207', 'tfid_EnglishRules_208', 'tfid_EnglishRules_209', 'tfid_EnglishRules_210', 'tfid_EnglishRules_211', 'tfid_EnglishRules_212', 'tfid_EnglishRules_213', 'tfid_EnglishRules_214', 'tfid_EnglishRules_215', 'tfid_EnglishRules_216', 'tfid_EnglishRules_217', 'tfid_EnglishRules_218', 'tfid_EnglishRules_219', 'tfid_EnglishRules_220', 'tfid_EnglishRules_221', 'tfid_EnglishRules_222', 'tfid_EnglishRules_223', 'tfid_EnglishRules_224', 'tfid_EnglishRules_225', 'tfid_EnglishRules_226', 'tfid_EnglishRules_227', 'tfid_EnglishRules_228', 'tfid_EnglishRules_229', 'tfid_EnglishRules_230', 'tfid_EnglishRules_231', 'tfid_EnglishRules_232', 'tfid_EnglishRules_233', 'tfid_EnglishRules_234', 'tfid_EnglishRules_235', 'tfid_EnglishRules_236', 'tfid_EnglishRules_237', 'tfid_EnglishRules_238', 'tfid_EnglishRules_239', 'tfid_EnglishRules_240', 'tfid_EnglishRules_241', 'tfid_EnglishRules_242', 'tfid_EnglishRules_243', 'tfid_EnglishRules_244', 'tfid_EnglishRules_245', 'tfid_EnglishRules_246', 'tfid_EnglishRules_247', 'tfid_EnglishRules_248', 'tfid_EnglishRules_249', 'tfid_EnglishRules_250', 'tfid_EnglishRules_251', 'tfid_EnglishRules_252', 'tfid_EnglishRules_253', 'tfid_EnglishRules_254', 'tfid_EnglishRules_255', 'tfid_EnglishRules_256', 'tfid_EnglishRules_257', 'tfid_EnglishRules_258', 'tfid_EnglishRules_259', 'tfid_EnglishRules_260', 'tfid_EnglishRules_261', 'tfid_EnglishRules_262', 'tfid_EnglishRules_263', 'tfid_EnglishRules_264', 'tfid_EnglishRules_265', 'tfid_EnglishRules_266', 'tfid_EnglishRules_267', 'tfid_EnglishRules_268', 'tfid_EnglishRules_269', 'tfid_EnglishRules_270', 'tfid_EnglishRules_271', 'tfid_EnglishRules_272', 'tfid_EnglishRules_273', 'tfid_EnglishRules_274', 'tfid_EnglishRules_275', 'tfid_EnglishRules_276', 'tfid_EnglishRules_277', 'tfid_EnglishRules_278', 'tfid_EnglishRules_279', 'tfid_EnglishRules_280', 'tfid_EnglishRules_281', 'tfid_EnglishRules_282', 'tfid_EnglishRules_283', 'tfid_EnglishRules_284', 'tfid_EnglishRules_285', 'tfid_EnglishRules_286', 'tfid_EnglishRules_287', 'tfid_EnglishRules_288', 'tfid_EnglishRules_289', 'tfid_EnglishRules_290', 'tfid_EnglishRules_291', 'tfid_EnglishRules_292', 'tfid_EnglishRules_293', 'tfid_EnglishRules_294', 'tfid_EnglishRules_295', 'tfid_EnglishRules_296', 'tfid_EnglishRules_297', 'tfid_EnglishRules_298', 'tfid_EnglishRules_299', 'tfid_EnglishRules_300', 'tfid_EnglishRules_301', 'tfid_EnglishRules_302', 'tfid_EnglishRules_303', 'tfid_EnglishRules_304', 'tfid_EnglishRules_305', 'tfid_EnglishRules_306', 'tfid_EnglishRules_307', 'tfid_EnglishRules_308', 'tfid_EnglishRules_309', 'tfid_EnglishRules_310', 'tfid_EnglishRules_311', 'tfid_EnglishRules_312', 'tfid_EnglishRules_313', 'tfid_EnglishRules_314', 'tfid_EnglishRules_315', 'tfid_EnglishRules_316', 'tfid_EnglishRules_317', 'tfid_EnglishRules_318', 'tfid_EnglishRules_319', 'tfid_EnglishRules_320', 'tfid_EnglishRules_321', 'tfid_EnglishRules_322', 'tfid_EnglishRules_323', 'tfid_EnglishRules_324', 'tfid_EnglishRules_325', 'tfid_EnglishRules_326', 'tfid_EnglishRules_327', 'tfid_EnglishRules_328', 'tfid_EnglishRules_329', 'tfid_EnglishRules_330', 'tfid_EnglishRules_331', 'tfid_EnglishRules_332', 'tfid_EnglishRules_333', 'tfid_EnglishRules_334', 'tfid_EnglishRules_335', 'tfid_EnglishRules_336', 'tfid_EnglishRules_337', 'tfid_EnglishRules_338', 'tfid_EnglishRules_339', 'tfid_EnglishRules_340', 'tfid_EnglishRules_341', 'tfid_EnglishRules_342', 'tfid_EnglishRules_343', 'tfid_EnglishRules_344', 'tfid_EnglishRules_345', 'tfid_EnglishRules_346', 'tfid_EnglishRules_347', 'tfid_EnglishRules_348', 'tfid_EnglishRules_349', 'tfid_EnglishRules_350', 'tfid_EnglishRules_351', 'tfid_EnglishRules_352', 'tfid_EnglishRules_353', 'tfid_EnglishRules_354', 'tfid_EnglishRules_355', 'tfid_EnglishRules_356', 'tfid_EnglishRules_357', 'tfid_EnglishRules_358', 'tfid_EnglishRules_359', 'tfid_EnglishRules_360', 'tfid_EnglishRules_361', 'tfid_EnglishRules_362', 'tfid_EnglishRules_363', 'tfid_EnglishRules_364', 'tfid_EnglishRules_365', 'tfid_EnglishRules_366', 'tfid_EnglishRules_367', 'tfid_EnglishRules_368', 'tfid_EnglishRules_369', 'tfid_EnglishRules_370', 'tfid_EnglishRules_371', 'tfid_EnglishRules_372', 'tfid_EnglishRules_373', 'tfid_EnglishRules_374', 'tfid_EnglishRules_375', 'tfid_EnglishRules_376', 'tfid_EnglishRules_377', 'tfid_EnglishRules_378', 'tfid_EnglishRules_379', 'tfid_EnglishRules_380', 'tfid_EnglishRules_381', 'tfid_EnglishRules_382', 'tfid_EnglishRules_383', 'tfid_EnglishRules_384', 'tfid_EnglishRules_385', 'tfid_EnglishRules_386', 'tfid_EnglishRules_387', 'tfid_EnglishRules_388', 'tfid_EnglishRules_389', 'tfid_EnglishRules_390', 'tfid_EnglishRules_391', 'tfid_EnglishRules_392', 'tfid_EnglishRules_393', 'tfid_EnglishRules_394', 'tfid_EnglishRules_395', 'tfid_EnglishRules_396', 'tfid_EnglishRules_397', 'tfid_EnglishRules_398', 'tfid_EnglishRules_399']\n",
      "**********************************************************************\n",
      "len(cols.lgbm.drop) :1314\n",
      "len(cols.catboost.drop) :1271\n",
      "len(cols.nn.drop) :1271\n",
      "**********************************************************************\n",
      "lgbm.numericals: 115, lgbm.categoricals : 7\n",
      "catboost.numericals : 157, catboost.categoricals : 8\n",
      "nn.numericals: 157, nn.categoricals : 8\n"
     ]
    }
   ],
   "source": [
    "cols.lgbm = dotdict(dict)\n",
    "cols.catboost = dotdict(dict)\n",
    "cols.nn = dotdict(dict)\n",
    "\n",
    "cols.lgbm.drop = copy.deepcopy(cols.drop)\n",
    "cols.catboost.drop = copy.deepcopy(cols.drop)\n",
    "cols.nn.drop = copy.deepcopy(cols.drop)\n",
    "\n",
    "############### ADD SPECIFIC drops per models\n",
    "#permutation importance < 0 in UM - MCTS | LGB, CAT, NN Baseline v74 \n",
    "cols.catboost.drop += ['DecisionFactorChangeNumTimes']\n",
    "#permutation importance < 0 in UM - MCTS | LGB, CAT, NN Baseline v72 \n",
    "cols.lgbm.drop += ['row_equal_col', 'ReachEnd', 'RelativeDirections', 'GreaterThanOrEqual', 'SpaceConditions', 'BackwardLeftDirection', 'Disjunction', 'PieceNumberAverage', 'BranchingFactorChangeLineBestFit', 'Equal']\n",
    "#permutation importance < 0 in UM - MCTS | LGB, CAT, NN Baseline v71\n",
    "cols.lgbm.drop +=  ['SlideDecisionToEmpty', 'PiecesPlacedOutsideBoard', 'ReachEnd', 'Implementation', 'Hand', 'AddEffect']\n",
    "#permutation importance < 0 in UM - MCTS | LGB, CAT, NN Baseline v138\n",
    "cols.lgbm.drop +=  ['HopEffect', 'NoMovesNext', 'ReachEndFrequency', 'Logic', 'MoveAgain', 'Cell', 'PieceNumberMaxIncrease', 'ScoreDifferenceChangeLineBestFit', 'DecisionFactorChangeAverage', 'DurationToComplexityRatio', 'Symbols', 'CanMove', 'MoveConditions', 'NumContainers', 'DrawFrequency', 'Tile', 'NoMovesEndFrequency', 'FromToDecisionEmptyFrequency', 'AddDecision', 'SetMove', 'NoMovesWin', 'SlideDecisionToEmptyFrequency', 'Region']\n",
    "#permutation importance < 0 in UM - MCTS | LGB, CAT, NN Baseline 2 v15\n",
    "cols.lgbm.drop += ['Arithmetic', 'RaceEnd', 'Rules_category1', 'Phase', 'Comparison']\n",
    "\n",
    "cols.lgbm.drop = list(dict.fromkeys(cols.lgbm.drop)) \n",
    "cols.catboost.drop = list(dict.fromkeys(cols.catboost.drop)) \n",
    "cols.nn.drop = list(dict.fromkeys(cols.nn.drop)) \n",
    "###############\n",
    "\n",
    "cols.lgbm.features = list(dict.fromkeys([col for col in cols.numericals + cols.categoricals if col not in cols.lgbm.drop]))\n",
    "cols.catboost.features  = list(dict.fromkeys([col for col in cols.numericals + cols.categoricals if col not in cols.catboost.drop]))\n",
    "cols.nn.features  = list(dict.fromkeys([col for col in cols.numericals + cols.categoricals if col not in cols.nn.drop]))\n",
    "\n",
    "cols.lgbm.categoricals = list(dict.fromkeys([col for col in cols.categoricals if col not in cols.lgbm.drop]))\n",
    "cols.catboost.categoricals = list(dict.fromkeys([col for col in cols.categoricals if col not in cols.catboost.drop]))\n",
    "cols.nn.categoricals  = list(dict.fromkeys([col for col in cols.categoricals if col not in cols.nn.drop]))\n",
    "\n",
    "cols.lgbm.numericals = list(dict.fromkeys([col for col in cols.numericals if col not in cols.lgbm.drop]))\n",
    "cols.catboost.numericals = list(dict.fromkeys([col for col in cols.numericals if col not in cols.catboost.drop]))\n",
    "cols.nn.numericals  = list(dict.fromkeys([col for col in cols.numericals if col not in cols.nn.drop]))\n",
    "\n",
    "json.dump(cols, open('cols.json', 'w'))\n",
    "print('*' * 70)\n",
    "print(f\"number categoricals cols : {len(cols.categoricals)}, number numericals cols : {len(cols.numericals)}, number drop cols : {len(cols.drop)}, number target : 1\")\n",
    "print(f\"total = {len(cols.categoricals + cols.numericals + cols.drop) + 1} == {train.shape[1]} : train.shape\")\n",
    "print(f\"cat categoricals : {cols.categoricals}\")\n",
    "print(f\"debug : {[col for col in cols.categoricals + cols.numericals + cols.drop if col not in train.columns]}\")\n",
    "\n",
    "print('*' * 70)\n",
    "print(f\"len(cols.lgbm.drop) :{len(cols.lgbm.drop)}\")\n",
    "print(f\"len(cols.catboost.drop) :{len(cols.catboost.drop)}\")\n",
    "print(f\"len(cols.nn.drop) :{len(cols.nn.drop)}\")\n",
    "\n",
    "print('*' * 70)\n",
    "print(f\"lgbm.numericals: {len(cols.lgbm.numericals)}, lgbm.categoricals : {len(cols.lgbm.categoricals)}\")\n",
    "print(f\"catboost.numericals : {len(cols.catboost.numericals)}, catboost.categoricals : {len(cols.catboost.categoricals)}\")\n",
    "print(f\"nn.numericals: {len(cols.nn.numericals)}, nn.categoricals : {len(cols.nn.categoricals)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "def4f737",
   "metadata": {
    "papermill": {
     "duration": 0.024857,
     "end_time": "2024-10-28T02:19:49.531510",
     "exception": false,
     "start_time": "2024-10-28T02:19:49.506653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Scale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9851a646",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:49.585586Z",
     "iopub.status.busy": "2024-10-28T02:19:49.585008Z",
     "iopub.status.idle": "2024-10-28T02:19:50.002835Z",
     "shell.execute_reply": "2024-10-28T02:19:50.001456Z"
    },
    "papermill": {
     "duration": 0.448579,
     "end_time": "2024-10-28T02:19:50.005948",
     "exception": false,
     "start_time": "2024-10-28T02:19:49.557369",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape: (233234, 1029)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (1, 1_029)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Id</th><th>GameRulesetName</th><th>agent1</th><th>agent2</th><th>Properties</th><th>Format</th><th>Time</th><th>Discrete</th><th>Realtime</th><th>Turns</th><th>Alternating</th><th>Simultaneous</th><th>Stochastic</th><th>HiddenInformation</th><th>Match</th><th>Asymmetric</th><th>AsymmetricRules</th><th>AsymmetricPlayRules</th><th>AsymmetricEndRules</th><th>AsymmetricForces</th><th>AsymmetricSetup</th><th>AsymmetricPiecesType</th><th>Players</th><th>NumPlayers</th><th>Simulation</th><th>Solitaire</th><th>TwoPlayer</th><th>Multiplayer</th><th>PlayersWithDirections</th><th>Cooperation</th><th>Team</th><th>Coalition</th><th>Puzzle</th><th>DeductionPuzzle</th><th>PlanningPuzzle</th><th>Equipment</th><th>Container</th><th>&hellip;</th><th>Balance_agent2_std</th><th>Balance_agent2_mean</th><th>AdvantageP1_SELECTION1_std</th><th>AdvantageP1_SELECTION1_mean</th><th>Balance_SELECTION1_std</th><th>Balance_SELECTION1_mean</th><th>AdvantageP1_EXPLORATION_CONST1_std</th><th>AdvantageP1_EXPLORATION_CONST1_mean</th><th>Balance_EXPLORATION_CONST1_std</th><th>Balance_EXPLORATION_CONST1_mean</th><th>AdvantageP1_PLAYOUT1_std</th><th>AdvantageP1_PLAYOUT1_mean</th><th>Balance_PLAYOUT1_std</th><th>Balance_PLAYOUT1_mean</th><th>AdvantageP1_SCORE_BOUNDS1_std</th><th>AdvantageP1_SCORE_BOUNDS1_mean</th><th>Balance_SCORE_BOUNDS1_std</th><th>Balance_SCORE_BOUNDS1_mean</th><th>AdvantageP1_SELECTION2_std</th><th>AdvantageP1_SELECTION2_mean</th><th>Balance_SELECTION2_std</th><th>Balance_SELECTION2_mean</th><th>AdvantageP1_EXPLORATION_CONST2_std</th><th>AdvantageP1_EXPLORATION_CONST2_mean</th><th>Balance_EXPLORATION_CONST2_std</th><th>Balance_EXPLORATION_CONST2_mean</th><th>AdvantageP1_PLAYOUT2_std</th><th>AdvantageP1_PLAYOUT2_mean</th><th>Balance_PLAYOUT2_std</th><th>Balance_PLAYOUT2_mean</th><th>AdvantageP1_SCORE_BOUNDS2_std</th><th>AdvantageP1_SCORE_BOUNDS2_mean</th><th>Balance_SCORE_BOUNDS2_std</th><th>Balance_SCORE_BOUNDS2_mean</th><th>AdvantageP1_EXPLORATION_CONST2_std/AdvantageP1</th><th>AdvantageP1_EXPLORATION_CONST2_std/Balance</th><th>AdvantageP1/Balance</th></tr><tr><td>i64</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>f64</td><td>i64</td><td>i64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>&hellip;</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>0</td><td>&quot;00Y&quot;</td><td>&quot;MCTS-ProgressiveHistory-0.1-MA…</td><td>&quot;MCTS-ProgressiveHistory-0.6-Ra…</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>-0.286445</td><td>0</td><td>0</td><td>-0.478765</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>0</td><td>0</td><td>1</td><td>0</td><td>-0.393003</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>&hellip;</td><td>0.276078</td><td>0.739962</td><td>0.186584</td><td>0.511471</td><td>0.282364</td><td>0.734062</td><td>0.186789</td><td>0.511843</td><td>0.283084</td><td>0.734073</td><td>0.186629</td><td>0.511214</td><td>0.28236</td><td>0.733788</td><td>0.181619</td><td>0.511587</td><td>0.276185</td><td>0.740186</td><td>0.186584</td><td>0.511471</td><td>0.282364</td><td>0.734062</td><td>0.972553</td><td>0.511301</td><td>0.282793</td><td>0.733101</td><td>0.187609</td><td>0.511831</td><td>0.283888</td><td>0.73255</td><td>0.181619</td><td>0.511587</td><td>0.276185</td><td>0.740186</td><td>0.374047</td><td>0.212527</td><td>-0.192069</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (1, 1_029)\n",
       "┌─────┬────────────┬────────────┬────────────┬───┬────────────┬────────────┬───────────┬───────────┐\n",
       "│ Id  ┆ GameRulese ┆ agent1     ┆ agent2     ┆ … ┆ Balance_SC ┆ AdvantageP ┆ Advantage ┆ Advantage │\n",
       "│ --- ┆ tName      ┆ ---        ┆ ---        ┆   ┆ ORE_BOUNDS ┆ 1_EXPLORAT ┆ P1_EXPLOR ┆ P1/Balanc │\n",
       "│ i64 ┆ ---        ┆ str        ┆ str        ┆   ┆ 2_mean     ┆ ION_CONST2 ┆ ATION_CON ┆ e         │\n",
       "│     ┆ str        ┆            ┆            ┆   ┆ ---        ┆ …          ┆ ST2…      ┆ ---       │\n",
       "│     ┆            ┆            ┆            ┆   ┆ f64        ┆ ---        ┆ ---       ┆ f64       │\n",
       "│     ┆            ┆            ┆            ┆   ┆            ┆ f64        ┆ f64       ┆           │\n",
       "╞═════╪════════════╪════════════╪════════════╪═══╪════════════╪════════════╪═══════════╪═══════════╡\n",
       "│ 0   ┆ 00Y        ┆ MCTS-Progr ┆ MCTS-Progr ┆ … ┆ 0.740186   ┆ 0.374047   ┆ 0.212527  ┆ -0.192069 │\n",
       "│     ┆            ┆ essiveHist ┆ essiveHist ┆   ┆            ┆            ┆           ┆           │\n",
       "│     ┆            ┆ ory-0.1-MA ┆ ory-0.6-Ra ┆   ┆            ┆            ┆           ┆           │\n",
       "│     ┆            ┆ …          ┆ …          ┆   ┆            ┆            ┆           ┆           │\n",
       "└─────┴────────────┴────────────┴────────────┴───┴────────────┴────────────┴───────────┴───────────┘"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fe.scaler_fit(train)\n",
    "train = fe.scaler_transform(train)\n",
    "\n",
    "print(f'Shape: {train.shape}')\n",
    "train.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea1f98ad",
   "metadata": {
    "papermill": {
     "duration": 0.027892,
     "end_time": "2024-10-28T02:19:50.060759",
     "exception": false,
     "start_time": "2024-10-28T02:19:50.032867",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Cleaning train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "64018c90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:50.114166Z",
     "iopub.status.busy": "2024-10-28T02:19:50.113106Z",
     "iopub.status.idle": "2024-10-28T02:19:50.609190Z",
     "shell.execute_reply": "2024-10-28T02:19:50.607982Z"
    },
    "papermill": {
     "duration": 0.525792,
     "end_time": "2024-10-28T02:19:50.611933",
     "exception": false,
     "start_time": "2024-10-28T02:19:50.086141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape: (233234, 167)\n",
      "Memory usage: 284.72 MB\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GameRulesetName</th>\n",
       "      <th>Stochastic</th>\n",
       "      <th>Asymmetric</th>\n",
       "      <th>PlayersWithDirections</th>\n",
       "      <th>AlquerqueTiling</th>\n",
       "      <th>MancalaBoard</th>\n",
       "      <th>MancalaTwoRows</th>\n",
       "      <th>Track</th>\n",
       "      <th>Region</th>\n",
       "      <th>Vertex</th>\n",
       "      <th>Cell</th>\n",
       "      <th>NumPlayableSitesOnBoard</th>\n",
       "      <th>NumOrthogonalDirections</th>\n",
       "      <th>NumInnerSites</th>\n",
       "      <th>NumEdges</th>\n",
       "      <th>NumCells</th>\n",
       "      <th>NumVertices</th>\n",
       "      <th>Hand</th>\n",
       "      <th>NumContainers</th>\n",
       "      <th>Tile</th>\n",
       "      <th>PiecesPlacedOnBoard</th>\n",
       "      <th>PiecesPlacedOutsideBoard</th>\n",
       "      <th>NumStartComponentsBoard</th>\n",
       "      <th>NumStartComponentsBoardPerPlayer</th>\n",
       "      <th>NoSiteMoves</th>\n",
       "      <th>PassDecision</th>\n",
       "      <th>AddDecision</th>\n",
       "      <th>TwoSitesMoves</th>\n",
       "      <th>StepDecision</th>\n",
       "      <th>StepDecisionFrequency</th>\n",
       "      <th>StepDecisionToEmptyFrequency</th>\n",
       "      <th>SlideDecisionToEmpty</th>\n",
       "      <th>SlideDecisionToEmptyFrequency</th>\n",
       "      <th>HopDecision</th>\n",
       "      <th>HopDecisionEnemyToEmpty</th>\n",
       "      <th>FromToDecisionEmptyFrequency</th>\n",
       "      <th>AddEffect</th>\n",
       "      <th>SowFrequency</th>\n",
       "      <th>SowCaptureFrequency</th>\n",
       "      <th>RemoveEffectFrequency</th>\n",
       "      <th>SetMove</th>\n",
       "      <th>MoveAgain</th>\n",
       "      <th>HopEffect</th>\n",
       "      <th>Priority</th>\n",
       "      <th>HopCapture</th>\n",
       "      <th>SpaceConditions</th>\n",
       "      <th>Line</th>\n",
       "      <th>MoveConditions</th>\n",
       "      <th>NoMovesMover</th>\n",
       "      <th>NoMovesNext</th>\n",
       "      <th>CanMove</th>\n",
       "      <th>IsFriend</th>\n",
       "      <th>CountPiecesComparison</th>\n",
       "      <th>AbsoluteDirections</th>\n",
       "      <th>AdjacentDirection</th>\n",
       "      <th>OrthogonalDirection</th>\n",
       "      <th>RelativeDirections</th>\n",
       "      <th>BackwardLeftDirection</th>\n",
       "      <th>Phase</th>\n",
       "      <th>PieceCount</th>\n",
       "      <th>SpaceEnd</th>\n",
       "      <th>LineEndFrequency</th>\n",
       "      <th>CaptureEnd</th>\n",
       "      <th>EliminatePiecesEnd</th>\n",
       "      <th>EliminatePiecesEndFrequency</th>\n",
       "      <th>EliminatePiecesWin</th>\n",
       "      <th>EliminatePiecesWinFrequency</th>\n",
       "      <th>RaceEnd</th>\n",
       "      <th>ReachEnd</th>\n",
       "      <th>ReachEndFrequency</th>\n",
       "      <th>ScoringEndFrequency</th>\n",
       "      <th>NoMovesEndFrequency</th>\n",
       "      <th>NoMovesWin</th>\n",
       "      <th>DrawFrequency</th>\n",
       "      <th>Misere</th>\n",
       "      <th>DurationActions</th>\n",
       "      <th>DurationMoves</th>\n",
       "      <th>DurationTurns</th>\n",
       "      <th>DurationTurnsStdDev</th>\n",
       "      <th>DurationTurnsNotTimeouts</th>\n",
       "      <th>DecisionMoves</th>\n",
       "      <th>GameTreeComplexity</th>\n",
       "      <th>StateTreeComplexity</th>\n",
       "      <th>BoardCoverageDefault</th>\n",
       "      <th>BoardCoverageUsed</th>\n",
       "      <th>AdvantageP1</th>\n",
       "      <th>Balance</th>\n",
       "      <th>Completion</th>\n",
       "      <th>Drawishness</th>\n",
       "      <th>Timeouts</th>\n",
       "      <th>OutcomeUniformity</th>\n",
       "      <th>BoardSitesOccupiedAverage</th>\n",
       "      <th>BoardSitesOccupiedMedian</th>\n",
       "      <th>BoardSitesOccupiedMaximum</th>\n",
       "      <th>BoardSitesOccupiedVariance</th>\n",
       "      <th>BoardSitesOccupiedChangeSign</th>\n",
       "      <th>BranchingFactorAverage</th>\n",
       "      <th>BranchingFactorMedian</th>\n",
       "      <th>BranchingFactorMaximum</th>\n",
       "      <th>BranchingFactorVariance</th>\n",
       "      <th>BranchingFactorChangeSign</th>\n",
       "      <th>BranchingFactorChangeLineBestFit</th>\n",
       "      <th>BranchingFactorChangeMaxIncrease</th>\n",
       "      <th>BranchingFactorChangeMaxDecrease</th>\n",
       "      <th>DecisionFactorAverage</th>\n",
       "      <th>DecisionFactorMedian</th>\n",
       "      <th>DecisionFactorMaximum</th>\n",
       "      <th>DecisionFactorVariance</th>\n",
       "      <th>DecisionFactorChangeAverage</th>\n",
       "      <th>DecisionFactorChangeSign</th>\n",
       "      <th>DecisionFactorMaxIncrease</th>\n",
       "      <th>DecisionFactorMaxDecrease</th>\n",
       "      <th>PieceNumberAverage</th>\n",
       "      <th>PieceNumberMedian</th>\n",
       "      <th>PieceNumberVariance</th>\n",
       "      <th>PieceNumberChangeSign</th>\n",
       "      <th>PieceNumberMaxIncrease</th>\n",
       "      <th>ScoreDifferenceChangeLineBestFit</th>\n",
       "      <th>Arithmetic</th>\n",
       "      <th>Operations</th>\n",
       "      <th>Comparison</th>\n",
       "      <th>Equal</th>\n",
       "      <th>NotEqual</th>\n",
       "      <th>LesserThanOrEqual</th>\n",
       "      <th>GreaterThanOrEqual</th>\n",
       "      <th>Logic</th>\n",
       "      <th>Disjunction</th>\n",
       "      <th>Union</th>\n",
       "      <th>Intersection</th>\n",
       "      <th>Complement</th>\n",
       "      <th>ConditionalStatement</th>\n",
       "      <th>ControlFlowStatement</th>\n",
       "      <th>AnimalComponent</th>\n",
       "      <th>CheckersComponent</th>\n",
       "      <th>BallComponent</th>\n",
       "      <th>Symbols</th>\n",
       "      <th>Implementation</th>\n",
       "      <th>CopyContext</th>\n",
       "      <th>DoLudeme</th>\n",
       "      <th>PlayoutsPerSecond</th>\n",
       "      <th>MovesPerSecond</th>\n",
       "      <th>utility_agent1</th>\n",
       "      <th>Rules_game</th>\n",
       "      <th>Rules_equipment</th>\n",
       "      <th>Rules_category1</th>\n",
       "      <th>Rules_category2</th>\n",
       "      <th>SELECTION1</th>\n",
       "      <th>EXPLORATION_CONST1</th>\n",
       "      <th>PLAYOUT1</th>\n",
       "      <th>SELECTION2</th>\n",
       "      <th>EXPLORATION_CONST2</th>\n",
       "      <th>PLAYOUT2</th>\n",
       "      <th>PlayoutsPerMoves</th>\n",
       "      <th>AdvantageBalanceRatio</th>\n",
       "      <th>ActionTimeEfficiency</th>\n",
       "      <th>StandardizedTurnsEfficiency</th>\n",
       "      <th>AdvantageTimeImpact</th>\n",
       "      <th>DurationToComplexityRatio</th>\n",
       "      <th>NormalizedGameTreeComplexity</th>\n",
       "      <th>ComplexityBalanceInteraction</th>\n",
       "      <th>OverallComplexity</th>\n",
       "      <th>ComplexityPerPlayout</th>\n",
       "      <th>TurnsNotTimeoutsPerMoves</th>\n",
       "      <th>OutcomeUniformityPerAdvantageP1</th>\n",
       "      <th>row_equal_col</th>\n",
       "      <th>AdvantageP1_EXPLORATION_CONST2_std</th>\n",
       "      <th>AdvantageP1/Balance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00Y</td>\n",
       "      <td>-0.286445</td>\n",
       "      <td>-0.478765</td>\n",
       "      <td>-0.393003</td>\n",
       "      <td>-0.212445</td>\n",
       "      <td>-0.469268</td>\n",
       "      <td>-0.353546</td>\n",
       "      <td>-0.573055</td>\n",
       "      <td>-0.843522</td>\n",
       "      <td>0.788268</td>\n",
       "      <td>-1.185793</td>\n",
       "      <td>-0.082781</td>\n",
       "      <td>1.554276</td>\n",
       "      <td>-0.034426</td>\n",
       "      <td>0.006869</td>\n",
       "      <td>0.247101</td>\n",
       "      <td>-0.142044</td>\n",
       "      <td>-0.807585</td>\n",
       "      <td>-0.816436</td>\n",
       "      <td>-0.102095</td>\n",
       "      <td>-1.399156</td>\n",
       "      <td>-0.583142</td>\n",
       "      <td>-0.75665</td>\n",
       "      <td>-0.75665</td>\n",
       "      <td>-0.481753</td>\n",
       "      <td>-0.430871</td>\n",
       "      <td>2.354288</td>\n",
       "      <td>-1.675194</td>\n",
       "      <td>-1.02082</td>\n",
       "      <td>-0.930762</td>\n",
       "      <td>-0.91994</td>\n",
       "      <td>-0.238832</td>\n",
       "      <td>-0.37138</td>\n",
       "      <td>-0.523012</td>\n",
       "      <td>-0.430199</td>\n",
       "      <td>-0.469525</td>\n",
       "      <td>-0.263438</td>\n",
       "      <td>-0.454074</td>\n",
       "      <td>-0.392859</td>\n",
       "      <td>1.420811</td>\n",
       "      <td>1.058371</td>\n",
       "      <td>1.082215</td>\n",
       "      <td>-0.241687</td>\n",
       "      <td>3.606659</td>\n",
       "      <td>-0.418619</td>\n",
       "      <td>0.938151</td>\n",
       "      <td>-0.356196</td>\n",
       "      <td>0.839612</td>\n",
       "      <td>3.156795</td>\n",
       "      <td>-0.526653</td>\n",
       "      <td>2.344668</td>\n",
       "      <td>-0.456347</td>\n",
       "      <td>2.551013</td>\n",
       "      <td>0.646081</td>\n",
       "      <td>0.966723</td>\n",
       "      <td>1.639603</td>\n",
       "      <td>-0.449404</td>\n",
       "      <td>-0.133666</td>\n",
       "      <td>-0.736289</td>\n",
       "      <td>-0.880304</td>\n",
       "      <td>2.79129</td>\n",
       "      <td>-0.257852</td>\n",
       "      <td>-0.676395</td>\n",
       "      <td>-0.559875</td>\n",
       "      <td>-0.436797</td>\n",
       "      <td>-0.417558</td>\n",
       "      <td>-0.379477</td>\n",
       "      <td>-0.319407</td>\n",
       "      <td>-0.194028</td>\n",
       "      <td>-0.171232</td>\n",
       "      <td>-0.300781</td>\n",
       "      <td>-0.399288</td>\n",
       "      <td>-0.446009</td>\n",
       "      <td>0.069933</td>\n",
       "      <td>3.98147</td>\n",
       "      <td>-0.278005</td>\n",
       "      <td>-0.495506</td>\n",
       "      <td>-0.643292</td>\n",
       "      <td>-0.675117</td>\n",
       "      <td>-0.689881</td>\n",
       "      <td>0.58311</td>\n",
       "      <td>-0.474099</td>\n",
       "      <td>-0.215316</td>\n",
       "      <td>0.181693</td>\n",
       "      <td>0.39596</td>\n",
       "      <td>-0.061565</td>\n",
       "      <td>0.517643</td>\n",
       "      <td>0.499738</td>\n",
       "      <td>-0.498602</td>\n",
       "      <td>-0.394526</td>\n",
       "      <td>-0.817741</td>\n",
       "      <td>0.515828</td>\n",
       "      <td>0.521019</td>\n",
       "      <td>1.051193</td>\n",
       "      <td>1.844571</td>\n",
       "      <td>1.579428</td>\n",
       "      <td>-0.047725</td>\n",
       "      <td>-0.065192</td>\n",
       "      <td>-0.032915</td>\n",
       "      <td>-0.039115</td>\n",
       "      <td>-1.282755</td>\n",
       "      <td>-0.025006</td>\n",
       "      <td>0.131685</td>\n",
       "      <td>0.002096</td>\n",
       "      <td>-0.059428</td>\n",
       "      <td>-0.078028</td>\n",
       "      <td>-0.032906</td>\n",
       "      <td>-0.039063</td>\n",
       "      <td>-0.010805</td>\n",
       "      <td>-1.225682</td>\n",
       "      <td>0.149085</td>\n",
       "      <td>-0.000122</td>\n",
       "      <td>0.020096</td>\n",
       "      <td>0.04864</td>\n",
       "      <td>-0.035448</td>\n",
       "      <td>1.524477</td>\n",
       "      <td>0.108699</td>\n",
       "      <td>-0.028408</td>\n",
       "      <td>0.428896</td>\n",
       "      <td>1.252864</td>\n",
       "      <td>0.452405</td>\n",
       "      <td>0.704456</td>\n",
       "      <td>-0.547621</td>\n",
       "      <td>-0.42491</td>\n",
       "      <td>-0.438261</td>\n",
       "      <td>0.6288</td>\n",
       "      <td>1.315434</td>\n",
       "      <td>0.785968</td>\n",
       "      <td>-0.446506</td>\n",
       "      <td>-0.590444</td>\n",
       "      <td>0.744493</td>\n",
       "      <td>0.513252</td>\n",
       "      <td>-0.483684</td>\n",
       "      <td>3.728172</td>\n",
       "      <td>-0.226232</td>\n",
       "      <td>-0.296951</td>\n",
       "      <td>0.218114</td>\n",
       "      <td>-0.872977</td>\n",
       "      <td>-0.608406</td>\n",
       "      <td>-0.268394</td>\n",
       "      <td>-0.781615</td>\n",
       "      <td>-0.466667</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.115411</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.19288</td>\n",
       "      <td>1</td>\n",
       "      <td>0.157387</td>\n",
       "      <td>-0.192069</td>\n",
       "      <td>-0.065498</td>\n",
       "      <td>-0.882007</td>\n",
       "      <td>-0.196009</td>\n",
       "      <td>-0.267733</td>\n",
       "      <td>-0.398856</td>\n",
       "      <td>-0.415451</td>\n",
       "      <td>-0.495397</td>\n",
       "      <td>-0.077533</td>\n",
       "      <td>-0.106116</td>\n",
       "      <td>-0.162188</td>\n",
       "      <td>0.896761</td>\n",
       "      <td>0.972553</td>\n",
       "      <td>-0.192069</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  GameRulesetName  Stochastic  Asymmetric  PlayersWithDirections  \\\n",
       "0             00Y   -0.286445   -0.478765              -0.393003   \n",
       "\n",
       "   AlquerqueTiling  MancalaBoard  MancalaTwoRows     Track    Region  \\\n",
       "0        -0.212445     -0.469268       -0.353546 -0.573055 -0.843522   \n",
       "\n",
       "     Vertex      Cell  NumPlayableSitesOnBoard  NumOrthogonalDirections  \\\n",
       "0  0.788268 -1.185793                -0.082781                 1.554276   \n",
       "\n",
       "   NumInnerSites  NumEdges  NumCells  NumVertices      Hand  NumContainers  \\\n",
       "0      -0.034426  0.006869  0.247101    -0.142044 -0.807585      -0.816436   \n",
       "\n",
       "       Tile  PiecesPlacedOnBoard  PiecesPlacedOutsideBoard  \\\n",
       "0 -0.102095            -1.399156                 -0.583142   \n",
       "\n",
       "   NumStartComponentsBoard  NumStartComponentsBoardPerPlayer  NoSiteMoves  \\\n",
       "0                 -0.75665                          -0.75665    -0.481753   \n",
       "\n",
       "   PassDecision  AddDecision  TwoSitesMoves  StepDecision  \\\n",
       "0     -0.430871     2.354288      -1.675194      -1.02082   \n",
       "\n",
       "   StepDecisionFrequency  StepDecisionToEmptyFrequency  SlideDecisionToEmpty  \\\n",
       "0              -0.930762                      -0.91994             -0.238832   \n",
       "\n",
       "   SlideDecisionToEmptyFrequency  HopDecision  HopDecisionEnemyToEmpty  \\\n",
       "0                       -0.37138    -0.523012                -0.430199   \n",
       "\n",
       "   FromToDecisionEmptyFrequency  AddEffect  SowFrequency  SowCaptureFrequency  \\\n",
       "0                     -0.469525  -0.263438     -0.454074            -0.392859   \n",
       "\n",
       "   RemoveEffectFrequency   SetMove  MoveAgain  HopEffect  Priority  \\\n",
       "0               1.420811  1.058371   1.082215  -0.241687  3.606659   \n",
       "\n",
       "   HopCapture  SpaceConditions      Line  MoveConditions  NoMovesMover  \\\n",
       "0   -0.418619         0.938151 -0.356196        0.839612      3.156795   \n",
       "\n",
       "   NoMovesNext   CanMove  IsFriend  CountPiecesComparison  AbsoluteDirections  \\\n",
       "0    -0.526653  2.344668 -0.456347               2.551013            0.646081   \n",
       "\n",
       "   AdjacentDirection  OrthogonalDirection  RelativeDirections  \\\n",
       "0           0.966723             1.639603           -0.449404   \n",
       "\n",
       "   BackwardLeftDirection     Phase  PieceCount  SpaceEnd  LineEndFrequency  \\\n",
       "0              -0.133666 -0.736289   -0.880304   2.79129         -0.257852   \n",
       "\n",
       "   CaptureEnd  EliminatePiecesEnd  EliminatePiecesEndFrequency  \\\n",
       "0   -0.676395           -0.559875                    -0.436797   \n",
       "\n",
       "   EliminatePiecesWin  EliminatePiecesWinFrequency   RaceEnd  ReachEnd  \\\n",
       "0           -0.417558                    -0.379477 -0.319407 -0.194028   \n",
       "\n",
       "   ReachEndFrequency  ScoringEndFrequency  NoMovesEndFrequency  NoMovesWin  \\\n",
       "0          -0.171232            -0.300781            -0.399288   -0.446009   \n",
       "\n",
       "   DrawFrequency   Misere  DurationActions  DurationMoves  DurationTurns  \\\n",
       "0       0.069933  3.98147        -0.278005      -0.495506      -0.643292   \n",
       "\n",
       "   DurationTurnsStdDev  DurationTurnsNotTimeouts  DecisionMoves  \\\n",
       "0            -0.675117                 -0.689881        0.58311   \n",
       "\n",
       "   GameTreeComplexity  StateTreeComplexity  BoardCoverageDefault  \\\n",
       "0           -0.474099            -0.215316              0.181693   \n",
       "\n",
       "   BoardCoverageUsed  AdvantageP1   Balance  Completion  Drawishness  \\\n",
       "0            0.39596    -0.061565  0.517643    0.499738    -0.498602   \n",
       "\n",
       "   Timeouts  OutcomeUniformity  BoardSitesOccupiedAverage  \\\n",
       "0 -0.394526          -0.817741                   0.515828   \n",
       "\n",
       "   BoardSitesOccupiedMedian  BoardSitesOccupiedMaximum  \\\n",
       "0                  0.521019                   1.051193   \n",
       "\n",
       "   BoardSitesOccupiedVariance  BoardSitesOccupiedChangeSign  \\\n",
       "0                    1.844571                      1.579428   \n",
       "\n",
       "   BranchingFactorAverage  BranchingFactorMedian  BranchingFactorMaximum  \\\n",
       "0               -0.047725              -0.065192               -0.032915   \n",
       "\n",
       "   BranchingFactorVariance  BranchingFactorChangeSign  \\\n",
       "0                -0.039115                  -1.282755   \n",
       "\n",
       "   BranchingFactorChangeLineBestFit  BranchingFactorChangeMaxIncrease  \\\n",
       "0                         -0.025006                          0.131685   \n",
       "\n",
       "   BranchingFactorChangeMaxDecrease  DecisionFactorAverage  \\\n",
       "0                          0.002096              -0.059428   \n",
       "\n",
       "   DecisionFactorMedian  DecisionFactorMaximum  DecisionFactorVariance  \\\n",
       "0             -0.078028              -0.032906               -0.039063   \n",
       "\n",
       "   DecisionFactorChangeAverage  DecisionFactorChangeSign  \\\n",
       "0                    -0.010805                 -1.225682   \n",
       "\n",
       "   DecisionFactorMaxIncrease  DecisionFactorMaxDecrease  PieceNumberAverage  \\\n",
       "0                   0.149085                  -0.000122            0.020096   \n",
       "\n",
       "   PieceNumberMedian  PieceNumberVariance  PieceNumberChangeSign  \\\n",
       "0            0.04864            -0.035448               1.524477   \n",
       "\n",
       "   PieceNumberMaxIncrease  ScoreDifferenceChangeLineBestFit  Arithmetic  \\\n",
       "0                0.108699                         -0.028408    0.428896   \n",
       "\n",
       "   Operations  Comparison     Equal  NotEqual  LesserThanOrEqual  \\\n",
       "0    1.252864    0.452405  0.704456 -0.547621           -0.42491   \n",
       "\n",
       "   GreaterThanOrEqual   Logic  Disjunction     Union  Intersection  \\\n",
       "0           -0.438261  0.6288     1.315434  0.785968     -0.446506   \n",
       "\n",
       "   Complement  ConditionalStatement  ControlFlowStatement  AnimalComponent  \\\n",
       "0   -0.590444              0.744493              0.513252        -0.483684   \n",
       "\n",
       "   CheckersComponent  BallComponent   Symbols  Implementation  CopyContext  \\\n",
       "0           3.728172      -0.226232 -0.296951        0.218114    -0.872977   \n",
       "\n",
       "   DoLudeme  PlayoutsPerSecond  MovesPerSecond  utility_agent1 Rules_game  \\\n",
       "0 -0.608406          -0.268394       -0.781615       -0.466667          0   \n",
       "\n",
       "  Rules_equipment Rules_category1 Rules_category2 SELECTION1  \\\n",
       "0               1               1               1          0   \n",
       "\n",
       "   EXPLORATION_CONST1 PLAYOUT1 SELECTION2  EXPLORATION_CONST2 PLAYOUT2  \\\n",
       "0           -1.115411        1          0            -0.19288        1   \n",
       "\n",
       "   PlayoutsPerMoves  AdvantageBalanceRatio  ActionTimeEfficiency  \\\n",
       "0          0.157387              -0.192069             -0.065498   \n",
       "\n",
       "   StandardizedTurnsEfficiency  AdvantageTimeImpact  \\\n",
       "0                    -0.882007            -0.196009   \n",
       "\n",
       "   DurationToComplexityRatio  NormalizedGameTreeComplexity  \\\n",
       "0                  -0.267733                     -0.398856   \n",
       "\n",
       "   ComplexityBalanceInteraction  OverallComplexity  ComplexityPerPlayout  \\\n",
       "0                     -0.415451          -0.495397             -0.077533   \n",
       "\n",
       "   TurnsNotTimeoutsPerMoves  OutcomeUniformityPerAdvantageP1  row_equal_col  \\\n",
       "0                 -0.106116                        -0.162188       0.896761   \n",
       "\n",
       "   AdvantageP1_EXPLORATION_CONST2_std  AdvantageP1/Balance  \n",
       "0                            0.972553            -0.192069  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rules_equipment</th>\n",
       "      <th>Rules_game</th>\n",
       "      <th>Rules_category1</th>\n",
       "      <th>Rules_category2</th>\n",
       "      <th>SELECTION1</th>\n",
       "      <th>PLAYOUT1</th>\n",
       "      <th>SELECTION2</th>\n",
       "      <th>PLAYOUT2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Rules_equipment Rules_game Rules_category1 Rules_category2 SELECTION1  \\\n",
       "0               1          0               1               1          0   \n",
       "\n",
       "  PLAYOUT1 SELECTION2 PLAYOUT2  \n",
       "0        1          0        1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train = fe.clean(train)\n",
    "\n",
    "print(f'Shape: {train.shape}')\n",
    "print('Memory usage: {:.2f} MB\\n'.format(train.memory_usage(index=True).sum() / 1024**2))\n",
    "display(train.head(1))\n",
    "display(train[CFG.categoricals].head(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0a95bd99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:50.671848Z",
     "iopub.status.busy": "2024-10-28T02:19:50.671303Z",
     "iopub.status.idle": "2024-10-28T02:19:50.679711Z",
     "shell.execute_reply": "2024-10-28T02:19:50.678364Z"
    },
    "papermill": {
     "duration": 0.04066,
     "end_time": "2024-10-28T02:19:50.682331",
     "exception": false,
     "start_time": "2024-10-28T02:19:50.641671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tfid : 0 : []\n",
      "**********************************************************************\n",
      "Rules : 4 : ['Rules_game', 'Rules_equipment', 'Rules_category1', 'Rules_category2']\n",
      "**********************************************************************\n",
      "labels_kmeans_ : 0 : []\n",
      "**********************************************************************\n"
     ]
    }
   ],
   "source": [
    "l_cols = list(train.columns)\n",
    "\n",
    "for col in ['tfid', \"Rules\", \"labels_kmeans_\"]:\n",
    "    l = [x for x in l_cols if col in x[:len(col)]]\n",
    "    print(f'{col} : {len(l)} : {l}')\n",
    "    print('*' * 70)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "effb7387",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:50.739357Z",
     "iopub.status.busy": "2024-10-28T02:19:50.738841Z",
     "iopub.status.idle": "2024-10-28T02:19:51.468776Z",
     "shell.execute_reply": "2024-10-28T02:19:51.467574Z"
    },
    "papermill": {
     "duration": 0.761443,
     "end_time": "2024-10-28T02:19:51.471557",
     "exception": false,
     "start_time": "2024-10-28T02:19:50.710114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n",
      "[]\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "new_cols_drop = [col for col in train.columns if train[col].isnull().sum() == train.shape[0]]\n",
    "print(new_cols_drop)\n",
    "new_cols_drop = [col for col in train.columns if train[col].isna().sum() == train.shape[0]]\n",
    "print(new_cols_drop)\n",
    "new_cols_drop = [col for col in train.columns if train[col].nunique() == 1]\n",
    "print(new_cols_drop)\n",
    "\n",
    "# duplicateColumnNames = set()\n",
    "# for x in range(train.shape[1]):\n",
    "#     for y in range(x + 1, train.shape[1]):\n",
    "#         if train.iloc[:, x].equals(train.iloc[:, y]):\n",
    "#             duplicateColumnNames.add(train.columns[y])\n",
    "# print(list(duplicateColumnNames))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1a4eb13",
   "metadata": {
    "papermill": {
     "duration": 0.089406,
     "end_time": "2024-10-28T02:19:51.589244",
     "exception": false,
     "start_time": "2024-10-28T02:19:51.499838",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9062a4cd",
   "metadata": {
    "papermill": {
     "duration": 0.029117,
     "end_time": "2024-10-28T02:19:51.645478",
     "exception": false,
     "start_time": "2024-10-28T02:19:51.616361",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Learning Rate Scheduler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ae39ffca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:51.704424Z",
     "iopub.status.busy": "2024-10-28T02:19:51.703958Z",
     "iopub.status.idle": "2024-10-28T02:19:52.130064Z",
     "shell.execute_reply": "2024-10-28T02:19:52.128903Z"
    },
    "papermill": {
     "duration": 0.458995,
     "end_time": "2024-10-28T02:19:52.133042",
     "exception": false,
     "start_time": "2024-10-28T02:19:51.674047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate schedule: 1e-05 to 0.01 to 7.58e-12\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def lrfn(epoch):\n",
    "    if epoch < CFG.nn.lr_rampup:\n",
    "        lr = (CFG.nn.lr_max - CFG.nn.lr_start) / CFG.nn.lr_rampup * epoch + CFG.nn.lr_start\n",
    "    elif epoch < CFG.nn.lr_rampup + CFG.nn.lr_sustain:\n",
    "        lr = CFG.nn.lr_max\n",
    "    else:\n",
    "        lr = CFG.nn.lr_max * CFG.nn.lr_decay **((epoch - CFG.nn.lr_rampup -  CFG.nn.lr_sustain)//2)\n",
    "    return lr\n",
    "\n",
    "rng = [i for i in range(CFG.nn.epochs)]\n",
    "lr_y = [lrfn(x) for x in rng]\n",
    "plt.figure(figsize=(10, 4))\n",
    "plt.plot(rng, lr_y, '-o')\n",
    "print(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(lr_y[0], max(lr_y), lr_y[-1]))\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Learning Rate\")\n",
    "plt.title(\"Learning Rate Schedule\")\n",
    "plt.show()\n",
    "\n",
    "lr_callback = tensorflow.keras.callbacks.LearningRateScheduler(lrfn, verbose = False)\n",
    "es_callback = tensorflow.keras.callbacks.EarlyStopping (monitor = 'val_root_mean_squared_error', patience = 10, verbose = 1, restore_best_weights=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84944946",
   "metadata": {
    "papermill": {
     "duration": 0.027204,
     "end_time": "2024-10-28T02:19:52.188327",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.161123",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Custom Loss/Metric LGBM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bc223336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:52.246292Z",
     "iopub.status.busy": "2024-10-28T02:19:52.245121Z",
     "iopub.status.idle": "2024-10-28T02:19:52.254180Z",
     "shell.execute_reply": "2024-10-28T02:19:52.252796Z"
    },
    "papermill": {
     "duration": 0.041,
     "end_time": "2024-10-28T02:19:52.256998",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.215998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def round_pred(number):\n",
    "    return min(list_rounding, key=lambda x:abs(x- number))\n",
    "\n",
    "def objective_ls(y_true, y_pred):\n",
    "    pred = np.apply_along_axis(round_pred, 1, y_pred.reshape(-1,1))\n",
    "    grad = (y_pred - y_true)\n",
    "    hess = np.ones(len(y_true))\n",
    "    return grad, hess\n",
    "\n",
    "def mse(y_true, y_pred):\n",
    "    pred = np.apply_along_axis(round_pred, 1, y_pred.reshape(-1,1))\n",
    "    return 'custom MSE', np.sqrt(mean_squared_error(y_true, pred)), False"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26f2a790",
   "metadata": {
    "papermill": {
     "duration": 0.027754,
     "end_time": "2024-10-28T02:19:52.316630",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.288876",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Custom Loss/Metric Catboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6c3d6bae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:52.374467Z",
     "iopub.status.busy": "2024-10-28T02:19:52.374010Z",
     "iopub.status.idle": "2024-10-28T02:19:52.388812Z",
     "shell.execute_reply": "2024-10-28T02:19:52.387285Z"
    },
    "papermill": {
     "duration": 0.047365,
     "end_time": "2024-10-28T02:19:52.391629",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.344264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class RmseObjective(object):\n",
    "    def calc_ders_range(self, approxes, targets, weights):\n",
    "        assert len(approxes) == len(targets)\n",
    "        if weights is not None:\n",
    "            assert len(weights) == len(approxes)\n",
    "        result = []\n",
    "        for index in range(len(targets)):\n",
    "            #der1 = targets[index] - approxes[index]\n",
    "            der1 = targets[index] - min(list_rounding, key=lambda x:abs(x-approxes[index]))\n",
    "            der2 = -1\n",
    "            if weights is not None:\n",
    "                der1 *= weights[index]\n",
    "                der2 *= weights[index]\n",
    "            result.append((der1, der2))\n",
    "        return result\n",
    "    \n",
    "    \n",
    "class RmseMetric(object):\n",
    "    def get_final_error(self, error, weight):\n",
    "        return np.sqrt(error / (weight + 1e-38))\n",
    "\n",
    "    def is_max_optimal(self):\n",
    "        return False\n",
    "\n",
    "    def evaluate(self, approxes, target, weight):\n",
    "        assert len(approxes) == 1\n",
    "        assert len(target) == len(approxes[0])\n",
    "        approx = approxes[0]\n",
    "        error_sum = 0.0\n",
    "        weight_sum = 0.0\n",
    "        for i in range(len(approx)):\n",
    "            w = 1.0 if weight is None else weight[i]\n",
    "            weight_sum += w\n",
    "            #error_sum += w * ((approx[i] - target[i])**2)\n",
    "            error_sum += w * (( min(list_rounding, key=lambda x:abs(x-approx[i])) - target[i])**2)\n",
    "        return error_sum, weight_sum\n",
    "    \n",
    "# CFG.lgbm.metric = mse\n",
    "# CFG.lgbm.eval_metric = mse\n",
    "# CFG.catboost.loss_function = RmseObjective()\n",
    "# CFG.catboost.eval_metric = RmseMetric()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f72ae98e",
   "metadata": {
    "papermill": {
     "duration": 0.027955,
     "end_time": "2024-10-28T02:19:52.447240",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.419285",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Class Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e1c2f16c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:52.524691Z",
     "iopub.status.busy": "2024-10-28T02:19:52.524191Z",
     "iopub.status.idle": "2024-10-28T02:19:52.562828Z",
     "shell.execute_reply": "2024-10-28T02:19:52.561556Z"
    },
    "papermill": {
     "duration": 0.081249,
     "end_time": "2024-10-28T02:19:52.565622",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.484373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class model(abc.ABC) :\n",
    "    def __init__(self, name, params):\n",
    "        self.name = name\n",
    "        if params is None : self.params = CFG[self.name]\n",
    "        else: self.params = params\n",
    "        print(f'Create model : {self.name}')\n",
    "        print(f'Params: {self.params}')\n",
    "    \n",
    "    def load(self, fold) :\n",
    "        self.model = joblib.load(CFG.load_path + f'/{fold}_{self.name}_model')\n",
    "        \n",
    "    def save(self, fold) :\n",
    "        joblib.dump(self.model, f'{fold}_{self.name}_model')\n",
    "    \n",
    "    @abc.abstractmethod\n",
    "    def fit(self, fold, X_train, X_valid, y_train, y_valid) :\n",
    "        pass\n",
    "    \n",
    "    def predict(self, df) :\n",
    "        return self.model.predict(df[cols[self.name].features])\n",
    "    \n",
    "    def get_feature_importance(self) :\n",
    "        return dict(zip(cols[self.name].features, self.model.feature_importances_))\n",
    "    \n",
    "class model_nn(model) :\n",
    "    def __init__(self, name, params):\n",
    "        super().__init__(name, params)\n",
    "        x_input_cats = tensorflow.keras.layers.Input(shape=(len(cols[self.name].categoricals),))\n",
    "        embs = []\n",
    "        for j, col in enumerate(cols.nn.categoricals):\n",
    "            e = tensorflow.keras.layers.Embedding(cols[col].cat_size, cols[col].cat_emb)\n",
    "            x = e(x_input_cats[:,j])\n",
    "            x = tensorflow.keras.layers.Flatten()(x)\n",
    "            embs.append(x)\n",
    "\n",
    "        # NUMERICAL FEATURES\n",
    "        x_input_nums = tensorflow.keras.layers.Input(shape=(len(cols[self.name].numericals),))\n",
    "\n",
    "        # COMBINE\n",
    "        x = tensorflow.keras.layers.Concatenate(axis=-1)(embs+[x_input_nums]) \n",
    "        x = tensorflow.keras.layers.Dense(256, activation='relu')(x)\n",
    "        x = tensorflow.keras.layers.Dense(256, activation='relu')(x)\n",
    "        x = tensorflow.keras.layers.Dense(256, activation='relu')(x)\n",
    "        x = tensorflow.keras.layers.Dense(1, activation='linear')(x)\n",
    "\n",
    "        self.model = tensorflow.keras.models.Model(inputs=[x_input_cats, x_input_nums], outputs=x)\n",
    "        self.model.compile(optimizer=tensorflow.keras.optimizers.Adam(0.001), \n",
    "                           loss=\"mean_squared_error\", \n",
    "                           metrics=[tensorflow.keras.metrics.RootMeanSquaredError()])\n",
    "    \n",
    "    def fit(self, fold, X_train, X_valid, y_train, y_valid) :\n",
    "        self.model.fit([X_train[cols[self.name].categoricals].astype(int).values, X_train[cols[self.name].numericals].values], \n",
    "                       y_train, \n",
    "                       validation_data = ([X_valid[cols[self.name].categoricals].astype(int).values, X_valid[cols[self.name].numericals].values], y_valid), \n",
    "                       callbacks = [lr_callback, es_callback], \n",
    "                       batch_size=64, epochs=self.params.epochs, verbose=2)\n",
    "        \n",
    "    def predict(self, df) :\n",
    "        return self.model.predict([df[cols[self.name].categoricals].astype(int).values, df[cols[self.name].numericals].values], verbose = 0).flatten()\n",
    "        \n",
    "    def get_feature_importance(self) :\n",
    "        col_names = []\n",
    "        for col in cols[self.name].categoricals :\n",
    "            for i in range(cols[col].cat_emb) :\n",
    "                col_names.append(f'{col}_{i}')\n",
    "\n",
    "        self = md.models['nn'][0]\n",
    "        for idx, layer in enumerate(self.model.layers) :\n",
    "            if 'concatenate' in layer.name :\n",
    "                break\n",
    "        weights = np.abs(self.model.layers[idx+1].get_weights()[0][:,0])     \n",
    "        return dict(zip(col_names + cols[self.name].numericals, weights))\n",
    "    \n",
    "class model_lgbm(model) :\n",
    "    def __init__(self, name, params):\n",
    "        super().__init__(name, params)\n",
    "        self.model = lightgbm.LGBMRegressor(**self.params)\n",
    "    \n",
    "    def fit(self, fold, X_train, X_valid, y_train, y_valid) :\n",
    "        self.model.fit(X_train[cols[self.name].features], y_train, \n",
    "                        eval_set=[(X_valid[cols[self.name].features], y_valid)],                  \n",
    "                        categorical_feature = cols[self.name].categoricals,\n",
    "                        callbacks=[lightgbm.early_stopping(CFG.early_stop, verbose=1), \n",
    "                                  lightgbm.log_evaluation(100)])\n",
    "\n",
    "                \n",
    "class model_catboost(model) :\n",
    "    def __init__(self, name, params):\n",
    "        super().__init__(name, params)\n",
    "        self.model = catboost.CatBoostRegressor(**self.params)\n",
    "    \n",
    "    def fit(self, fold, X_train, X_valid, y_train, y_valid) :\n",
    "        self.model.fit(X_train[cols[self.name].features], y_train,\n",
    "                        eval_set=[(X_valid[cols[self.name].features], y_valid)],\n",
    "                        cat_features = cols[self.name].categoricals,\n",
    "                        early_stopping_rounds = CFG.early_stop,\n",
    "                        verbose = 100)\n",
    "\n",
    "## Factory\n",
    "class Model_Factory() :\n",
    "    def get_model(name, params = None):\n",
    "        if name == \"lgbm\":\n",
    "            return model_lgbm(name, params) \n",
    "        elif name == \"catboost\":\n",
    "            return model_catboost(name, params) \n",
    "        elif name == \"nn\":\n",
    "            return model_nn(name, params) \n",
    "        else:\n",
    "            raise TypeError(\"Specify a valid name model\") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2edd7aa",
   "metadata": {
    "papermill": {
     "duration": 0.02803,
     "end_time": "2024-10-28T02:19:52.621763",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.593733",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Training loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d1894264",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:52.683668Z",
     "iopub.status.busy": "2024-10-28T02:19:52.683200Z",
     "iopub.status.idle": "2024-10-28T02:19:52.710728Z",
     "shell.execute_reply": "2024-10-28T02:19:52.709540Z"
    },
    "papermill": {
     "duration": 0.059844,
     "end_time": "2024-10-28T02:19:52.713550",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.653706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MD:\n",
    "    def __init__(self):\n",
    "        self.models = collections.defaultdict(list)\n",
    "        self.models_scores = collections.defaultdict(list)\n",
    "        self.oof_preds_scores = []\n",
    "\n",
    "    def get_trained_model(self, name, fold, X_train, X_valid, y_train, y_valid) :\n",
    "        model = Model_Factory.get_model(name)\n",
    "        if CFG.load :\n",
    "            model.load(fold)\n",
    "        else :\n",
    "            model.fit(fold, X_train, X_valid, y_train, y_valid)\n",
    "        return model\n",
    "        \n",
    "    def train(self): \n",
    "        print('*' * 70)\n",
    "        print(f\"{'*' * 30} TRAINING {'*' * 30}\"[:70])\n",
    "        print('*' * 70)    \n",
    "        X = train[cols.categoricals + cols.numericals]\n",
    "        y = train[CFG.target_col]\n",
    "\n",
    "        self.oof_preds = np.zeros(len(y))\n",
    "        self.models_preds = np.zeros((len(y), len(CFG.l_models)))\n",
    "        for fold in range(CFG.n_splits):\n",
    "            print(f\"{'*' * 30} FOLD : {fold} {'*' * 30}\"[:70])\n",
    "            train_index, valid_index = fld.get_index(fold)\n",
    "\n",
    "            X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n",
    "            y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n",
    "\n",
    "            for name in CFG.l_models :\n",
    "                print(f\"{'*' * 30} MODEL : {name} {'*' * 30}\"[:70])\n",
    "                model = self.get_trained_model(name, fold, X_train, X_valid, y_train, y_valid) \n",
    "                model.save(fold)\n",
    "                self.models[name].append(model)\n",
    "                self.models_preds[valid_index, CFG.l_models.index(name)] = pred = model.predict(X_valid)\n",
    "                self.models_scores[name].append(np.sqrt(mean_squared_error(y_valid, pred)))\n",
    "\n",
    "            self.oof_preds[valid_index] = pred = (CFG.weights * self.models_preds[valid_index,:]).sum(axis=1)\n",
    "            self.oof_preds_scores.append(np.sqrt(mean_squared_error(y_valid, pred)))\n",
    "\n",
    "        \n",
    "        print('*' * 70)\n",
    "        print(f\"{'*' * 30} OOF RESULTS {'*' * 30}\"[:70])\n",
    "        print('*' * 70)\n",
    "        for i, name in enumerate(CFG.l_models) :\n",
    "            print(f\"{name} OOF scores :{np.sqrt(mean_squared_error(y, self.models_preds[:,i])):.5f}\")\n",
    "            print(f\"{name} mean all scores :{np.mean(self.models_scores[name]):.5f}, std all scores :{np.std(self.models_scores[name]):.5f}, Scores : {self.models_scores[name]}.\")\n",
    "            self.print_feature_importances(name)\n",
    "        print(f\"oof_preds mean scores :{np.mean(self.oof_preds_scores):.5f}, std scores :{np.std(self.oof_preds_scores):.5f}, Scores : {self.oof_preds_scores}.\")\n",
    "            \n",
    "    def infer(self, df):\n",
    "        self.models_preds = np.zeros((len(df), len(CFG.l_models))) \n",
    "        for i, name in enumerate(CFG.l_models) :\n",
    "            self.models_preds[:, CFG.l_models.index(name)] = np.mean([model.predict(df[cols[name].features]) for model in self.models[name]], axis = 0)\n",
    "        return (CFG.weights * self.models_preds).sum(axis = 1)\n",
    "    \n",
    "    def print_feature_importances(self, name) :\n",
    "        print('*' * 70)\n",
    "        print(f\"{'*' * 30}  FEATURES IMPORTANCE {'*' * 30}\"[:70])\n",
    "        print('*' * 70)\n",
    "        for i, model in enumerate(self.models[name]) :\n",
    "            if i == 0 : feature_importances = np.array(list(model.get_feature_importance().values()))\n",
    "            else : feature_importances += list(model.get_feature_importance().values())\n",
    "        feature_importances = pd.Series(feature_importances, index = list(model.get_feature_importance().keys())).sort_values(ascending=True)\n",
    "\n",
    "        print(f\"{name}_feature_importances les moins importantes: \", list(feature_importances[:20].index))\n",
    "        print(f\"{name}_feature_importances les plus importantes: \", list(feature_importances[-20:].index))\n",
    "        \n",
    "        CFG.l_permutation_importance = list(feature_importances[:40].index)\n",
    "        plt.figure(figsize=(20, 8))\n",
    "        sns.barplot(y = feature_importances[-20:].index, x = feature_importances[-20:].values, orient=\"h\")\n",
    "        plt.show()\n",
    "            \n",
    "md = MD()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "920b05eb",
   "metadata": {
    "papermill": {
     "duration": 0.028088,
     "end_time": "2024-10-28T02:19:52.770530",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.742442",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Weight Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c4d94738",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:52.828574Z",
     "iopub.status.busy": "2024-10-28T02:19:52.828066Z",
     "iopub.status.idle": "2024-10-28T02:19:52.838945Z",
     "shell.execute_reply": "2024-10-28T02:19:52.837878Z"
    },
    "papermill": {
     "duration": 0.042579,
     "end_time": "2024-10-28T02:19:52.841342",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.798763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def weight_search_func() : \n",
    "    print('*' * 70)\n",
    "    print(f\"{'*' * 30} WEIGHT SEARCH {'*' * 30}\"[:70])\n",
    "    print('*' * 70)\n",
    "    pred_values = md.models_preds\n",
    "    true_values = train[CFG.target_col].values\n",
    "\n",
    "    lr = LinearRegression(fit_intercept = False, positive = True)\n",
    "    lr.fit(pred_values, true_values)\n",
    "    \n",
    "    print(f\"CFG.weights before : {CFG.weights}\")\n",
    "    weights = lr.coef_/lr.coef_.sum()\n",
    "    dic_weight = dict((model,weights[i]) for i, model in enumerate(CFG.l_models))\n",
    "    print(f\"CFG.weights after : {weights}\")\n",
    "\n",
    "    pred_values_weighted = (pred_values * weights).sum(axis=1)\n",
    "    pred_values_mean = (pred_values).mean(axis=1)\n",
    "\n",
    "    rmse_score_weighted = np.sqrt(mean_squared_error(pred_values_weighted , true_values))\n",
    "    rmse_score_mean = np.sqrt(mean_squared_error(pred_values_mean, true_values))\n",
    "\n",
    "    print(f\"RMSE MEAN : {rmse_score_mean}\")\n",
    "    print(f\"RMSE WEIGTHED : {rmse_score_weighted}\")\n",
    "    print(f\"dic_weight : {dic_weight}\")\n",
    "    \n",
    "    return weights"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fb06bf9",
   "metadata": {
    "papermill": {
     "duration": 0.028503,
     "end_time": "2024-10-28T02:19:52.897772",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.869269",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Optuna Optimization Hyperparameters Tunning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "fec058cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:52.954614Z",
     "iopub.status.busy": "2024-10-28T02:19:52.954112Z",
     "iopub.status.idle": "2024-10-28T02:19:52.973018Z",
     "shell.execute_reply": "2024-10-28T02:19:52.971563Z"
    },
    "papermill": {
     "duration": 0.050194,
     "end_time": "2024-10-28T02:19:52.975489",
     "exception": false,
     "start_time": "2024-10-28T02:19:52.925295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "opt = dotdict(dict)\n",
    "opt.n_trials = CFG.optuna_n_trials\n",
    "opt.direction = 'minimize' \n",
    "\n",
    "def run_optimization(objective, n_trials = opt.n_trials , n_jobs = 1):\n",
    "    optuna.logging.set_verbosity(optuna.logging.WARNING)\n",
    "    study = optuna.create_study(direction = opt.direction)\n",
    "    study.optimize(objective, n_trials = n_trials, n_jobs = n_jobs, show_progress_bar = False)\n",
    "    return study\n",
    "\n",
    "\n",
    "def optimize(trial):\n",
    "    opt[name] = CFG[name]\n",
    "    opt[name].learning_rate = trial.suggest_float('learning_rate', 1e-2, 2e-1)\n",
    "    opt[name].min_data_in_leaf = trial.suggest_int('min_data_in_leaf', 1, 100) # Alias min_data_per_leaf, min_data, min_child_samples, min_samples_leaf\n",
    "    opt[name].max_depth =  trial.suggest_int('max_depth', 5, 12) # Alias depth\n",
    "    opt[name].reg_lambda = trial.suggest_float('reg_lambda', 1e-3, 1.0) # Alias l2_leaf_reg, lambda_l2 , reg_lambda, lambda, l2_regularization\n",
    "    \n",
    "    if name == 'lgbm' :\n",
    "        opt[name].num_leaves =  trial.suggest_int('num_leaves', 6, int((2**opt[name].max_depth) * 0.75))\n",
    "        opt[name].colsample_bytree = trial.suggest_float('colsample_bytree', 0.2, 1.0)\n",
    "        opt[name].subsample =  trial.suggest_float('subsample', 0.05, 1.0) # Alias sub_row, subsample, bagging\n",
    "        opt[name].subsample_freq = trial.suggest_categorical('subsample_freq', [1, 2, 3]) # Alias bagging_freq\n",
    "#     if name == 'catboost' :\n",
    "#         opt[name].colsample_bylevel = trial.suggest_float('colsample_bylevel', 0.05, 1.0)\n",
    "    \n",
    "    model = Model_Factory.get_model(name, opt[name])\n",
    "    model.fit(fold, X_train, X_valid, y_train, y_valid)\n",
    "\n",
    "    pred = model.predict(X_valid)\n",
    "    score = np.sqrt(mean_squared_error(y_valid, pred))\n",
    "    \n",
    "    libc.malloc_trim(0)\n",
    "    gc.collect()\n",
    "    return score\n",
    "\n",
    "for name in CFG.l_optuna :\n",
    "    X = train[cols.categoricals + cols.numericals]\n",
    "    y = train[CFG.target_col]\n",
    "\n",
    "    fold = 0\n",
    "    train_index, valid_index = fld.get_index(fold)\n",
    "    X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n",
    "    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n",
    "\n",
    "    clear_output(wait=True) \n",
    "    study = run_optimization(optimize, n_trials=opt.n_trials, n_jobs=1)\n",
    "    best_params = study.best_params\n",
    "\n",
    "    plot_optimization_history(study).show()\n",
    "    plot_param_importances(study).show()\n",
    "    plot_parallel_coordinate(study).show()\n",
    "\n",
    "    print(f'best_params {name} : {best_params}')\n",
    "    print(f'Current Conf : {CFG[name]}')\n",
    "    CFG[name].update(dotdict(**best_params))\n",
    "    print(f'Updated Conf : {CFG[name]}')\n",
    "    json.dump(best_params, open(f'{name}_best_params_optuna.json', 'w'))\n",
    "    libc.malloc_trim(0)\n",
    "    gc.collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a1431fb",
   "metadata": {
    "papermill": {
     "duration": 0.027709,
     "end_time": "2024-10-28T02:19:53.030763",
     "exception": false,
     "start_time": "2024-10-28T02:19:53.003054",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Permutation Importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a95affae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:53.089072Z",
     "iopub.status.busy": "2024-10-28T02:19:53.088618Z",
     "iopub.status.idle": "2024-10-28T02:19:53.110346Z",
     "shell.execute_reply": "2024-10-28T02:19:53.108776Z"
    },
    "papermill": {
     "duration": 0.054193,
     "end_time": "2024-10-28T02:19:53.113139",
     "exception": false,
     "start_time": "2024-10-28T02:19:53.058946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def permutation_importance () :\n",
    "    print('*' * 70)\n",
    "    print(f\"{'*' * 30} PERMUTATION IMPORTANCE  {'*' * 30}\"[:70])\n",
    "    print('*' * 70)\n",
    "\n",
    "    if is_interactive() : \n",
    "        CFG.l_permutation_importance = CFG.l_permutation_importance[:10] \n",
    "        print('Interacctive using only 10 features for permutation importance')\n",
    "    results = dict([(col, 0) for col in CFG.l_permutation_importance]) \n",
    "        \n",
    "    y = train[CFG.target_col]\n",
    "    X = train[cols.numericals + cols.categoricals]\n",
    "\n",
    "    mse_score = mean_squared_error(md.oof_preds , y)\n",
    "    print(f\"mse_score : {np.sqrt(mse_score)}\")\n",
    "        \n",
    "    for fold in range(CFG.n_splits):\n",
    "        print(f\"{'*' * 30} FOLD : {fold} {'*' * 30}\"[:70])\n",
    "        train_index, valid_index = fld.get_index(fold)\n",
    "        tr, va = X.iloc[train_index], X.iloc[valid_index]\n",
    "        y_tr, y_va = y.iloc[train_index], y.iloc[valid_index]\n",
    "\n",
    "        for col in CFG.l_permutation_importance:\n",
    "            save_col = va[col].copy()\n",
    "            va[col] = np.random.permutation(va[col])\n",
    "            if col in cols.categoricals : va[col] = va[col].astype(\"category\")\n",
    "            predicts = [] \n",
    "            for name in CFG.l_models :\n",
    "                predicts.append(md.models[name][fold].predict(va[cols[name].features]))\n",
    "            results[col] += (mean_squared_error(np.mean(predicts, axis = 0) ,y_va) - mse_score) / CFG.n_splits\n",
    "            va[col] = save_col \n",
    "        break\n",
    "    df_perm_impt = pd.DataFrame.from_dict(results, orient='index', columns=['perm_importance'])\n",
    "    df_perm_impt = df_perm_impt.sort_values('perm_importance', ascending=True)\n",
    "    df_perm_impt.to_csv('df_perm_impt.csv')\n",
    "    json.dump(results, open('result_permutation_importance.json', 'w'))\n",
    "    \n",
    "    l_fe_pos_perm = list(df_perm_impt[df_perm_impt.perm_importance > 0].index)\n",
    "    print(f'list {len(l_fe_pos_perm)} features with positives permutation importance : \\n{l_fe_pos_perm}')\n",
    "\n",
    "    l_fe_0_perm = list(df_perm_impt[df_perm_impt.perm_importance == 0].index)\n",
    "    print(f'list {len(l_fe_0_perm)} features with 0 permutation importance :\\n{l_fe_0_perm}')\n",
    "\n",
    "    l_fe_neg_perm = list(df_perm_impt[df_perm_impt.perm_importance < 0].index)\n",
    "    print(f'list {len(l_fe_neg_perm)} features with negative permutation importance :\\n{l_fe_neg_perm}')\n",
    "\n",
    "    abv_zero = df_perm_impt[df_perm_impt.perm_importance > 0]\n",
    "    bel_zero = df_perm_impt[df_perm_impt.perm_importance <= 0]\n",
    "\n",
    "    fig, ax = plt.subplots(figsize=(20, max(10, int(len(df_perm_impt)/5))))\n",
    "    bars = ax.barh(bel_zero.index, np.round(bel_zero.perm_importance, 5), height = 0.4, color='r')\n",
    "    ax.bar_label(bars)\n",
    "    bars = ax.barh(abv_zero.index, np.round(abv_zero.perm_importance, 5), height = 0.4, color='g')\n",
    "    ax.bar_label(bars)\n",
    "\n",
    "    plt.grid(True)\n",
    "    plt.savefig('perm_impt.png')\n",
    "    plt.show()\n",
    "    del abv_zero, bel_zero, y, X, tr, va, y_tr, y_va, df_perm_impt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "cbabb6f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:53.171147Z",
     "iopub.status.busy": "2024-10-28T02:19:53.170689Z",
     "iopub.status.idle": "2024-10-28T02:19:53.176318Z",
     "shell.execute_reply": "2024-10-28T02:19:53.174913Z"
    },
    "papermill": {
     "duration": 0.037423,
     "end_time": "2024-10-28T02:19:53.179058",
     "exception": false,
     "start_time": "2024-10-28T02:19:53.141635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# CFG.l_permutation_importance = list(dict.fromkeys(CFG.l_permutation_importance))\n",
    "# CFG.l_permutation_importance = list(dict.fromkeys(cols.catboost.features))\n",
    "# CFG.l_permutation_importance = list(dict.fromkeys(cols.lgbm.features))\n",
    "# CFG.l_permutation_importance = ['labels_kmeans_EnglishRules']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5048789b",
   "metadata": {
    "papermill": {
     "duration": 0.028309,
     "end_time": "2024-10-28T02:19:53.235693",
     "exception": false,
     "start_time": "2024-10-28T02:19:53.207384",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Submit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0299c623",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:53.294455Z",
     "iopub.status.busy": "2024-10-28T02:19:53.293520Z",
     "iopub.status.idle": "2024-10-28T02:19:53.305665Z",
     "shell.execute_reply": "2024-10-28T02:19:53.304477Z"
    },
    "papermill": {
     "duration": 0.044362,
     "end_time": "2024-10-28T02:19:53.308295",
     "exception": false,
     "start_time": "2024-10-28T02:19:53.263933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def predict(test, submission):\n",
    "    global counter\n",
    "    if counter == 0:\n",
    "        md.train()\n",
    "        CFG.weights = weight_search_func()\n",
    "        if len(CFG.l_permutation_importance) > 0  : permutation_importance()\n",
    "    counter += 1  \n",
    "    group = np.array(test[CFG.fold_col])\n",
    "\n",
    "    test = fe.get_new_columns(test)\n",
    "    test = fe.encoders_transform(test)\n",
    "    test = fe.feature_engineering(test)\n",
    "    test = fe.scaler_transform(test)\n",
    "    test = fe.clean(test)\n",
    "\n",
    "    prediction = md.infer(test)\n",
    "    prediction = np.where(prediction > 1, 1, prediction)\n",
    "    prediction = np.where(prediction <-1, -1, prediction)\n",
    "    \n",
    "    if CFG.post_processing:     \n",
    "        replace = np.vectorize(dic_std_target_0.get)(group).astype(np.float64) \n",
    "        replace[np.isnan(replace)]= prediction[np.isnan(replace)]\n",
    "        prediction =  replace\n",
    "        \n",
    "        rounding_logic = pd.Series(list_rounding)\n",
    "        rounding_logic = pd.concat([pd.Series([-np.inf]), rounding_logic])\n",
    "        prediction = np.array(pd.cut(prediction, rounding_logic, labels=list_rounding).fillna(rounding_logic.iloc[-1]))\n",
    "    \n",
    "    return submission.with_columns(pl.Series(CFG.target_col, prediction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "aff9ae33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T02:19:53.365401Z",
     "iopub.status.busy": "2024-10-28T02:19:53.364934Z",
     "iopub.status.idle": "2024-10-28T05:53:59.523780Z",
     "shell.execute_reply": "2024-10-28T05:53:59.520465Z"
    },
    "papermill": {
     "duration": 12846.192864,
     "end_time": "2024-10-28T05:53:59.528747",
     "exception": false,
     "start_time": "2024-10-28T02:19:53.335883",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**********************************************************************\n",
      "****************************** TRAINING ******************************\n",
      "**********************************************************************\n",
      "****************************** FOLD : 0 ******************************\n",
      "****************************** MODEL : lgbm **************************\n",
      "Create model : lgbm\n",
      "Params: objective: rmse | verbose: -1 | random_seed: 42 | num_trees: 20000 | learning_rate: 0.011391593088960518 | max_depth: 12 | min_data_in_leaf: 69 | num_leaves: 2332 | subsample: 0.9583707249838648 | reg_lambda: 0.0681561641665741 | device: cpu | gpu_use_dp: False | metric: rmse | extra_trees: True | colsample_bytree: 0.524671448743249 | subsample_freq: 1\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid_0's rmse: 0.497626\n",
      "[200]\tvalid_0's rmse: 0.457556\n",
      "[300]\tvalid_0's rmse: 0.440245\n",
      "[400]\tvalid_0's rmse: 0.430144\n",
      "[500]\tvalid_0's rmse: 0.423615\n",
      "[600]\tvalid_0's rmse: 0.419028\n",
      "[700]\tvalid_0's rmse: 0.415596\n",
      "[800]\tvalid_0's rmse: 0.413176\n",
      "[900]\tvalid_0's rmse: 0.411463\n",
      "[1000]\tvalid_0's rmse: 0.410081\n",
      "[1100]\tvalid_0's rmse: 0.409071\n",
      "[1200]\tvalid_0's rmse: 0.408256\n",
      "[1300]\tvalid_0's rmse: 0.407527\n",
      "[1400]\tvalid_0's rmse: 0.406993\n",
      "[1500]\tvalid_0's rmse: 0.406602\n",
      "[1600]\tvalid_0's rmse: 0.406237\n",
      "[1700]\tvalid_0's rmse: 0.405899\n",
      "[1800]\tvalid_0's rmse: 0.405615\n",
      "[1900]\tvalid_0's rmse: 0.4053\n",
      "[2000]\tvalid_0's rmse: 0.405025\n",
      "[2100]\tvalid_0's rmse: 0.404794\n",
      "[2200]\tvalid_0's rmse: 0.40459\n",
      "[2300]\tvalid_0's rmse: 0.404388\n",
      "[2400]\tvalid_0's rmse: 0.404262\n",
      "[2500]\tvalid_0's rmse: 0.404113\n",
      "[2600]\tvalid_0's rmse: 0.404002\n",
      "[2700]\tvalid_0's rmse: 0.403924\n",
      "[2800]\tvalid_0's rmse: 0.403813\n",
      "[2900]\tvalid_0's rmse: 0.403705\n",
      "[3000]\tvalid_0's rmse: 0.403611\n",
      "[3100]\tvalid_0's rmse: 0.403503\n",
      "[3200]\tvalid_0's rmse: 0.403427\n",
      "[3300]\tvalid_0's rmse: 0.403425\n",
      "[3400]\tvalid_0's rmse: 0.403366\n",
      "[3500]\tvalid_0's rmse: 0.403363\n",
      "[3600]\tvalid_0's rmse: 0.403332\n",
      "[3700]\tvalid_0's rmse: 0.403281\n",
      "[3800]\tvalid_0's rmse: 0.403253\n",
      "[3900]\tvalid_0's rmse: 0.403246\n",
      "[4000]\tvalid_0's rmse: 0.403243\n",
      "Early stopping, best iteration is:\n",
      "[3932]\tvalid_0's rmse: 0.40322\n",
      "****************************** FOLD : 1 ******************************\n",
      "****************************** MODEL : lgbm **************************\n",
      "Create model : lgbm\n",
      "Params: objective: rmse | verbose: -1 | random_seed: 42 | num_trees: 20000 | learning_rate: 0.011391593088960518 | max_depth: 12 | min_data_in_leaf: 69 | num_leaves: 2332 | subsample: 0.9583707249838648 | reg_lambda: 0.0681561641665741 | device: cpu | gpu_use_dp: False | metric: rmse | extra_trees: True | colsample_bytree: 0.524671448743249 | subsample_freq: 1\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid_0's rmse: 0.511266\n",
      "[200]\tvalid_0's rmse: 0.476907\n",
      "[300]\tvalid_0's rmse: 0.460216\n",
      "[400]\tvalid_0's rmse: 0.449916\n",
      "[500]\tvalid_0's rmse: 0.443314\n",
      "[600]\tvalid_0's rmse: 0.438404\n",
      "[700]\tvalid_0's rmse: 0.434681\n",
      "[800]\tvalid_0's rmse: 0.432228\n",
      "[900]\tvalid_0's rmse: 0.430597\n",
      "[1000]\tvalid_0's rmse: 0.429004\n",
      "[1100]\tvalid_0's rmse: 0.427948\n",
      "[1200]\tvalid_0's rmse: 0.426901\n",
      "[1300]\tvalid_0's rmse: 0.426245\n",
      "[1400]\tvalid_0's rmse: 0.425661\n",
      "[1500]\tvalid_0's rmse: 0.425175\n",
      "[1600]\tvalid_0's rmse: 0.424826\n",
      "[1700]\tvalid_0's rmse: 0.424452\n",
      "[1800]\tvalid_0's rmse: 0.424024\n",
      "[1900]\tvalid_0's rmse: 0.423711\n",
      "[2000]\tvalid_0's rmse: 0.423453\n",
      "[2100]\tvalid_0's rmse: 0.423195\n",
      "[2200]\tvalid_0's rmse: 0.422988\n",
      "[2300]\tvalid_0's rmse: 0.4228\n",
      "[2400]\tvalid_0's rmse: 0.42267\n",
      "[2500]\tvalid_0's rmse: 0.422509\n",
      "[2600]\tvalid_0's rmse: 0.422416\n",
      "[2700]\tvalid_0's rmse: 0.422263\n",
      "[2800]\tvalid_0's rmse: 0.422125\n",
      "[2900]\tvalid_0's rmse: 0.422002\n",
      "[3000]\tvalid_0's rmse: 0.421918\n",
      "[3100]\tvalid_0's rmse: 0.421889\n",
      "[3200]\tvalid_0's rmse: 0.421821\n",
      "[3300]\tvalid_0's rmse: 0.42172\n",
      "[3400]\tvalid_0's rmse: 0.421665\n",
      "[3500]\tvalid_0's rmse: 0.421594\n",
      "[3600]\tvalid_0's rmse: 0.42155\n",
      "[3700]\tvalid_0's rmse: 0.421499\n",
      "[3800]\tvalid_0's rmse: 0.421478\n",
      "[3900]\tvalid_0's rmse: 0.421413\n",
      "[4000]\tvalid_0's rmse: 0.421359\n",
      "[4100]\tvalid_0's rmse: 0.421324\n",
      "[4200]\tvalid_0's rmse: 0.421287\n",
      "[4300]\tvalid_0's rmse: 0.421261\n",
      "[4400]\tvalid_0's rmse: 0.421225\n",
      "[4500]\tvalid_0's rmse: 0.421207\n",
      "[4600]\tvalid_0's rmse: 0.421163\n",
      "[4700]\tvalid_0's rmse: 0.421124\n",
      "[4800]\tvalid_0's rmse: 0.42109\n",
      "[4900]\tvalid_0's rmse: 0.421071\n",
      "[5000]\tvalid_0's rmse: 0.421054\n",
      "[5100]\tvalid_0's rmse: 0.42105\n",
      "Early stopping, best iteration is:\n",
      "[5044]\tvalid_0's rmse: 0.421023\n",
      "****************************** FOLD : 2 ******************************\n",
      "****************************** MODEL : lgbm **************************\n",
      "Create model : lgbm\n",
      "Params: objective: rmse | verbose: -1 | random_seed: 42 | num_trees: 20000 | learning_rate: 0.011391593088960518 | max_depth: 12 | min_data_in_leaf: 69 | num_leaves: 2332 | subsample: 0.9583707249838648 | reg_lambda: 0.0681561641665741 | device: cpu | gpu_use_dp: False | metric: rmse | extra_trees: True | colsample_bytree: 0.524671448743249 | subsample_freq: 1\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid_0's rmse: 0.48863\n",
      "[200]\tvalid_0's rmse: 0.450705\n",
      "[300]\tvalid_0's rmse: 0.433868\n",
      "[400]\tvalid_0's rmse: 0.424135\n",
      "[500]\tvalid_0's rmse: 0.418431\n",
      "[600]\tvalid_0's rmse: 0.414753\n",
      "[700]\tvalid_0's rmse: 0.412146\n",
      "[800]\tvalid_0's rmse: 0.41034\n",
      "[900]\tvalid_0's rmse: 0.409124\n",
      "[1000]\tvalid_0's rmse: 0.40778\n",
      "[1100]\tvalid_0's rmse: 0.40706\n",
      "[1200]\tvalid_0's rmse: 0.406407\n",
      "[1300]\tvalid_0's rmse: 0.40592\n",
      "[1400]\tvalid_0's rmse: 0.405515\n",
      "[1500]\tvalid_0's rmse: 0.405274\n",
      "[1600]\tvalid_0's rmse: 0.405038\n",
      "[1700]\tvalid_0's rmse: 0.404628\n",
      "[1800]\tvalid_0's rmse: 0.40442\n",
      "[1900]\tvalid_0's rmse: 0.40412\n",
      "[2000]\tvalid_0's rmse: 0.403954\n",
      "[2100]\tvalid_0's rmse: 0.40373\n",
      "[2200]\tvalid_0's rmse: 0.403537\n",
      "[2300]\tvalid_0's rmse: 0.403363\n",
      "[2400]\tvalid_0's rmse: 0.403293\n",
      "[2500]\tvalid_0's rmse: 0.403158\n",
      "[2600]\tvalid_0's rmse: 0.403038\n",
      "[2700]\tvalid_0's rmse: 0.403004\n",
      "[2800]\tvalid_0's rmse: 0.402913\n",
      "[2900]\tvalid_0's rmse: 0.402787\n",
      "[3000]\tvalid_0's rmse: 0.402707\n",
      "[3100]\tvalid_0's rmse: 0.402663\n",
      "[3200]\tvalid_0's rmse: 0.402577\n",
      "[3300]\tvalid_0's rmse: 0.40251\n",
      "[3400]\tvalid_0's rmse: 0.402479\n",
      "[3500]\tvalid_0's rmse: 0.402426\n",
      "[3600]\tvalid_0's rmse: 0.402404\n",
      "Early stopping, best iteration is:\n",
      "[3549]\tvalid_0's rmse: 0.402379\n",
      "****************************** FOLD : 3 ******************************\n",
      "****************************** MODEL : lgbm **************************\n",
      "Create model : lgbm\n",
      "Params: objective: rmse | verbose: -1 | random_seed: 42 | num_trees: 20000 | learning_rate: 0.011391593088960518 | max_depth: 12 | min_data_in_leaf: 69 | num_leaves: 2332 | subsample: 0.9583707249838648 | reg_lambda: 0.0681561641665741 | device: cpu | gpu_use_dp: False | metric: rmse | extra_trees: True | colsample_bytree: 0.524671448743249 | subsample_freq: 1\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid_0's rmse: 0.510484\n",
      "[200]\tvalid_0's rmse: 0.475715\n",
      "[300]\tvalid_0's rmse: 0.458825\n",
      "[400]\tvalid_0's rmse: 0.448817\n",
      "[500]\tvalid_0's rmse: 0.443225\n",
      "[600]\tvalid_0's rmse: 0.43883\n",
      "[700]\tvalid_0's rmse: 0.435704\n",
      "[800]\tvalid_0's rmse: 0.433635\n",
      "[900]\tvalid_0's rmse: 0.432197\n",
      "[1000]\tvalid_0's rmse: 0.430768\n",
      "[1100]\tvalid_0's rmse: 0.429751\n",
      "[1200]\tvalid_0's rmse: 0.429006\n",
      "[1300]\tvalid_0's rmse: 0.428361\n",
      "[1400]\tvalid_0's rmse: 0.427842\n",
      "[1500]\tvalid_0's rmse: 0.427328\n",
      "[1600]\tvalid_0's rmse: 0.426901\n",
      "[1700]\tvalid_0's rmse: 0.426573\n",
      "[1800]\tvalid_0's rmse: 0.426194\n",
      "[1900]\tvalid_0's rmse: 0.425964\n",
      "[2000]\tvalid_0's rmse: 0.425705\n",
      "[2100]\tvalid_0's rmse: 0.425497\n",
      "[2200]\tvalid_0's rmse: 0.425402\n",
      "[2300]\tvalid_0's rmse: 0.425216\n",
      "[2400]\tvalid_0's rmse: 0.425111\n",
      "[2500]\tvalid_0's rmse: 0.424955\n",
      "[2600]\tvalid_0's rmse: 0.424803\n",
      "[2700]\tvalid_0's rmse: 0.424692\n",
      "[2800]\tvalid_0's rmse: 0.424655\n",
      "[2900]\tvalid_0's rmse: 0.424599\n",
      "[3000]\tvalid_0's rmse: 0.424505\n",
      "[3100]\tvalid_0's rmse: 0.424469\n",
      "[3200]\tvalid_0's rmse: 0.424407\n",
      "[3300]\tvalid_0's rmse: 0.424342\n",
      "[3400]\tvalid_0's rmse: 0.424233\n",
      "[3500]\tvalid_0's rmse: 0.424188\n",
      "[3600]\tvalid_0's rmse: 0.424134\n",
      "[3700]\tvalid_0's rmse: 0.424093\n",
      "[3800]\tvalid_0's rmse: 0.424033\n",
      "[3900]\tvalid_0's rmse: 0.424057\n",
      "Early stopping, best iteration is:\n",
      "[3803]\tvalid_0's rmse: 0.424032\n",
      "****************************** FOLD : 4 ******************************\n",
      "****************************** MODEL : lgbm **************************\n",
      "Create model : lgbm\n",
      "Params: objective: rmse | verbose: -1 | random_seed: 42 | num_trees: 20000 | learning_rate: 0.011391593088960518 | max_depth: 12 | min_data_in_leaf: 69 | num_leaves: 2332 | subsample: 0.9583707249838648 | reg_lambda: 0.0681561641665741 | device: cpu | gpu_use_dp: False | metric: rmse | extra_trees: True | colsample_bytree: 0.524671448743249 | subsample_freq: 1\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid_0's rmse: 0.497225\n",
      "[200]\tvalid_0's rmse: 0.456665\n",
      "[300]\tvalid_0's rmse: 0.439283\n",
      "[400]\tvalid_0's rmse: 0.428641\n",
      "[500]\tvalid_0's rmse: 0.421911\n",
      "[600]\tvalid_0's rmse: 0.417428\n",
      "[700]\tvalid_0's rmse: 0.414202\n",
      "[800]\tvalid_0's rmse: 0.411526\n",
      "[900]\tvalid_0's rmse: 0.40979\n",
      "[1000]\tvalid_0's rmse: 0.408161\n",
      "[1100]\tvalid_0's rmse: 0.406972\n",
      "[1200]\tvalid_0's rmse: 0.406102\n",
      "[1300]\tvalid_0's rmse: 0.405505\n",
      "[1400]\tvalid_0's rmse: 0.40486\n",
      "[1500]\tvalid_0's rmse: 0.404266\n",
      "[1600]\tvalid_0's rmse: 0.403786\n",
      "[1700]\tvalid_0's rmse: 0.403394\n",
      "[1800]\tvalid_0's rmse: 0.403048\n",
      "[1900]\tvalid_0's rmse: 0.402694\n",
      "[2000]\tvalid_0's rmse: 0.402462\n",
      "[2100]\tvalid_0's rmse: 0.402202\n",
      "[2200]\tvalid_0's rmse: 0.402031\n",
      "[2300]\tvalid_0's rmse: 0.401874\n",
      "[2400]\tvalid_0's rmse: 0.401777\n",
      "[2500]\tvalid_0's rmse: 0.401553\n",
      "[2600]\tvalid_0's rmse: 0.401346\n",
      "[2700]\tvalid_0's rmse: 0.401185\n",
      "[2800]\tvalid_0's rmse: 0.401019\n",
      "[2900]\tvalid_0's rmse: 0.400886\n",
      "[3000]\tvalid_0's rmse: 0.400748\n",
      "[3100]\tvalid_0's rmse: 0.400645\n",
      "[3200]\tvalid_0's rmse: 0.400607\n",
      "[3300]\tvalid_0's rmse: 0.400484\n",
      "[3400]\tvalid_0's rmse: 0.400418\n",
      "[3500]\tvalid_0's rmse: 0.400336\n",
      "[3600]\tvalid_0's rmse: 0.400259\n",
      "[3700]\tvalid_0's rmse: 0.40023\n",
      "[3800]\tvalid_0's rmse: 0.400136\n",
      "[3900]\tvalid_0's rmse: 0.400105\n",
      "[4000]\tvalid_0's rmse: 0.400054\n",
      "[4100]\tvalid_0's rmse: 0.400027\n",
      "[4200]\tvalid_0's rmse: 0.399971\n",
      "[4300]\tvalid_0's rmse: 0.399909\n",
      "[4400]\tvalid_0's rmse: 0.399866\n",
      "[4500]\tvalid_0's rmse: 0.399814\n",
      "[4600]\tvalid_0's rmse: 0.399799\n",
      "[4700]\tvalid_0's rmse: 0.399742\n",
      "[4800]\tvalid_0's rmse: 0.399682\n",
      "[4900]\tvalid_0's rmse: 0.399675\n",
      "Early stopping, best iteration is:\n",
      "[4815]\tvalid_0's rmse: 0.399665\n",
      "**********************************************************************\n",
      "****************************** OOF RESULTS ***************************\n",
      "**********************************************************************\n",
      "lgbm OOF scores :0.41011\n",
      "lgbm mean all scores :0.41006, std all scores :0.01029, Scores : [0.4032198703149173, 0.42102305295230197, 0.4023790509995706, 0.42403166575720624, 0.39966509517293775].\n",
      "**********************************************************************\n",
      "******************************  FEATURES IMPORTANCE ******************\n",
      "**********************************************************************\n",
      "lgbm_feature_importances les moins importantes:  ['PieceNumberChangeSign', 'Timeouts', 'BoardSitesOccupiedAverage', 'BoardSitesOccupiedChangeSign', 'BallComponent', 'CheckersComponent', 'DecisionFactorChangeSign', 'BranchingFactorChangeSign', 'NumVertices', 'EliminatePiecesWinFrequency', 'NumEdges', 'NumCells', 'NumStartComponentsBoardPerPlayer', 'NumPlayableSitesOnBoard', 'RemoveEffectFrequency', 'NumOrthogonalDirections', 'BoardSitesOccupiedVariance', 'BoardSitesOccupiedMedian', 'BoardCoverageUsed', 'LineEndFrequency']\n",
      "lgbm_feature_importances les plus importantes:  ['Rules_game', 'TwoSitesMoves', 'PieceCount', 'NotEqual', 'AdjacentDirection', 'ConditionalStatement', 'Rules_category2', 'NoSiteMoves', 'Union', 'Operations', 'PiecesPlacedOnBoard', 'Vertex', 'Rules_equipment', 'AdvantageP1_EXPLORATION_CONST2_std', 'EXPLORATION_CONST1', 'EXPLORATION_CONST2', 'SELECTION1', 'PLAYOUT1', 'SELECTION2', 'PLAYOUT2']\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "oof_preds mean scores :0.41006, std scores :0.01029, Scores : [0.4032198703149173, 0.42102305295230197, 0.4023790509995706, 0.42403166575720624, 0.39966509517293775].\n",
      "**********************************************************************\n",
      "****************************** WEIGHT SEARCH *************************\n",
      "**********************************************************************\n",
      "CFG.weights before : [1.0]\n",
      "CFG.weights after : [1.]\n",
      "RMSE MEAN : 0.41010882541796156\n",
      "RMSE WEIGTHED : 0.41010882541796156\n",
      "dic_weight : {'lgbm': 1.0}\n",
      "**********************************************************************\n",
      "****************************** PERMUTATION IMPORTANCE  ***************\n",
      "**********************************************************************\n",
      "mse_score : 0.41010882541796156\n",
      "****************************** FOLD : 0 ******************************\n",
      "list 2 features with positives permutation importance : \n",
      "['AdvantageP1/Balance', 'AdvantageP1']\n",
      "list 0 features with 0 permutation importance :\n",
      "[]\n",
      "list 38 features with negative permutation importance :\n",
      "['BranchingFactorChangeSign', 'SowFrequency', 'NumOrthogonalDirections', 'Stochastic', 'DecisionFactorChangeSign', 'BoardSitesOccupiedMedian', 'Timeouts', 'NumInnerSites', 'BoardSitesOccupiedAverage', 'BoardCoverageUsed', 'NumVertices', 'NumEdges', 'NumCells', 'EliminatePiecesWin', 'BoardSitesOccupiedVariance', 'BoardSitesOccupiedChangeSign', 'NumStartComponentsBoardPerPlayer', 'BranchingFactorMaximum', 'PieceNumberChangeSign', 'BallComponent', 'NumStartComponentsBoard', 'DecisionFactorAverage', 'BoardCoverageDefault', 'CheckersComponent', 'NumPlayableSitesOnBoard', 'RemoveEffectFrequency', 'EliminatePiecesWinFrequency', 'AlquerqueTiling', 'BranchingFactorAverage', 'DecisionFactorMaximum', 'LineEndFrequency', 'HopCapture', 'OverallComplexity', 'BranchingFactorVariance', 'GameTreeComplexity', 'DecisionFactorVariance', 'ComplexityPerPlayout', 'PlayoutsPerMoves']\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABzAAAAMtCAYAAADwmefcAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeXhNV/v/8fcJkYnELIlGY4hZYkxqqDHEWBTFQ83UEKqqdCBiqqFEKOVpSQylpqItqRpq+BYVpVTN89AkhhIRJDmS/P7Ik/1zmiBamlP9vK5rX83ea+21117n3HGa+6y1TampqamIiIiIiIiIiIiIiIiIiFgBm+zugIiIiIiIiIiIiIiIiIhIOiUwRURERERERERERERERMRqKIEpIiIiIiIiIiIiIiIiIlZDCUwRERERERERERERERERsRpKYIqIiIiIiIiIiIiIiIiI1VACU0RERERERERERERERESshhKYIiIiIiIiIiIiIiIiImI1cmZ3B0Tk+ZWSkkJUVBR58uTBZDJld3dERERERERERERERCQbpaamcvv2bdzd3bGxefg8SyUwReSZiYqKwsPDI7u7ISIiIiIiIiIiIiIiVuTSpUu88MILDy1XAlNEnpk8efIAab+InJ2ds7k3Yk3MZjObNm2iSZMm2NraZnd3ROQBik8R66X4FLFOik0R66X4FLFeik8R6/Ws4zMuLg4PDw8jf/AwSmCKyDOTvmyss7OzEphiwWw24+joiLOzsz6kilgZxaeI9VJ8ilgnxaaI9VJ8ilgvxaeI9fq74vNxj517+OKyIiIiIiIiIiIiIiIiIiJ/MyUwRURERERERERERERERMRqKIEpIiIiIiIiIiIiIiIiIlZDCUwRERERERERERERERERsRpKYIqIiIiIiIiIiIiIiIiI1VACU0RERERERERERERERESshhKYIiIiIiIiIiIiIiIiImI1lMAUEREREREREREREREREauhBKaIiIiIiIiIiIiIiIiIWA0lMEVERERERERERERERETEaiiBKSIiIiIiIiIiIiIiIiJWQwlMEREREREREREREREREbEaSmCKiIiIiIiIiIiIiIiIiNVQAlNERERERERERERERERErIYSmCIiIiIiIiIiIiIiIiJiNZTAFBERERERERERERERERGroQSmiIiIiIiIiIiIiIiIiFgNJTBFRERERERERERERERExGoogSkiIiIiIiIiIiIiIiIiVkMJTBERERERERERERERERGxGkpgioiIiIiIiIiIiIiIiIjVUAJTRERERERERERERERERKyGEpgiIiIiIiIiIiIiIiIiYjWUwBQRERERERERERERERERq6EEpoiIiIiIiIiIiIiIiIhYDSUwRURERERERERERERERMRqKIEpIiIiIiIiIiIiIiIiIlZDCUwRERERERERERERERERsRpKYIqIiIiIiIiIiIiIiIiI1VACU0RERERERERERERERESshhKYIiIiIiIiIiIiIiIiImI1lMCUf73g4GAqV66c3d0QEREREREREREREZHn0Jw5c/D09MTe3h4/Pz8iIyMfWX/VqlWULVsWe3t7KlWqREREhEV5amoqQUFBuLm54eDggL+/P6dOnbKoM3HiRGrVqoWjoyN58+bN9Dpbt26lVq1a5MmTB1dXV0aOHMn9+/f/0r0+LTmzuwMiz8KePXuoU6cOTZs2ZcOGDdndnUyZTCbWrl1LmzZt/vZrL1y4kJ49exr9cHd3p3HjxkyZMoXChQsDab/cNmzYwMGDB8mVKxexsbF/ez9FREREJCOXyS7cS7mX3d0Qkf9xsHHgC+8vFJsiVkjxKWK9FJ/yb5A6JhWAFStWMGzYMObNm4efnx+hoaEEBARw4sQJ4+/xD9q9ezedO3dm0qRJtGzZkmXLltGmTRsOHDhAxYoVAZg6dSqzZs1i0aJFFC9enNGjRxMQEMDRo0ext7cHICkpiQ4dOlCzZk0WLFiQ4TqHDh2iefPmfPDBByxevJjffvuN/v37YzabqVev3jMcmazRDEx5Li1YsIDBgwezc+dOoqKisrs7VsnZ2Zno6GguX77MZ599xrfffsvrr79ulKf/chswYEA29lJERERERERERERE5J8rJCSEvn370rNnT8qXL8+8efNwdHQkLCws0/ozZ86kadOmvPPOO5QrV47x48dTtWpVZs+eDaTNvgwNDWXUqFG0bt0ab29vFi9eTFRUFOvWrTPaGTt2LG+99RaVKlXK9DorVqzA29uboKAgSpUqRb169Zg6dSpz587l3r3s/2KBEpjy3ImPj2fFihUMGDCAFi1asHDhQovyyZMnU6RIEfLkyUPv3r1JSEgwyjZt2oS9vX2G2YZvvvkmDRs2BOD333+nc+fOFC1a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qdNDy0eMGMGIESMe2YaIiIg8/2weX0X+iRYsWIC/v3+G5CWkJTB/+uknypUrx+jRoxkxYgTVqlXjwoULDBgwIEP9UqVK4evryy+//EKXLl0sykaNGkXVqlUJCAigfv36uLq60qZNmyfu7/Tp09m8eTMeHh5UqVIFgJCQEPLly0etWrVo1aoVAQEBFs+7BFi8eDFFihShbt26tG3blr59+5InTx7j23/pD6evW7cuPXv2pHTp0nTq1IkLFy4Y3zrMiqCgIKpUqcKYMWOIj4+nSpUqVKlShZ9++gngoQnMI0eO4ObmhpubG5UrV2blypXMnTvXmPXq4+NDSEgIU6ZMoWLFiixdutRYvuVhsjIuj5MrVy42bdpE4cKFad68OZUqVWLy5MnkyJEDgICAANavX8+mTZuoUaMGL730EjNmzDCWfBEREREREREREREREXlWTKmpqanZ3QmRp+Xy5ct4eHiwZcsWGjVq9Ldc88CBAzRs2JBr165puaA/iIuLw8XFhVu3buHs7Jzd3RErkr7MVvPmzRU3IlZG8SlivRSfItZJsSlivRSfItZL8SlivZ51fGY1b6AlZOUf7fvvvyc+Pp5KlSoRHR3NiBEj8PT0pG7dun9bH+7fv8/HH3+sf2hFRERERERERERERESeAiUw5R/NbDbz/vvvc/bsWfLkyUOtWrVYunTp35pM9PX1xdfX92+7noiIiIiIiIiIiIiIyPNMCUz5RwsICCAgICC7uyEiIiIiIiIiIiIiIiJPiU12d0BEREREREREREREREREJJ0SmCIiIiIiIiIiIiIiIiJiNZTAFBGRf7TU1FSCgoJwc3PDwcEBf39/Tp069djz5syZg6enJ/b29vj5+REZGWlRnpCQwKBBgyhQoAC5c+emXbt2XLlyxaLOxYsXadGiBY6OjhQuXJh33nmH+/fvW9RZunQpPj4+ODo64ubmRq9evfj9998z7dPy5csxmUy0adPmyQZBRERERERERERE5DmiBKb8LRYuXEjevHmzuxsi8hyaOnUqs2bNYt68eezduxcnJycCAgJISEh46DkrVqxg2LBhjBkzhgMHDuDj40NAQABXr1416rz11lt88803rFq1ih07dhAVFcWrr75qlCcnJ9OiRQuSkpLYvXs3ixYtYuHChQQFBRl1du3aRbdu3ejduzdHjhxh1apVREZG0rdv3wx9On/+PMOHD+fll19+SiMjIiIiIiIiIiIi8s+kBKY8NT169MBkMmEymciVKxelSpVi3LhxGWYjWZM/k1h9VvcZHByMyWSiadOmGco++ugjTCYT9evX/0vXEHnepKamEhoayqhRo2jdujXe3t4sXryYqKgo1q1b99DzQkJC6Nu3Lz179qR8+fLMmzcPR0dHwsLCALh16xYLFiwgJCSEhg0bUq1aNcLDw9m9ezc//vgjAJs2beLo0aN8/vnnVK5cmWbNmjF+/HjmzJlDUlISAHv27MHT05MhQ4ZQvHhx6tSpwxtvvJFhtmdycjJdunRh7NixlChRwrKzJpM2bX/v5uKS9t5zccn+vmjTps1yS49PERERERERkeecEpjyVDVt2pTo6GhOnTrF22+/TXBwMB999FF2d+upe5r3mZycTEpKCgBubm5s27aNy5cvW9QJCwujWLFif7nfIs+bc+fOERMTg7+/v3HMxcUFPz8/9uzZk+k5SUlJ7N+/3+IcGxsb/P39jXP279+P2Wy2qFO2bFmKFStm1NmzZw+VKlWiSJEiRp2AgADi4uI4cuQIADVr1uTSpUtERESQmprKlStXWL16Nc2bN7fo07hx4yhcuDC9e/f+iyMiIiIiIiIiIiIi8s+XM7s7IM8XOzs7XF1dARgwYABr167l66+/5o033rCod+bMGYYNG8aPP/7InTt3KFeuHJMmTTKSBePGjWPlypX8+uuvFudVrlyZVq1aMX78eFJSUpgwYQKffvop165do1y5ckyePNmYwbh9+3YaNGjAzZs3jVmWBw8epEqVKpw7d47z58/Ts2dPAEwmEwBjxowhODiYTz75hBkzZnDp0iVcXFx4+eWXWb169WPv87333iMxMZEPPviAL774gtjYWCpWrMiUKVOoX78+kDbrc+jQoSxevJh3332XkydPcvr0aQAKFy5MtWrVWLRoER988AEAu3fv5vr163To0IGjR48afXjc/deqVYuXX36ZKVOmGOdcu3YNd3d3tm7dSt26dR/b1wsXLhAYGMgPP/xAUlISnp6efPTRRxmSL+kSExNJTEw09uPi4gAwm82YzeZMz5F/p/T3w199X6Qn+/Pnz2/RVqFChYiKisq0/ejoaJKTkylQoIBFecGCBTl27Bhms5nLly+TK1cunJycLOoULlyY3377DbPZTFRUFIULF7Yoz58/v9Gv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Z82aNQQHB5OQkICXlxdffPEFFSpUyNK9hYeHM2HCBN5++21+++03ChYsyEsvvUTLli2faIycnJweWf64+0/XpUsXmjdvTt26dSlWrNgT9TU5OZlBgwZx+fJlnJ2dadq0qfEcUhERERERERERERERkWfBlJqqtenEeqWmpuLl5cXAgQMZNmxYdndHnlBcXBwuLi7cunULZ2fn7O6OWBGz2UxERATNmzfXg9pFrIziU8R6KT5FrJNiU8R6KT5FrJfiU8R6Pev4zGreQDMwxWpdu3aN5cuXExMTQ8+ePbO7OyIiIiIiIiIiIiIiIvI3UAJTrFbhwoUpWLAgn376Kfny5cvu7oiIiIiIiIiIiIiIiMjfQAlMsVpa3VhEREREREREREREROTfxya7OyAiIiIiIiIiIiIiIiIikk4JTBERERERERERERERERGxGkpgSrY5f/48JpOJgwcPPrU269evz9ChQ59ae3+3Hj160KZNm+zuhojVSE1NJSgoCDc3NxwcHPD39+fUqVOPPW/OnDl4enpib2+Pn58fkZGRFuUJCQkMGjSIAgUKkDt3btq1a8eVK1cs6ly8eJEWLVrg6OhI4cKFeeedd7h//75FnaVLl+Lj44OjoyNubm706tWL33//3aJObGwsgwYNws3NDTs7O0qXLk1ERMSfHBERERERERERERGR558SmP8CMTExDB48mBIlSmBnZ4eHhwetWrVi69at2d21p27NmjWMHz/e2Pf09CQ0NPSJ2zGZTMbm4uJC7dq1+f777/9y/zw9PY12nZycqFq1KqtWrfrL7T5rSqxKdpk6dSqzZs1i3rx57N27FycnJwICAkhISHjoOStWrGDYsGGMGTOGAwcO4OPjQ0BAAFevXjXqvPXWW3zzzTesWrWKHTt2EBUVxauvvmqUJycn06JFC5KSkti9ezeLFi1i4cKFBAUFGXV27dpFt27d6N27N0eOHGHVqlVERkbSt29fo05SUhKNGzfm/PnzrF69mhMnTvDZZ59RtGjRpzxSIiIiIiIiIiIiIs8PJTCfc+fPn6datWp8//33fPTRRxw+fJiNGzfSoEEDBg0alN3de+ry589Pnjx5nkpb4eHhREdHs2vXLgoWLEjLli05e/bsn2orKSnJ+HncuHFER0fz888/U6NGDTp27Mju3bufSp9FniepqamEhoYyatQoWrdujbe3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b93K/r5o06bNckuPTxEREREREZHnnBKYz7kSJUpw4MABGjRowNtvv03FihVp3LgxW7duZe7cuZhMJr766ivy5ctH3bp18ff3p0SJEqxYseKpXH/s2LEsX74cb29vFi9ezBdffPHQmZ3u7u7s2rWL5ORkmjRpQqVKlRg6dCh58+bFxsaGiRMncuHCBf773/8Cacu1fvrpp4waNYpDhw5l2ua4ceM4f/48JUuWzDCTsnfv3iQlJVnMWMyKx/XzabGxsWH58uXs37+fihUr8tZbb/HRRx9lWrdz587kzJmTzp07WyR2AMLDw6lWrRotW7akZs2apKamEhERYUzTLleuHJ988glz5szBx8eHyMhIhg8fbtFG3759KVOmDNWrV6dQoULs2rXrqd2nyKOYTCbGjRtHTEwMCQkJbNmyxXjObLrz588THBxscSwwMJALFy6QmJjI3r17LZ4DC2Bvb8+cOXO4ceMGd+7cYc2aNbi6ulrUefHFF4mIiODu3btcu3aNadOmkTOn5crrgwcP5siRI9y9e5eoqCg+//xzihYtalGnZs2a/PjjjyQkJHDmzBnef/99cuTI8RdHRkREREREREREROT5ZUr948PvRJ4Sk8nE2rVrLZZ6tCZLlizhrbfeIioqily5cmV3d/6S9CTtvn37qFq1anZ3xxAXF4eLiwu3bt3C2dk5u7sjVsRsNhMREUHz5s31nAMRK6P4FLFeik8R66TYFLFeik8R66X4FLFezzo+s5o3yPnQEpHn1N27d4mOjmby5Mm88cYb/+jkpdls5vfff2fUqFG89NJLVpW8FBERERERERERERER+TO0hKz860ydOpWyZcvi6urKe++9l93d+Ut27dqFm5sb+/btY968edndHRERERERERERERERkb9MMzDlmbHW1YmDg4MzPC/vn6p+/fpWO84iIiIiIiIiIiIiIiJ/hmZgioiIiIiIiIiIiIiIiIjVUAJTRERERERERERERERERKyGEpgiIiIiIiIiIiIiIiIiYjWUwJTH8vT0JDQ09KnXlazbvn07JpOJ2NjY7O6KyFORmprKsmXLKFasGA4ODvj7+3Pq1KnHnjdnzhw8PT2xt7fHz8+PyMhIi/KEhAQGDRpEgQIFyJ07N+3atePKlSsWdS5evEiLFi1wdHSkcOHCvPPOO9y/fz/DdcqVK4eDgwNlypRh8eLF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X77MDz/8wMCBAylZsiSOjo5s3ryZMmXK4ODggKurK2PGjGHy5Ml4e3vj4+PDsmXLOHToEKtWrSrQfQ0cOJAWLVpw9OhRxo0bZ5RXqlQJs9nM22+/TZcuXdi9ezeLFi265+f22GOPUaxYMf7973/j6enJuXPnGD9+/D33M2HCBGrXrs3QoUN56aWXsLOzY8eOHTzzzDMUL16c0aNHM2rUKLKysmjevDnJycns3r0bFxcX+vXrd8/jifUzmUyEh4dbJA5vdfbs2TxlQUFBxorM/Dg4OLBgwQIWLFhglJnNZos65cuXJ+YO/0G2evXqHDx48A6zzyv3XbQiIiIiIiIiIiIi8tdi86gnIJY2b96Mp6cnnp6e+Pr68vXXX7N27Vpat2592zYhISHUr1+fgIAAWrdujYeHh8WWjwX10Ucf0ahRI3r37k2NGjUYO3asxerEB61QoUJs2LCB1NRUGjVqxKBBg5g4cSKAxYqv2ynIfU+aNIlXX32V0NBQqlevTq9evYx3cBYuXJh58+bx7rvvUrp0abp27QrA8OHDCQ4O5tVXX6V27dps3ryZTz/9lMqVKxfovpo3b07VqlVJSUmhb9++RnndunWJiIjgrbfeolatWqxatcrYXvZe2NjYsHr1ag4cOECtWrUYNWoUM2fOvOd+qlSpwtatWzl8+DCNGzfGz8+PTz75hMKFc/6uYerUqUyaNInp06dTvXp1OnbsyGeffWa8f1BERERERERERERERORhMGXf7SWGIn+i3bt307x5c06ePIm3t/ejno7cp5SUFFxdXUlOTsbFxeVRT0esiNlsJiYmhk6dOulF7SJWRvEpYr0UnyLWSbEpYr0UnyLWS/EpYr0ednwWNG+gLWTlkVq/fj1FihShcuXKnDx5khEjRtCsWTMlL0VERERERERERERERP6hlMCUR+r3339n3LhxnDt3juLFi+Pv78/s2bMf9bRERERERERERERERETkEVECUx6pvn37WrwnUkRERERERERERERERP7ZbB71BEREREREREREREREREREcimBKSIiIiIiIiIiIiIiIiJWQwlM+Udo3bo1I0eONM69vLyIjIx8ZPO5V9HR0bi5uT3QPk0mExs2bHigfcpfW3Z2NqGhoXh6euLo6Ii/vz8nTpy4a7sFCxbg5eWFg4MDvr6+xMXFWVxPS0tj2LBhFCtWjCJF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xNmzZ7lx4waFC99byJcsWZIuXbqwbNkyKlSowOeff87OnTtvW9/e3h57e/s85ba2tvpFxMq4u7tbrLTMzs7Gw8ODXbt20ahRIyDnf0ji4uIYOnRovp+fra0tDRo0IDY2lqeffhrI+V7v2LGDoKAgbG1t8fX1xdbWll27dtGjRw8Ajh07xvnz56latSq2trY0b96cN998kytXrlCyZEkg592wLi4u1K1b12JsW1tb452ta9eupXPnztjb21O7dm2+++47i/mFhITw+++/M3fuXCpWrKhEjMg9sr1+XXEjYqX0u5WIdVJsilgvxaeI9VJ8ilivhxWfBe1TCUy5L8WKFaN9+/YsXLiQUaNGWbwHMzExkVWrVtG3b19MJhNlypShVatWrFq1iuvXr9O+fXsjWVGqVClKly7N6dOn6dOnzz3NYffu3XTt2pXnn38eyEmgHD9+nBo1ahSofYcOHShevDgzZsxg/fr1ea4nJSXh5uZG9erV+eijj8jOzjaSkLt376Zo0aKUKVPmnuacn3379hmrOK9cucLx48dvuzVv/fr1OXbsmLH9bn7WrFnDxx9/zM6dO+nZsydTp07Nd3tXADs7OyBnFeetBg0aRO/evSlTpgze3t40a9bsXm9N/gJMJhMjR45k2rRpVK5cmQoVKjBp0iRKly5Nt27djHrt2rWje/fuBAUFARAcHEy/fv1o2LAhjRs3JjIykqtXrxIYGAiAq6srAwcOJDg4GHd3d1xcXHjllVdo0qQJVatWBXJisEaNGrzwwgvMmDGDxMREQkJCGDZsmJEQP378OHFxcfj6+nLlyhUiIiL4/vvvee+994CcxH2tWrUs7il3xeet5SIiIiIiIiIiIiJi3ZTAlPs2f/58mjZtSkBAANOmTaNChQr88MMPjBkzhscff9xim9M+ffowefJkMjIymDNnjkU/U6ZMYfjw4bi6utKxY0fS09P55ptvuHLlisW2pLeqXLky69atY8+ePTz22GNERERw8eLFAicwnZ2dWbJkCc888wz/+te/GD58OJUqVeLXX3/lww8/5Ny5c6xevZqhQ4cSGRnJK6+8QlBQEMeOHWPy5MkEBwcb77+8H+Hh4RQrVoxSpUoxceJEihcvbpE4ulloaCidO3emXLlyPP3009jY2HD48GG+//57pk2bxoULF3j55Zd56623aN68OcuWLaNz5848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2DAjOXn8+HEOHjyIr68vV65cISIigu+//5733nvPmNvLL7/M/PnzGTFiBK+88gonTpzgjTfeYPjw4X/SUxQRERERERERERGRP5MSmCL5ePXVV2nUqBFTp06lV69e7N27l/nz57Nw4UKLert372bGjBl069aNbdu2sXbtWj777DMgZ1XjkiVLeOaZZ/jXv/7F8OHDqVSpEr/++isffvgh586dY/Xq1VSuXJnly5ezZcsWKlSowIoVK/j666+N1Wi5MjIyGDhwICEhIZw9e5bJkycTFBRkrEjz8vJi//79nD17liJFiuDu7o6vry9OTk689tprDB8+nP379xMdHX3X+/f398fPz49u3boxY8YMqlSpQnx8PJ999hndu3enYcOGD+ZBy59i7NixXL16lSFDhpCUlETz5s3ZvHkzDg4ORp1Tp07x66+/Gue9evXi8uXLhIaGkpiYiI+PD5s3b6ZUqVJGnTlz5mBjY0OPHj1IT08nICDAIkYKFSrEpk2bePnll/Hz88PZ2Zl+/foRHh5urAzOzMxk9uzZHDt2DFtbW9q0acOePXssEudly5Zly5YtjBo1ijp16vD4448zYsQIxo0b9/83eQ9bNovIXZjNEBMDycmgv4IVsS658SkiIiIiIiLyN6cEpkg+6tevz4cffkhoaChTp07F09OT8PBw+vfvb1Hv1Vdf5ZtvvmHKlCm4uLgQERFBQECAcb1r167s2bOH6dOn89xzzxnvhGzbti3Tpk0D4MUXX+TgwYP06tULk8lE7969GTp0KJ9//rnFWO3ataNy5cq0bNmS9PR0evfuTVhYmHF99OjR9OvXjxo1anD9+nXOnDmDl5cXK1euZMyYMSxevJh27doRFhbGkCFD7nj/JpOJmJgYJk6cSGBgIJcvX8bDw4OWLVtaJLDkr8FkMhEeHk54ePht65w9ezZPWVBQkLEiMz8ODg4sWLCABQsW3LZO+fLlicnnP7TmbmVcvXp1Dh48eIfZ5/Dz88uz4llERERERERERERE/p5M2be+IE9ECsTLy4uRI0cycuTIhz5W//79SUpKYsOGDQ99rAcpJSUFV1dXkpOTcXFxedTTEStiNpuJiYmhU6dOes+BiJVRfIpYL8WniHVSbIpYL8WniPVSfIpYr4cdnwXNG9g88JFFRERERERERERERERERP4gJTBFRERERERERERERERExGroHZgif1B+7wx8WKKjo/+0sURERERERERERERERB4lrcAUEREREREREREREREREauhBKaIiIiIiIiIiIiIiIiIWA0lMEVE/sKys7MJDQ3F09MTR0dH/P39OXHixF3bLViwAC8vLxwcHPD19SUuLs7ielpaGsOGDaNYsWIUKVKEHj16cPHiRYs6586d48knn8TJyYmSJUsyZswYbty4kWec6tWr4+joSNWqVVm+fHmeuURGRlK1alUcHR0pW7Yso0aNIi0t7Q88DRERERERERERERH5O1ACUx46k8nEhg0bHvU0CiQ6Oho3N7dHPQ2RApsxYwbz5s1j0aJF7N+/H2dnZwICAu6YAFyzZg3BwcFMnjyZb7/9lrp16xIQEMClS5eMOqNGjWLjxo2sXbuW2NhY4uPjeeqpp4zrmZmZPPnkk2RkZLBnzx7ee+89oqOjCQ0NNeq88847TJgwgbCwMH744QemTJnCsGHD2Lhxo1Hngw8+YPz48UyePJmjR4+ydOlS1qxZw2uvvfaAn5SIiIiIiIiIiIiI/FUogSkPRP/+/enWrVu+1xISEnjiiSce6HitW7fGZDLlOV566aUHOk50dHS+4yxZsuSBjiPyR2RnZxMZGUlISAhdu3alTp06LF++nPj4+Dv+0UBERASDBw8mMDCQGjVqsGjRIpycnIiKigIgOTmZpUuXEhERQdu2bWnQoAHLli1jz5497Nu3D4CtW7fy448/snLlSnx8fHjiiSeYOnUqCxYsICMjA4AVK1bw4osv0qtXLypWrMizzz7LkCFDeOutt4y57Nu3j2bNmvHcc8/h5eVFhw4d6N279/+vCDWZdOjQ8Wcfrq458efq+ujnokOHDssjNz5FRERERERE/uaUwJSHzsPDA3t7+wfe7+DBg0lISLA4ZsyY8cDHcXFxyTNOnz598tTLTdqI/FnOnDlDYmIi/v7+Rpmrqyu+vr7s3bs33zYZGRkcOHDAoo2NjQ3+/v5GmwMHDmA2my3qVKtWjXLlyhl19u7dS+3atSlVqpRRJyAggJSUFH744QcA0tPTcXBwsBjf0dGRuLg4zGYzAE2aNOHAgQNGwvL06dPExMTQqVOnP/xcREREREREREREROSvTQlMeehu3kL27NmzmEwmPv74Y9q0aYOTkxN169bNk2z56quvaNGihfFOvOHDh3P16lWLOk5OTnh4eFgcLi4u9zROdHQ05cqVw8nJie7du/Pf//433/nfOo6joyNhYWH4+PiwZMkSKlSoYCRqkpKSGDRoECVKlMDFxYW2bdty+PBhiz7ffPNNSpUqRdGiRRk4cCDjx4/Hx8fHuN66dWtGjhxp0aZbt27079/fOE9PT2f06NE8/vjjODs74+vry86dOy3uzc3NjS1btlC9enWKFClCx44dSUhIsOg3KiqKmjVrYm9vj6enJ0FBQQAMGDCAzp07W9Q1m82ULFmSpUuX5nlO8udLTEwEsEgi5p7nXrvVr7/+SmZm5h3bJCYmYmdnl2c75Vvr5NfHzfMKCAhgyZIlHDhwgOzsbL755huWLFmC2Wzm119/BaB3796Eh4fTvHlzbG1t8fb2pnXr1tpCVkREREREREREROQfrPCjnoD8M02cOJFZs2ZRuXJlJk6cSO/evTl58iSFCxfm1KlTdOzYkWnTphEVFcXly5cJCgoiKCiIZcuWPbBx9u/fz8CBA5k+fTrdunVj8+bNTJ48+Z76P3nyJB999BEff/wxhQoVAuCZZ57B0dGRzz//HFdXV959913atWvH8ePHcXd358MPPyQsLIwFCxbQvHlzVqxYwbx586hYseI9jR0UFMSPP/7I6tWrKV26NOvXr6djx4589913VK5cGYBr164xa9YsVqxYgY2NDc8//zyjR49m1apVQM47CoODg3nzzTd54oknSE5OZvfu3QAMGjSIli1bkpCQgKenJwCbNm3i2rVr9OrVK985paenk56ebpynpKQAOYnP3BV38se9//77DBs2zDj/5JNPgLzPNysrC5PJlO8zzy27ceOGxfXMzEyys7Mxm83cuHHDom6u7OxsMjMzMZvNZGVlGfVv1/f48eOJj4+nSZMmZGdnU6pUKZ5//nlmz55NZmYmANu3b+eNN97g7bffplGjRpw6dYpXX32VsLAwJk6cCI6O9/XMROTemf8Xd2bFn4jVMeJTv1eJWJXcmFRsilgfxaeI9VJ8ilivhx2fBe1XCUx5JEaPHs2TTz4JwJQpU6hZsyYnT56kWrVqTJ8+nT59+hgrECtXrsy8efNo1aoV77zzjrHSceHChXneRfnuu+9abO96p3Hmzp1Lx44dGTt2LABVqlRhz549bN682aLP5ORkihQpYpwXKVLEWGGWkZHB8uXLKVGiBJCzcjQuLo5Lly4Z2+bOmjWLDRs2sG7dOoYMGUJkZCQDBw5k4MCBAEybNo0vvviCtLS0Aj+/c+fOsWzZMs6dO0fp0qWNe928eTPLli3jjTfeAHJ+ECxatAhvb28gJ+kZHh5u9DNt2jReffVVRowYYZQ1atQIgKZNm1K1alVWrFhhPKNly5bxzDPPWDyPm02fPp0pU6bkKd+6dStOTk4Fvj/Jn729PbNmzTLOf/zxRwA++ugjiwT4Tz/9RIUKFYiJicnTh9lsxsbGhpiYGH777Tej/ODBg5hMJmJiYvj555/JyMjgww8/tPisf/75Z65cuUJMTAy///47J06csBjj4sWLQE5iP7e8e/fudOnShaSkJB577DG2bt2Ko6Mjhw4dwsbGhuDgYPz8/PDw8OD8+fPY2dnRo0cPpk+fTt26dbH54IMH9PRE5F5t+997cUXE+mzbtu1RT0FE8qHYFLFeik8R66X4FLFeDys+r127VqB6SmDKI1GnTh3j37mr+y5dukS1atU4fPgwR44cMVYJQs7Kr6ysLM6cOUP16tUB6NOnT84KrZvcuqXlncY5evQo3bt3t6jv5+eXJ4FZtGhRvv32W+Pcxub/d14uX768kbwEOHz4MKmpqRQrVsyij+vXr3Pq1CkAjh49yksvvZRn3B07dlBQ3333HZmZmVSpUsWiPD093WJsJycnI3kJOc/g0qVLQM5ziI+Pp127drcdZ9CgQfz73/9m7NixXLx4kc8//5z//Oc/t60/YcIEgoODjfOUlBTKli1Lhw4djO195cHJzs7mjTfewGw2G++MTElJ4eTJk4wfP/6275Fs0KABKSkpxvWsrCyGDRvGyy+/TKdOnWjWrBlTp06lcOHCRp1jx45x+fJlAgMD8fX1xcbGhnXr1tGwYUNKliwJwJIlS3BxcWHw4MG3fe9tZGQk//rXvwgICGDbtm3Y29vj7e1tMdeUlBQKFSrEE088QSF39wf2vESkYMyOjmyLiqL9gAHYXr/+qKcjIjcx4rN9e2xtbR/1dETkf8xmM9u2bVNsilghxaeI9VJ8ilivhx2fuTs33o0SmPJI3PylN5lMQE4SBSA1NZUXX3yR4cOH52lXrlw549+urq5UqlTpD49TUDY2Nrcdx9nZ2eI8NTUVT09Pi3dR5rr1fYJ3GzM7O9ui7OZl1ampqRQqVIgDBw4YW9fmunnF3K0/XEwmk9GvYwG2Buzbty/jx49n79697NmzhwoVKtCiRYvb1re3t883cWVra6tfRB6SkSNHMn36dKpVq0aFChWYNGkSpUuX5umnnzaeebt27ejevbvxftNXX32Vfv360bhxYxo3bkxkZCRXr15l0KBB2NraUrx4cQYOHMjYsWMpWbIkLi4uvPLKK/j5+dG8eXMAOnXqRI0aNRgwYAAzZswgMTGRyZMnM2zYMOM7ePz4ceLi4vD19eXKlStERETwww8/sHz5cmNunTt3Zu7cuTRs2BBfX19OnjzJlClT6NKlS85qayVPRB4Z2+vXlcAUsVL63UrEOik2RayX4lPEeik+RazXw4rPgvapBKZYnfr16/Pjjz/eNTl5v6pXr87+/fstyvbt23dffdavX5/ExEQKFy6Ml5fXHcft27fvbcctUaIECQkJxnlmZibff/89bdq0AaBevXpkZmZy6dKlOyYU76Ro0aJ4eXmxfft2o99bFStWjG7durFs2TL27t1LYGDgHxpLHp6xY8dy9epVhgwZQlJSEs2bN2fz5s3GVssAp06d4tdffzXOe/XqxeXLlwkNDSUxMREfHx82b95ssYJ5zpw52NjY0KNHD9LT0wkICGDhwoXG9UKFCrFp0yZefvll/Pz8cHZ2pl+/fhZbFGdmZjJ79myOHTuGra0tbdq0Yc+ePXh5eRkJ+ddee43ChQsTEhLCL7/8QokSJejSpQuvv/56Tie3JPJF5E9gNkNMDCQng/5PpIh1yY1PERERERERkb85JTDlgUlOTubQoUMWZbdupVoQ48aNo0mTJgQFBTFo0CCcnZ358ccf2bZtG/PnzzfqXbt2zXgXZS57e3see+yxAo0zfPhwmjVrxqxZs+jatStbtmzJs33svfL398fPz49u3boxY8YMqlSpQnx8PJ999hndu3enYcOGjBgxgv79+9OwYUOaNWvGqlWr+OGHHyzeYdi2bVuCg4P57LPP8Pb2JiIigqSkJON6lSpV6NOnD3379mX27NnUq1ePy5cvs337durUqWO89/NuwsLCeOmllyhZsiRPPPEEv//+O7t37+aVV14x6gwaNIjOnTuTmZlJv3797uv5yINnMpkIDw+3SBze6uzZs3nKgoKCjBWZ+XFwcGDBggUsWLDgtnXKly+f73s2c1WvXp2DBw/e9jpA4cKFmTx5MpMnT75jPRERERERERERERH557C5exWRgtm5cyf16tWzOKZMmXLP/dSpU4fY2FiOHz9OixYtqFevHqGhoZQuXdqi3uLFi/H09LQ4evfuXeBxmjRpwuLFi5k7dy5169Zl69athISE3PN8b2YymYiJiaFly5YEBgZSpUoVnn32WX7++WdjdVuvXr2YNGkSY8eOpUGDBvz888+8/PLLFv0MGDCAfv360bdvX1q1akXFihXzrJJctmwZffv25dVXX6Vq1ap069aNr7/+2mKb3bvp168fkZGRLFy4kJo1a9K5c2dOnDhhUcff3x9PT08CAgLyfAYiIiIiIiIiIiIiIiIPmin71hfticifLiwsjA0bNuRZwWoNUlNTefzxx1m2bBlPPfXUPbVNSUnB1dWV5ORkXFxcHtIM5a/IbDYTExNDp06d9J4DESuj+BSxXopPEeuk2BSxXopPEeul+BSxXg87PguaN9AWsiKSr6ysLH799Vdmz56Nm5sb//rXvx71lERERERERERERERE5B9ACUwRyde5c+eoUKECZcqUITo6msKF9eNCREREREREREREREQePmUkRKxAWFgYYWFhj3oaFry8vNAO0yIiIiIiIiIiIiIi8mezedQTEBERERERERERERERERHJpQSmiIiIiIiIiIiIiIiIiFgNJTBFRB6B7OxsQkND8fT0xNHREX9/f06cOHHXdgsWLMDLywsHBwd8fX2Ji4uzuJ6WlsawYcMoVqwYRYoUoUePHly8eNGizvDhw2nQoAH29vb4+PjkO86RI0do0aIFDg4OlC1blhkzZlhcX7x4MS1atOCxxx7jsccew9/fP89cRERERERERERERET+CCUw/+G8vLyIjIx84HXl/p09exaTycShQ4ce9VTkIZgxYwbz5s1j0aJF7N+/H2dnZwICAkhLS7ttmzVr1hAcHMzkyZP59ttvqVu3LgEBAVy6dMmoM2rUKDZu3MjatWuJjY0lPj6ep556Kk9fAwYMoFevXvmOk5KSQocOHShfvjwHDhxg5syZhIWF8e9//9uos3PnTnr37s2OHTvYu3cvZcuWpUOHDvzyyy/38VRERERERERERERERJTAtFr9+/fHZDJhMpmwtbWlVKlStG/fnqioKLKysh7YOF9//TVDhgx54HUL6ub7vPk4efLkfffdunVrRo4cef+T/B8vLy9MJhOrV6/Oc61mzZqYTCaio6Mf2Hhly5YlISGB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iIiIiIiIiPzDKYEpVuP3339n3LhxnDt3juLFi+Pv78/s2bMf9bT+lkwmEzExMbz++uukpaVRtWpVPvroI/z9/R/11ERERERERERERERE5B9OCUyxGn379qVv376Pehr/CI6OjnzxxRePehoiIiIiIiIiIiIiIiJ52DzqCYiIiIiIiIiIiIiIiIiI5FICU0RERERERERERERERESshhKYIiIiIiIiIiIiIiIiImI1lMCUv5SdO3diMplISkp61FOxKmFhYfj4+Bjn/fv3p1u3bsZ569atGTly5J8+L8mRnZ1NaGgonp6eODo64u/vz4kTJ+7absGCBXh5eeHg4ICvry9xcXEW19PS0hg2bBjFihWjSJEi9OjRg4sXL1rUGT58OA0aNMDe3t7iO3KzI0eO0KJFCxwcHChbtiwzZsywuP7xxx/TsGFD3NzccHZ2xsfHhxUrVtzbQxARERERERERERERKSAlMMUq7d27l0KFCvHkk08+6qk8cl5eXphMptse/fv3Z/To0Wzfvv22fXz88cdMnTr1T5y13GzGjBnMmzePRYsWsX//fpydnQkICCAtLe22bdasWUNwcDCTJ0/m22+/pW7dugQEBHDp0iWjzqhRo9i4cSNr164lNjaW+Ph4nnrqqTx9DRgwgF69euU7TkpKCh06dKB8+fIcOHCAmTNnEhYWxr///W+jjru7OxMnTmTv3r0cOXKEwMBAAgMD2bJlS04Fk+neD1fXnLaurn+svQ4dOh7eofjUocN6j9z4FBEREREREfmbK/yoJyCSn6VLl/LKK6+wdOlS4uPjKV269KOekoXs7GwyMzMpXPjhh9DXX39NZmYmAHv27KFHjx4cO3YMFxcXABwdHSlSpAhFihS5bR/u7u4PfZ6Sv+zsbCIjIwkJCaFr164ALF++nFKlSrFhwwaeffbZfNtFREQwePBgAgMDAVi0aBGfffYZUVFRjB8/nuTkZJYuXcr7779P27ZtAVi2bBnVq1dn3759NGnSBIB58+YBcPnyZY4cOZJnnFWrVpGRkUFUVBR2dnbUrFmTQ4cOERERwZAhQ4CcFbw3GzFiBO+99x5fffUVAQEB9/+QRERERERERERERERuohWYYnVSU1NZs2YNL7/8Mk8++STR0dF3rB8dHU25cuVwcnKie/fuzJ49Gzc3N+P6rdupAowcOdIiKZOVlcX06dOp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WVy5csV4nqm7uzuRkZGMGTMGT09PypYty5NPPkloaCgPPvig0e/x48e5fPkyWVlZXLt2zVghW6dOHRwcHHjssceYNGkSkZGRjBs3ji+//JLZs2cTHx9v9NGxY0dmzpxJgwYNCAkJ4fjx47z44ot07Nix2EpeERERERERERERERFbpgSmyG2YNm0aQUFBBAQEGGUVKlQgKysLi8VibK/68+1k76batWuTmppqVbZnzx6r84CAAPbt20e/fv2Msn379hmvvb298fX15eTJk/Tt2/emY5UtW5ZevXrRq1cvunfvTvv27fnxxx+tVjD+HYwdO5YrV64wdOhQLl26RPPmzUlKSsLJycmoc+LECb7//nvjvFevXly4cIGYmBiysrIICgoiKSkJb29vo058fDx2dnZ069aNvLw8wsPDmT9/vtXYgwcPJiUlxThv0KABABkZGfj7++Pu7s6mTZsYOXIkwcHBlC9fnpiYGIYOHWq0iY6OxmQyER0dzbfffkuFChXo2LEjL7/8clEFW9st3GyGjRshOxv0v+xEbIviU8R23YhPERERERERkb85JTBFbkO9evXo27cvCQkJRlnr1q25cOECcXFxdO/enaSkJD7++OM79qzHS5cukZWVZVVWpkwZXF1diYqKolmzZrz22mt06tSJ//73v1bbxwI8+eSTDBkyhEaNGtG0aVPWrFnDwYMHqVq1qlFn0qRJREVF4e7uTvv27cnLy+Ozzz7j4sWLjBkzhpkzZ1KpUiUaNGiAnZ0da9euxcfHx+p5jn8XJpOJyZMnM3ny5JvWufFs058bNWqUsSKzJE5OTsybN4958+bdtM62bdtuOb/69euzY8eOm14vXbo0EydOZOLEibfsS0RERERERERERETEltnduoqIAEyePNlqm9fatWszf/585s2bR2BgIHv37v3dz8ksycCBA6lUqZLVMWfOHAAefPBBFi5cyOzZswkMDGTTpk1ER0dbte/bty/jx4/n2WefNbaCHTBggNWKwsGDB7No0SKWLl1KvXr1aNWqFYmJidx///1AUcI0Li6ORo0a0bhxY06dOsXGjRutnukpIiIiIiIiIiIiIiJyJ5ksv3yIn4j8bbVt2xYfHx+WL1/+p4yXk5ODu7s72dnZd2xlqvw9mM1mNm7cSEREhB7ULmJjFJ8itkvxKWKbFJsitkvxKWK7FJ8itutux+ft5g20hazI39TVq1dZsGAB4eHhlCpVirfffpvNmzeTnJx8r6cmIiIiIiIiIiIiIiJyU0pgivxNmUwmNm7cyMsvv0xubi4BAQG89957hIWF3eupiYiIiIiIiIiIiIiI3JQSmCJ/U87OzmzevPleT0NEREREREREREREROQ3sbvXExARERERERERERERERERuUEJTBERERERERERERERERGxGUpgivzNmEwm1q9ff6+n8ZdjsViIiYmhUqVKODs7ExYWxrFjx27Zbt68efj7++Pk5ERISAh79+61up6bm8vIkSPx8vLCzc2Nbt268d1331nViYqKIjg4GEdHR4KCgkoc5+DBg7Ro0QInJyf8/PyIi4srVmfWrFkEBATg7OyMn58fTz/9NLm5ubd/E0REREREREREREREbIASmPK3N2DAAEwmE9OmTbMqX79+PSaT6a6N+91332Fvb8/q1atLvB4ZGUnDhg1/d/+xsbElJrsyMzPp0KHD7+73nyouLo6EhAQWLFhAamoqrq6uhIeH/2oCcM2aNYwZM4aJEyfy+eefExgYSHh4OOfPnzfqPP3003z44YesXbuWlJQUzp07R9euXYv1NWjQIHr16lXiODk5ObRr144qVaqwf/9+pk+fTmxsLG+++aZRZ9WqVTz//PNMnDiR9PR0Fi9ezJo1a5gwYcIfuCsiIiIiIiIiIiIiIn8+JTDlH8HJyYlXX32Vixcv/mljent788gjj7BkyZJi165cucI777xDZGTkb+7XYrFw/fr1m1738fHB0dHxN/f7T2axWJg1axbR0dF06tSJ+vXrs2zZMs6dO/erq1lnzpzJkCFDGDhwIHXq1GHBggW4uLgYn3l2djaLFy9m5syZtGnThuDgYJYuXcquXbvYs2eP0U9CQgIjR46katWqJY6zcuVK8vPzWbJkCXXr1qV3795ERUUxc+ZMo86uXbto1qwZjz32GP7+/rRr144+ffr8/xWhJpNtHe7uRfNyd7/3c9GhQ4f1ofjUocN2jxvxKSIiIiIiIvI3pwSm/COEhYXh4+PD1KlTS7xe0mrGWbNm4e/vb5wPGDCAzp0788orr+Dt7Y2HhweTJ0/m+vXrPPfcc3h6enLfffexdOlSo01kZCRbtmzh9OnTVn2vXbuW69ev07dvXwoLC5k6dSr3338/zs7OBAYG8u677xp1t23bhslk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uu7k5MS8efP48ccfuXLlCuvWrcPHx8eqzrZt27BYLMUOf39/o079+vXZsWMHubm5nD17lnHjxln1Ubp0aSZOnMjx48e5du0ap0+fZt68eVbP3hQRERERERERERER+SswWX754D8RkTskJycHd3d3srOz79hqVvl7MJvNbNy4kYiICD3nQMTGKD5FbJfiU8Q2KTZFbJfiU8R2KT5FbNfdjs/bzRtoBaaIiIiIiIiIiIiIiIiI2AwlMEVERERERERERERERETEZiiBKSIiIiIiIiIiIiIiIiI2QwlMEREREREREREREREREbEZSmCKiIiIiIiIiIiIiIiIiM1QAlNEREREREREREREREREbIYSmGKTYmNjCQoKutfTkJ85deoUJpOJtLS0ez2VP8xisRATE0OlSpVwdnYmLCyMY8eO3bLdvHnz8Pf3x8nJiZCQEPbu3Wt1PTc3l5EjR+Ll5YWbmxvdunXju+++s6oTFRVFcHAwjo6ON/2OHzx4kBYtWuDk5ISfnx9xcXFW181mM5MnT6ZatWo4OTkRGBhIUlLSb7sJIiIiIiIiIiIiIiI2SglMAWDAgAGYTCbj8PLyon379hw8ePBeT82Qk5PDCy+8QK1atXBycsLHx4ewsDDWrVuHxWK519P70/j7+zNr1qxi5Ur63r64uDgSEhJYsGABqampuLq6Eh4eTm5u7k3brFmzhjFjxjBx4kQ+//xzAgMDCQ8P5/z580adp59+mg8//JC1a9eSkpLCuXPn6Nq1a7G+Bg0aRK9evUocJycnh3bt2lGlShX279/P9OnTiY2N5c033zTqREdH88YbbzBnzhwOHz7MsGHD6NKlC1988UVRBZPJ9g9396K5urvf+7no0KHD+lB86tBhu8eN+BQRERERERH5m1MCUwzt27cnMzOTzMxMtmzZQunSpXn00Ufv6phms/m26l26dImmTZuybNkyxo8fz+eff8727dvp1asXY8eOJTs7+67O89fk5+ffs7Hlt7NYLMyaNYvo6Gg6depE/fr1WbZsGefOnWP9+vU3bTdz5kyGDBnCwIEDqVOnDgsWLMDFxYUlS5YAkJ2dzeLFi5k5cyZt2rQhODiYpUuXsmvXLvbs2WP0k5CQwMiRI6latWqJ46xcuZL8/HyWLFlC3bp16d27N1FRUcycOdOos3z5ciZMmEBERARVq1Zl+PDhRERE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uVGjRg2OHz/OU089RbNmze5o8lJEREREREREREREROT3UAJT5B/op59+Yty4cZw+fZry5csTFhbGjBkz7vW0RERERERERERERERElMCUvzftkFyyfv360a9fv3s9DRERERERERERERERkWLs7vUERERERERERERERERERERuUAJTRERERERERERERERERGyGEpgi8o9jsViIiYmhUqVKODs7ExYWxrFjx27Zbt68efj7++Pk5ERISAh79+61up6bm8vIkSPx8vLCzc2Nbt268d1331nViYqKIjg4GEdHR4KCgkoc5+DBg7Ro0QInJyf8/PyIi4uzum42m5k8eTLVqlXDycmJwMBAkpKSfttNEBERERERERERERGxUUpgivwNDRgwgM6dO9/radisuLg4EhISWLBgAampqbi6uhIeHk5ubu5N26xZs4YxY8YwceJEPv/8cwIDAwkPD+f8+fNGnaeffpoPP/yQtWvXkpKSwrlz5+jatWuxvgYNGkSvXr1KHCcnJ4d27dpRpUoV9u/fz/Tp04mNjeXNN9806kRHR/PGG28wZ84cDh8+zLBhw+jSpQtffPHFH7grIiIiIiIiIiIiIiK2QQlM+UsYMGAAJpOJadOmWZWvX78ek8l018c3mUysX7/+ro9zuxYuXEhgYCBubm54eHjQoEEDpk6dalyfPXs2iYmJxnnr1q0ZPXr0nz9RG2SxWJg1axbR0dF06tSJ+vXrs2zZMs6dO/ern/HMmTMZMmQIAwcOpE6dOixYsAAXFxeWLFkCQHZ2NosXL2bmzJm0adOG4OBgli5dyq5du9izZ4/RT0JCAiNHjqRq1aoljrNy5Ury8/NZsmQJdevWpXfv3kRFRTFz5kyjzvLly5kwYQIRERFUrVqV4cOHExERwYwZM4oqmEy2f7i7F83V3f3ez0WHDh3Wh+JThw7bPW7Ep4iIiIiIiMjfnBKY8pfh5OTEq6++ysWLF+/1VO4Zs9nMkiVLGD16NFFRUaSlpbFz507Gjh3L5cuXjXru7u54eHjcu4nasIyMDLKysggLCzPK3N3dCQkJYffu3SW2yc/PZ//+/VZt7OzsCAsLM9rs378fs9lsVadWrVpUrlz5pv2WZPfu3bRs2RIHBwejLDw8nCNHjhjf/by8PJycnKzaOTs78+mnn972OCIiIiIiIiIiIiIitqr0vZ6AyO0KCwvj+PHjTJ06tdgzAQFiY2NZv349aWlpRtmsWbOYNWsWp06dAopWcl66dIkmTZowe/Zs8vLyGDNmDBMmTGD8+PEsXrwYFxcXXnrpJQYOHFjiPE6dOsX999/Pe++9x5w5c0hNTaVGjRosWLCA0NBQABITExk9ejRr1qxh9OjRnDlzhubNm7N06VIqVapk9LVo0SJmzJhBRkYG/v7+REVFMWLECKtxVq9ezfz580lNTWXBggVs2LCBnj17EhkZafRTt25dqzneeJ/r169nwIABpKSkkJKSwuzZswGM8b788kuee+45duzYgaurK+3atSM+Pp7y5csD8O677zJp0iSOHz+Oi4sLDRo04IMPPsDV1bXEe5OXl0deXp5xnpOTAxQlXs1mc4lt/mxnz54FwNPT02pOFSpU4Ny5cyXOMzMzk4KCAry8vKyuly9fnvT0dMxmM2fPnsXBwQFXV1erOhUrVuTbb78t1m9BQQEWi6VYeWZmJv7+/lblnp6eAJw5cwY3Nzfatm3LjBkzCA0NpVq1anzyySesW7eOgoKConbOzn/gDv05zP+bo/kvMFeRfxrFp4jtMuLTRn5XiUiRGzGp2BSxPYpPEdul+BSxXXc7Pm+3XyUw5S+jVKlSvPLKKzz22GNERUVx3333/a5+PvnkE+677z62b9/Ozp07iYyMZNeuXbRs2ZLU1FTWrFnDE088Qdu2bX91jBdeeIHXXnuNGjVq8MILL9CnTx+OHz9O6dJFYXX16lVee+01li9fjp2dHf/3f//Hs88+y8qVK4GirUJjYmKYO3cuDRo04IsvvmDIkCG4urrSv39/Y5znn3+eGTNm0KBBA5ycnNizZw8pKSl88803VKlS5Zbvd/bs2Rw9epQHHniAyZMnA0XJukuXLtGmTRsGDx5MfHw8165dY9y4cfTs2ZNPPvmEzMxM+vTpQ1xcHF26dOGnn35ix44dWCyWm441depUJk2aVKx806ZNuLi43HKud0NKSgqvv/66cR4dHQ3Ali1bjMQgFCUOTSYTGzduLNbHjz/+CMCuXbuM1wAnT57k0qVLbNy4kbS0NAoLC4u1z87O5uTJk8XKjx07Rk5OTrHyCxcuYGdnZ1V+5swZALZv305GRgYRERFkZGRQr149AHx8fGjdujVbtmwpavf227d/g+6x5P9twSsitkfxKWK7kpOT7/UURKQEik0R26X4FLFdik8R23W34vPq1au3VU8JTPlL6dKlC0FBQUycOJHFixf/rj48PT1JSEjAzs6OgIAA4uLiuHr1KhMmTABg/PjxTJs2jU8//ZTevXvftJ9nn32WRx55BIBJkyZRt25djh8/Tq1atYCi/0WwYMECqlWrBsCoUaOMBCLAxIkTmTFjBl27dgXg/vvv5/Dhw7zxxhtWCczRo0cbdW6069q1K/7+/tSsWZPQ0FAiIiLo3r07dnbFd4V2d3fHwcEBFxcXfHx8jPIbidNXXnnFKFuyZAl+fn4cPXqUy5cvc/36dbp27WokSm8kzG5m/PjxjBkzxjjPycnBz8+Pdu3aUbZs2V9te7e0aNGCIUOGGOd5eXlER0fzwAMPEBQUZJTPmDGDwMBAIiIiivWRn5/PkCFDqFatmtX1d999l4CAACIiInB2diY+Pp6mTZtabd8bFRVF06ZNi/X72WefkZ6eXqx87dq15OTkWJVv27YNgJ49e1KuXDkA+vTpQ25uLj/88AO+vr5MmDCBU6dOFbX7Czwfy+zsTPKSJbQdNAj7a9fu9XRE5GcUnyK2y4jPtm2xt7e/19MRkf8xm80kJycrNkVskOJTxHYpPkVs192Ozxs7N96KEpjyl/Pqq6/Spk0bnn322d/Vvm7dulaJPm9vbx544AHjvFSpUnh5eXH+/Plf7ad+/frG6xvbwp4/f95IYLq4uBjJyxt1bvR55coVTpw4QWRkpFVy7fr167j/IvnUqFEjq/NKlSqxe/duvvzyS7Zv386uXbvo378/ixYtIikpqcQkZkkOHDjA1q1bcXNzK3btxIkTtGvXjocffph69eoRHh5Ou3bt6N69u5FAK4mjoyOOjo7Fyu3t7e/ZDxFPT0+rlZYWiwUfHx+2b99O48aNgaI/mHv37mXEiBElztPe3p7g4GBSUlLo3r07AIWFhWzdupVRo0Zhb29PSEgI9vb2bN++nW7dugFw5MgRTp8+TfPmzYv1W6pUKUwmU7HyZs2a8cILLxjjAmzdupWAgAAqVqxYbF5lypTBbDazfv16evbsWdTmL5RwsL92TQkSERul+BSxXffyt5WI3JxiU8R2KT5FbJfiU8R23a34vN0+by/TIWJDWrZsSXh4OOPHj7cqt7OzK7a9aUl7Kf8yOEpKIplMJgoLC391Hj9vYzKZAKzalNTnjfldvnwZgIULF5KWlmYcX375JXv27LFqd7PnTT7wwAOMGDGCFStWkJycTHJyMikpKb8655+7fPkyHTt2tBo/LS2NY8eO0bJlS0qVKkVycjIff/wxderUYc6cOQQEBJCRkXHbY9gik8nE6NGjmTJlChs2bODQoUP069cPX19fOnfubNR7+OGHmTt3rnE+ZswYFi5cyFtvvUV6ejrDhw/nypUrxrNS3d3diYyMZMyYMWzdupX9+/czcOBAQkNDefDBB41+jh8/TlpaGllZWVy7ds247/n5+QA89thjODg4EBkZyVdffcWaNWuYPXu21crW1NRU1q1bx8mTJ9mxYwft27ensLCQsWPH3uW7JyIiIiIiIiIiIiJy92kFpvwlTZs2jaCgIAICAoyyChUqkJWVhcViMRKKaWlp92iGv87b2xtfX19OnjxJ3759/3B/derUAYpWdpbEwcGBgoICq7KGDRvy3nvv4e/vbzy385dMJhPNmjWjWbNmxMTEUKVKFd5//32rZNpf0dixY7ly5QpDhw7l0qVLNG/enKSkJJycnIw6J06c4PvvvzfOe/XqxYULF4iJiSErK4ugoCCSkpLw9vY26sTHx2NnZ0e3bt3Iy8sjPDyc+fPnW409ePBgq0RzgwYNAMjIyMDf3x93d3c2bdrEyJEjCQ4Opnz58sTExDB06FCjTW5uLtHR0Zw8eRI3NzciIiJYvnz5/9+69leeU2ozzGbYuBGys0H/y07Etig+RWzXjfgUERERERER+ZtTAlP+kurVq0ffvn1JSEgwylq3bs2FCxeIi4uje/fuJCUl8fHHH9+zZy/eyqRJk4iKisLd3Z327duTl5fHZ599xsWLF381QTh8+HB8fX1p06YN9913H5mZmUyZMoUKFSoQGhpaYht/f39SU1M5deoUbm5ueHp6MnLkSBYuXEifPn0YO3Ysnp6eHD9+nNWrV7No0SI+++wztmzZQrt27ahYsSKpqalcuHCB2rVr361b8qcxmUxMnjzZ6pmkv3Tq1KliZaNGjWLUqFE3bePk5MS8efOYN2/eTevceJ7lr6lfvz47duy46fVWrVpx+PDhW/YjIiIiIiIiIiIiIvJXpC1k5S9r8uTJVlu21q5dm/nz5zNv3jwCAwPZu3fv735O5p9h8ODBLFq0iKVLl1KvXj1atWpFYmIi999//6+2CwsLY8+ePfTo0YOaNWvSrVs3nJyc2LJlC15eXiW2efbZZylVqhR16tShQoUKnD59Gl9fX3bu3ElBQQHt2rWjXr16jB49Gg8PD+zs7Chbtizbt28nIiKCmjVrEh0dzYwZM+jQocPduB0iIiIiIiIiIiIiIiIAmCy/fGigiMgdkpOTg7u7O9nZ2Ta7ElbuDbPZzMaNG4mIiNCD2kVsjOJTxHYpPkVsk2JTxHYpPkVsl+JTxHbd7fi83byBVmCKiIiIiIiIiIiIiIiIiM1QAlNEREREREREREREREREbIYSmCIiIiIiIiIiIiIiIiJiM5TAFBERERERERERERERERGboQSmiIiIiIiIiIiIiIiIiNgMJTBF7qIBAwbQuXPnez0N+QWLxUJMTAyVKlXC2dmZsLAwjh07dst28+bNw9/fHycnJ0JCQti7d6/V9dzcXEaOHImXlxdubm5069aN7777zqpOVFQUwcHBODo6EhQUVOI4Bw8epEWLFjg5OeHn50dcXJzVdbPZzOTJk6lWrRpOTk4EBgaSlJT0226CiIiIiIiIiIiIiIiNUgJT5HcymUy/esTGxjJ79mwSExPv9VRvS2xs7E0Tan83cXFxJCQksGDBAlJTU3F1dSU8PJzc3NybtlmzZg1jxoxh4sSJfP755wQGBhIeHs758+eNOk8//TQffvgha9euJSUlhXPnztG1a9difQ0aNIhevXqVOE5OTg7t2rWjSpUq7N+/n+nTpxMbG8ubb75p1ImOjuaNN95gzpw5HD58mGHDhtGlSxe++OKLP3BXRERERERERERERERsQ+l7PQGRv6rMzEzj9Zo1a4iJieHIkSNGmZubG25ubvdiavIrLBYLs2bNIjo6mk6dOgGwbNkyvL29Wb9+Pb179y6x3cyZMxkyZAgDBw4EYMGCBfznP/9hyZIlPP/882RnZ7N48WJWrVpFmzZtAFi6dCm1a9dmz549PPjggwAkJCQAcOHCBQ4ePFhsnJUrV5Kfn8+SJUtwcHCgbt26pKWlMXPmTIYOHQrA8uXLeeGFF4iIiABg+PDhbN68mRkzZrBixQowme7gHbtLnJ3h7bfB3R2uXbvXsxGRn1N8itiuG/EpIiIiIiIi8jenFZgiv5OPj49xuLu7YzKZrMrc3NyKbSHbunVrnnzySUaPHk25cuXw9vZm4cKFXLlyhYEDB1KmTBmqV6/Oxx9/bDXWl19+SYcOHXBzc8Pb25vHH3+c77//3riel5dHVFQUFStWxMnJiebNm7Nv3z7jemJiIh4eHlZ9rl+/HtP/El2JiYlMmjSJAwcOGCtIExMTsVgsxMbGUrlyZRwdHfH19SUqKurO38w/UUZGBllZWYSFhRll7u7uhISEsHv37hLb5Ofns3//fqs2dnZ2hIWFGW3279+P2Wy2qlOrVi0qV658035Lsnv3blq2bImDg4NRFh4ezpEjR7h48SJQ9Hk7OTlZtXN2dubTTz+97XFERERERERERERERGyVVmCK/Mneeustxo4dy969e1mzZg3Dhw/n/fffp0uXLkyYMIH4+Hgef/xxTp8+jYuLC5cuXaJNmzYMHjyY+Ph4rl27xrhx4+jZsyeffPIJAGPHjuW9997jrbfeokqVKsTFxREeHs7x48fx9PS85Zx69erFl19+SVJSEps3bwaKknrvvfce8fHxrF69mrp165KVlcWBAwdu2k9eXh55eXnGeU5ODlD0zEaz2fxHbtsdc/bsWQA8PT2t5lShQgXOnTtX4jwzMzMpKCjAy8vL6nr58uVJT0/HbDZz9uxZHBwccHV1tapTsWJFvv3222L9FhQUYLFYipVnZmbi7+9vVX7jMzxz5gxubm60bduWGTNmEBoaSrVq1fjkk09Yt24dBQUFRe2cnf/AHfpzmP83R/NfYK4i/zSKTxHbZcSnjfyuEpEiN2JSsSliexSfIrZL8Sliu+52fN5uv0pgivzJAgMDiY6OBmD8+PFMmzaN8uXLM2TIEABiYmJ4/fXXOXjwIA8++CBz586lQYMGvPLKK0YfS5Yswc/Pj6NHj/Kvf/2L119/ncTERDp06ADAwoULSU5OZvHixTz33HO3nJOzszNubm6ULl0aHx8fo/z06dP4+PgQFhaGvb09lStXpkmTJjftZ+rUqUyaNKlY+aZNm3Bxcbm9G3SHpaSk8PrrrxvnN+79li1brJK7mZmZmEwmNm7cWKyPH3/8EYBdu3YZrwFOnjzJpUuX2LhxI2lpaRQWFhZrn52dzcmTJ4uVHzt2jJycnGLlFy5cwM7Ozqr8zJkzAGzfvp2MjAwiIiLIyMigXr16QNFq4NatW7Nly5aidn+hreWSlyy511MQkZtQfIrYruTk5Hs9BREpgWJTxHYpPkVsl+JTxHbdrfi8evXqbdVTAlPkT1a/fn3jdalSpfDy8jISUQDe3t4AnD9/HoADBw6wdevWEp+neeLECXJzczGbzTRr1swot7e3p0mTJqSnp/+hufbo0YNZs2ZRtWpV2rdvT0REBB07dqR06ZL/dIwfP54xY8YY5zk5Ofj5+dGuXTvKli37h+bye7Vo0cJIDkPRKtHo6GgeeOABgoKCjPIZM2YQGBhoPFfy5/Lz8xkyZAjVqlWzuv7uu+8SEBBAREQEzs7OxMfH07RpU6vteqOiomjatGmxfj/77DPS09OLla9du5acnByr8m3btgHQs2dPypUrB0CfPn3Izc3lhx9+wNfXlwkTJnDq1Kmidu7uv/k+/dnMzs4kL1lC20GDsNcz9kRsiuJTxHYZ8dm2Lfb29vd6OiLyP2azmeTkZMWmiA1SfIrYLsWniO262/F5Y+fGW1ECU+RP9suAN5lMVmU3nktZWFgIwOXLl+nYsSOvvvpqsb4qVarEiRMnbjmmnZ0dFovFqux2lmn7+flx5MgRNm/eTHJyMiNGjGD69OmkpKSU+IfL0dERR0fHYuX29vb37IeIp6en1UpLi8WCj48P27dvp3HjxkDRH8y9e/cyYsSIEudpb29PcHAwKSkpdO/eHSj6fLZu3cqoUaOwt7cnJCQEe3t7tm/fTrdu3QA4cuQIp0+fpnnz5sX6LVWqVLHPHqBZs2a88MILxrgAW7duJSAggIoVKxabV5kyZTCbzaxfv56ePXsWtfkLJRzsr11TgkTERik+RWzXvfxtJSI3p9gUsV2KTxHbpfgUsV13Kz5vt0+7Oz6yiNxRDRs25KuvvsLf35/q1atbHa6urlSrVg0HBwd27txptDGbzezbt486deoARc93/Omnn7hy5YpRJy0tzWocBwcHCgoKio3v7OxMx44dSUhIYNu2bezevZtDhw7dnTf7JzCZTIwePZopU6awYcMGDh06RL9+/fD19aVz585GvYcffpi5c+ca52PGjGHhwoW89dZbpKenM3z4cK5cucLAgQOBomeGRkZGMmbMGLZu3cr+/fsZOHAgoaGhPPjgg0Y/x48fJy0tjaysLK5du0ZaWhppaWnk5+cD8Nhjj+Hg4EBkZCRfffUVa9asYfbs2VYrW1NTU1m3bh0nT55kx44dtG/fnsLCQsaOHXuX756IiIiIiIiIiIiIyN2nFZgiNm7kyJEsXLiQPn36MHbsWDw9PTl+/DirV69m0aJFuLq6Mnz4cJ577jk8PT2pXLkycXFxXL16lcjISABCQkJwcXFhwoQJREVFkZqaSmJiotU4/v7+ZGRkkJaWxn333UeZMmV4++23KSgoMNqvWLECZ2dnqlSpcg/uxJ0zduxYrly5wtChQ7l06RLNmzcnKSkJJycno86JEyf4/vvvjfNevXpx4cIFYmJiyMrKIigoiKSkJGPLX4D4+Hjs7Ozo1q0beXl5hIeHM3/+fKuxBw8eTEpKinHeoEEDADIyMvD398fd3Z1NmzYxcuRIgoODKV++PDExMQwdOtRok5ubS3R0NCdPnsTNzY2IiAiWL1/+/7eu/cVqW5tkNsPGjZCdDfpfdiK2RfEpYrtuxKeIiIiIiIjI35wSmCI2ztfXl507dzJu3DjatWtHXl4eVapUoX379tjZFS2injZtGoWFhTz++OP89NNPNGrUiP/+97/G8xI9PT1ZsWIFzz33HAsXLuThhx8mNjbWKinWrVs31q1bx0MPPcSlS5dYunQpHh4eTJs2jTFjxlBQUEC9evX48MMP8fLyuif34k4xmUxMnjyZyZMn37TOqVOnipWNGjWKUaNG3bSNk5MT8+bNY968eTetc+N5lr+mfv367Nix46bXW7VqxeHDh2/Zj4iIiIiIiIiIiIjIX5ESmCJ3wIABAxgwYECx8l+uciwpeVVSouyXz6usUaMG69atu+n4Tk5OJCQkkJCQcNM6nTt3ttoiFWDIkCHGa0dHR959990S24mIiIiIiIiIiIiIiPxZ9AxMEREREREREREREREREbEZSmCKiIiIiIiIiIiIiIiIiM1QAlNEREREREREREREREREbIYSmCIiIiIiIiIiIiIiIiJiM5TAFBERERERERERERERERGboQSmiIiIiIiIiIiIiIiIiNgMJTD/pmJjYwkKCvpNbfz9/Zk1a9Zdmc9f0alTpzCZTKSlpf2hflq3bs3o0aPvyJxuV2JiIh4eHsb57/k+/J1ZLBZiYmKoVKkSzs7OhIWFcezYsVu2mzdvHv7+/jg5ORESEsLevXutrufm5jJy5Ei8vLxwc3OjW7dufPfdd1Z1oqKiCA4OxtHR8aafycGDB2nRogVOTk74+fkRFxdndd1sNjN58mSqVauGk5MTgYGBJCUl/babICIiIiIiIiIiIiJio5TAvEMGDBiAyWQyDi8vL9q3b8/Bgwfv9dQAuHr1KuPHjzcSHhUqVKBVq1Z88MEHRp19+/YxdOhQ49xkMrF+/fo7PpevvvqKnj17UqFCBRwdHalZsyYxMTFcvXr1jo/1R/j5+ZGZmckDDzxwR/tt3bo1JpOJadOmFbv2yCOPYDKZiI2NvaNjPvvss2zZsuWO9vlXFhcXR0JCAgsWLCA1NRVXV1fCw8PJzc29aZs1a9YwZswYJk6cyOeff05gYCDh4eGcP3/eqPP000/z4YcfsnbtWlJSUjh37hxdu3Yt1tegQYPo1atXiePk5OTQrl07qlSpwv79+5k+fTqxsbG8+eabRp3o6GjeeOMN5syZw+HDhxk2bBhdunThiy++KKpgMtn+4e5eNFd393s/Fx06dFgfik8dOmz3uBGfIiIiIiIiIn9zSmDeQe3btyczM5PMzEy2bNlC6dKlefTRR+/qmGaz+bbqDRs2jHXr1jFnzhy+/vprkpKS6N69Oz/88INRp0KFCri4uNytqQKwZ88eQkJCyM/P5z//+Q9Hjx7l5ZdfJjExkbZt25Kfn39Xx/8tSpUqhY+PD6VLl77jffv5+ZGYmGhV9u2337JlyxYqVap0x8dzc3PDy8vrjvf7V2SxWJg1axbR0dF06tSJ+vXrs2zZMs6dO/erCfuZM2cyZMgQBg4cSJ06dViwYAEuLi4sWbIEgOzsbBYvXszMmTNp06YNwcHBLF26lF27drFnzx6jn4SEBEaOHEnVqlVLHGflypXk5+ezZMkS6tatS+/evYmKimLmzJlGneXLlzNhwgQiIiKoWrUqw4cPJyIighkzZtyZmyQiIiIiIiIiIiIicg8pgXkHOTo64uPjg4+PD0FBQTz//POcOXOGCxcuAHDo0CHatGmDs7MzXl5eDB06lMuXLxvt9+3bR9u2bSlfvjzu7u60atWKzz//3GoMk8nE66+/zr///W9cXV15+eWXAZg2bRre3t6UKVOGyMjIYivJNmzYYCQ8/P39CQ4O5sknn2TQoEFGnZ9vIevv7w9Aly5dMJlMxjnABx98QMOGDXFycqJq1apMmjSJ69evA0XJodjYWCpXroyjoyO+vr5ERUUZ1yIjI6lduzbr1q2jSZMmVKlShR49evDhhx+ye/du4uPjjXEuXbrEE088gbe3N05OTjzwwAN89NFHxvWdO3fSunVrXFxcKFeuHOHh4Vy8eLHYe7khKCjIamXjjXvZoUMHnJ2dqVq1Ku+++65xvaQtZL/88ks6dOiAm5sb3t7ePP7443z//ffG9StXrtCvXz/c3NyoVKnSTRNKjz76KN9//z07d+40yt566y3atWtHxYoVrerm5eXx7LPP8q9//QtXV1dCQkLYtm2bVZ3ExEQqV66Mi4sLXbp0sUpMQ/EtZG/3u7Zo0SK6dOmCi4sLNWrUYMOGDSW+n7+SjIwMsrKyCAsLM8rc3d0JCQlh9+7dJbbJz89n//79Vm3s7OwICwsz2uzfvx+z2WxVp1atWlSuXPmm/ZZk9+7dtGzZEgcHB6MsPDycI0eOGN/vvLw8nJycrNo5Ozvz6aef3vY4IiIiIiIiIiIiIiK26s4vLRMALl++zIoVK6hevTpeXl5cuXKF8PBwQkND2bdvH+fPn2fw4MGMGjXKWIn3008/0b9/f+bMmYPFYmHGjBlERERw7NgxypQpY/QdGxvLtGnTmDVrFqVLl+add94hNjaWefPm0bx5c5YvX05CQoLVCi8fHx82btxI165drfq6mX379lGxYkWWLl1K+/btKVWqFAA7duygX79+JCQk0KJFC06cOGFsOztx4kTee+894uPjWb16NXXr1iUrK4sDBw4AkJaWxuHDh1m1ahV2dta588DAQMLCwnj77bcZN24chYWFdOjQgZ9++okVK1ZQrVo1Dh8+bMwjLS2Nhx9+mEGDBjF79mxKly7N1q1bKSgo+E2f04svvsi0adOYPXs2y5cvp3fv3hw6dIjatWsXq3vp0iXatGnD4MGDiY+P59q1a4wbN46ePXvyySefAPDcc8+RkpLCBx98QMWKFZkwYQKff/55sWcdOjg40LdvX5YuXUqzZs2AoiRkXFxcse1jR40axeHDh1m9ejW+vr68//77tG/fnkOHDlGjRg1SU1OJjIxk6tSpdO7cmaSkJCZOnPir7/t2v2uTJk0iLi6O6dOnM2fOHPr27cs333yDp6dnif3m5eWRl5dnnOfk5ABFK4Vvd7Xw3Xb27FkAPD09reZUoUIFzp07V+I8MzMzKSgowMvLy+p6+fLlSU9Px2w2c/bsWRwcHHB1dbWqU7FiRb799tti/RYUFGCxWIqVZ2Zm4u/vb1V+436fOXMGNzc32rZty4wZMwgNDaVatWp88sknrFu3joKCgqJ2zs5/4A79Ocz/m6P5LzBXkX8axaeI7TLi00Z+V4lIkRsxqdgUsT2KTxHbpfgUsV13Oz5vt18lMO+gjz76CDc3N6BoJV6lSpX46KOPsLOzY9WqVeTm5rJs2TJcXV0BmDt3Lh07duTVV1/F29ubNm3aWPX35ptv4uHhQUpKitVWtI899hgDBw40znv37k1kZCSRkZEATJkyhc2bN1utwnzzzTfp27cvXl5eBAYG0rx5c7p3724kz36pQoUKAHh4eODj42OUT5o0ieeff57+/fsDULVqVV566SXGjh3LxIkTOX36ND4+PoSFhWFvb0/lypVp0qQJAEePHgUoMTl4o/zGCrLNmzezd+9e0tPTqVmzpjHWDXFxcTRq1Ij58+cbZXXr1i2x31/To0cPBg8eDMBLL71EcnIyc+bMser3hrlz59KgQQNeeeUVo2zJkiX4+flx9OhRfH19Wbx4MStWrODhhx8GilZV3nfffSWOPWjQIFq0aMHs2bPZv38/2dnZPProo1YJzNOnT7N06VJOnz6Nr68vUPQ8y6SkJJYuXcorr7zC7Nmzad++PWPHjgWgZs2a7Nq1i6SkpJu+79v9rg0YMIA+ffoA8Morr5CQkMDevXtp3759if1OnTqVSZMmFSvftGnTXd+e+GZSUlJ4/fXXjfPo6GgAtmzZYpWIzczMxGQysXHjxmJ9/PjjjwDs2rXLeA1w8uRJLl26xMaNG0lLS6OwsLBY++zsbE6ePFms/NixY+Tk5BQrv3DhAnZ2dlblZ86cAWD79u1kZGQQERFBRkYG9erVA4r+g0Lr1q3ZsmVLUbu33779G3SPJf9vC14RsT2KTxHblZycfK+nICIlUGyK2C7Fp4jtUnyK2K67FZ9Xr169rXpKYN5BDz30kJEouXjxIvPnz6dDhw5GIi4wMNBIXgI0a9aMwsJCjhw5gre3N9999x3R0dFs27aN8+fPU1BQwNWrVzl9+rTVOI0aNbI6T09PZ9iwYVZloaGhbN261Thv2bIlJ0+eZM+ePezatYstW7Ywe/ZsJk2axIsvvnjb7/HAgQPs3LnT2LoWilaS5ebmcvXqVXr06MGsWbOoWrUq7du3JyIigo4dO1o9R9JisdxynLS0NO677z4jeVnS9R49etz2vG8mNDS02PnPt4z9uQMHDrB161YjSf1zJ06c4Nq1a+Tn5xMSEmKUe3p6EhAQUGJ/gYGB1KhRg3fffZetW7fy+OOPF3ve5qFDhygoKCh2H/Ly8oxnWqanp9OlS5di7+PXEpi3+12rX7++8drV1ZWyZcty/vz5m/Y7fvx4xowZY5zn5OTg5+dHu3btKFu27E3b3U0tWrRgyJAhxnleXh7R0dE88MADVitjZ8yYQWBgIBEREcX6yM/PZ8iQIVSrVs3q+rvvvktAQAARERE4OzsTHx9P06ZN8fDwMOpERUXRtGnTYv1+9tlnpKenFytfu3YtOTk5VuU3tgzu2bMn5cqVA6BPnz7k5ubyww8/4Ovry4QJEzh16lRRO3f333yf/mxmZ2eSlyyh7aBB2F+7dq+nIyI/o/gUsV1GfLZti729/b2ejoj8j9lsJjk5WbEpYoMUnyK2S/EpYrvudnze2LnxVpTAvINcXV2pXr26cb5o0SLc3d1ZuHDhbbXv378/P/zwA7Nnz6ZKlSo4OjoSGhpKfn5+sXF+D3t7e1q0aEGLFi0YN24cU6ZMYfLkyYwbN87qeXu/5vLly0yaNImuXbsWu+bk5ISfnx9Hjhxh8+bNJCcnM2LECKZPn05KSoqRhEtPT6dBgwbF2v98taXzLbatu9V1Ozu7YonSP7rc+fLly8aK2V+qVKkSx48f/819Dho0iHnz5nH48GH27t1b4pilSpVi//79xva5N5SUSL1dt/td++UfJ5PJRGFh4U37dXR0xNHRsVi5vb39Pfsh4unpabXS0mKx4OPjw/bt22ncuDFQ9Adz7969jBgxosR52tvbExwcTEpKCt27dwegsLCQrVu3MmrUKOzt7QkJCcHe3p7t27fTrVs3AI4cOcLp06dp3rx5sX5LlSqFyWQqVt6sWTNeeOEFY1yArVu3EhAQUOz5qPb29pQpUwaz2cz69evp2bNnUZu/UMLB/to1JUhEbJTiU8R23cvfViJyc4pNEdul+BSxXYpPEdt1t+Lzdvu0u3UV+b1MJhN2dnZcu3aN2rVrc+DAAa5cuWJc37lzJ3Z2dsYKvZ07dxIVFUVERAR169bF0dGR77///pbj1K5dm9TUVKuyPXv23LJdnTp1uH79utVWsz9nb29f7JmSDRs25MiRI1SvXr3YceO5ls7OznTs2JGEhAS2bdvG7t27OXToEEFBQdSqVYv4+PhiSbADBw6wefNmY7vS+vXrc/bsWWPb2V+qX78+W7Zsuel7q1ChApmZmcZ5Tk4OGRkZxer98j7t2bPnplvcNmzYkK+++gp/f/9i793V1ZVq1aphb29v9VlcvHjxpu8BirYDPnToEA888AB16tQpdr1BgwYUFBRw/vz5YmPe2Nr393z+v/e79ndgMpkYPXo0U6ZMYcOGDRw6dIh+/frh6+tL586djXoPP/wwc+fONc7HjBnDwoULeeutt0hPT2f48OFcuXLF2M7Z3d2dyMhIxowZw9atW9m/fz8DBw4kNDSUBx980Ojn+PHjpKWlkZWVxbVr10hLSyMtLc1IHj/22GM4ODgQGRnJV199xZo1a5g9e7bVytbU1FTWrVvHyZMn2bFjB+3bt6ewsNDYRhiLxfaP7OyiuWZn3/u56NChw/pQfOrQYbvHjfgUERERERER+ZvTCsw7KC8vj6ysLKAocTV37lxj1V6TJk2YOHEi/fv3JzY2lgsXLvDkk0/y+OOP4+3tDUCNGjVYvnw5jRo1Iicnh+eee+6WKw0BnnrqKQYMGECjRo1o1qwZK1eu5KuvvrJ6ZmTr1q3p06cPjRo1wsvLi8OHDzNhwgQeeuihm27t6e/vz5YtW2jWrBmOjo6UK1eOmJgYHn30USpXrkz37t2xs7PjwIEDfPnll0yZMoXExEQKCgoICQnBxcWFFStW4OzsTJUqVTCZTCxevJi2bdvSrVs3xo8fj4+PD6mpqTzzzDOEhoYyevRoAFq1akXLli3p1q0bM2fOpHr16nz99deYTCbat2/P+PHjqVevHiNGjGDYsGE4ODiwdetWevToQfny5WnTpg2JiYl07NgRDw8PYmJiiq1ghKLtOhs1akTz5s1ZuXIle/fuZfHixSXej5EjR7Jw4UL69OnD2LFj8fT05Pjx46xevZpFixbh5uZGZGQkzz33HF5eXlSsWJEXXnjBSOyWpFy5cmRmZt70fxzUrFmTvn370q9fP2bMmEGDBg24cOECW7ZsoX79+jzyyCNERUXRrFkzXnvtNTp16sR///vfX90+Fn7/d+3vYuzYsVy5coWhQ4dy6dIlmjdvTlJSEk5OTkadEydOWCV1e/XqxYULF4iJiSErK4ugoCCSkpKM+AWIj4/Hzs6Obt26kZeXR3h4eLHnqQ4ePJiUlBTj/MZq5IyMDPz9/XF3d2fTpk2MHDmS4OBgypcvT0xMDEOHDjXa5ObmEh0dzcmTJ3FzcyMiIoLly5dbbV0rIiIiIiIiIiIiIvJXpRWYd1BSUhKVKlWiUqVKhISEsG/fPtauXUvr1q1xcXHhv//9Lz/++CONGzeme/fuxVZ4LV68mIsXL9KwYUMef/xxoqKiim0ZWZJevXrx4osvMnbsWIKDg/nmm28YPny4VZ3w8HDeeust2rVrR+3atXnyyScJDw/nnXfeuWm/M2bMIDk5GT8/PyPJEh4ezkcffcSmTZto3LgxDz74IPHx8VSpUgUADw8PFi5cSLNmzahfvz6bN2/mww8/NJ7X2LRpU/bs2UOpUqXo0KED1atXZ/z48fTv35/k5GSr7Uffe+89GjduTJ8+fahTpw5jx441VoTWrFmTTZs2ceDAAZo0aUJoaCgffPCB8QzJ8ePH06pVKx599FEeeeQROnfuTLVq1Yq9x0mTJrF69Wrq16/PsmXLePvtt0tcCQng6+vLzp07KSgooF27dtSrV4/Ro0fj4eFhJCmnT59OixYt6NixI2FhYTRv3pzg4OBf/fw8PDx+dVvgpUuX0q9fP5555hkCAgLo3Lkz+/bto3LlygA8+OCDLFy4kNmzZxMYGMimTZuIjo7+1TF/73ft78JkMjF58mSysrLIzc1l8+bNxZ4zeurUKWJjY63KRo0axTfffENeXh6pqalWzzuFom2U582bx48//siVK1dYt26dsVL2hm3btmGxWIod/v7+Rp369euzY8cOcnNzOXv2LOPGjbPqo1WrVhw+fJjc3Fy+//57li1bhq+v7x+/MSIiIiIiIiIiIiIiNsBk+eWDAkX+IUwmE++//77VtqFyZ+Xk5ODu7k52dvZNV/rKP5PZbGbjxo1EREToOQciNkbxKWK7FJ8itkmxKWK7FJ8itkvxKWK77nZ83m7eQCswRURERERERERERERERMRmKIEpIiIiIiIiIiIiIiIiIjaj9L2egMi9ot2TRUREREREREREREREbI9WYIqIiIiIiIiIiIiIiIiIzVACU0RERERERERERERERERshhKYIvKPY7FYiImJoVKlSjg7OxMWFsaxY8du2W7evHn4+/vj5ORESEgIe/futbqem5vLyJEj8fLyws3NjW7duvHdd99Z1YmKiiI4OBhHR0eCgoJKHOfgwYO0aNECJycn/Pz8iIuLs7puNpuZPHky1apVw8nJicDAQJKSkn7bTRARERERERERERERsVFKYP4N+Pv7M2vWrDte959q27ZtmEwmLl26dK+ncseYTCbWr19/r6dhM+Li4khISGDBggWk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u8PCwgKDBw9GUVERYmJiMHXq1Fe9tbVKJpMhJCQEISEhlZa5ceNGuWMTJ07ExIkTK60jl8uxbNkyLFu2rNIycXFxVY7P2toax44dq/S8i4sLLl68WGU7RERERERERERERERvIy4hS/QCOjo6cHJyQnh4OLp27Yq2bdti5syZ8PX1FZcXXbBgAQ4cOABTU1NxNl2/fv2waNEihIWFoU2bNli1ahUiIyPh6uoqtr19+3Z06NABQ4YMgZWVFaZMmVLljMhn/fDDD3jy5Anat2+P4cOHw9/fX+kZifr6+li9ejU6d+4Ma2trHDx4EHv27EH9+vUBACEhIbhx4wYsLCzQoEGDCvtwdXXFtm3bsHv3btja2qJbt25ISkqq6W0kIiIiIiIiIiIiIiKqNpkgvA1rDRLR2ygrKwt6enrIzMyErq5ubQ+HJEShUCAmJgaenp58UDuRxDA+iaSL8UkkTYxNIulifBJJF+OTSLredHxWN2/AGZhEREREREREREREREREJBlMYBIRERERERERERERERGRZDCBSURERERERERERERERESSwQQmEREREREREREREREREUkGE5hEREREREREREREREREJBlMYNJrIZPJEB0dXdvDeG1e9nqioqKgr6//2scj9b7fdoIgICgoCCYmJtDU1ISbmxuuXLlSZb1ly5bBzMwMcrkcTk5OSEpKUjqfn58PPz8/1K9fHzo6OvDy8sKDBw+Uyvj7+8Pe3h4aGhqwtbUt10d+fj68vb3Rrl071KlTB/369XuVSyUiIiIiIiIiIiIikjwmMP9h3t7ekMlkmD9/vtLx6OhoyGSyf2QMv/zyC1xcXFC3bl1oaWmhQ4cOiIqKqlbdWbNmVZhkedfJZDJx09bWRosWLeDt7Y0zZ84olRs0aBAuX778xsdjZmaGiIiIWun7XRQaGorFixdj5cqVSExMhLa2Ntzd3ZGfn19pna1btyIgIADBwcH47bffYGNjA3d3dzx8+FAs8/nnn2PPnj3Ytm0b4uPjce/ePfznP/8p19aoUaMwaNCgCvspLi6GpqYm/P394ebm9uoXS0REREREREREREQkcUxg1gK5XI5vv/0WT548+cf7XrJkCfr27YvOnTsjMTERv//+OwYPHoxx48bhiy++qLSeIAgoKir6B0cqPZGRkbh//z4uXLiAZcuWIScnB05OTli3bp1YRlNTEw0bNqy0jcLCwjc2vqr6pooJgoCIiAgEBgaib9++sLa2xrp163Dv3r0XzsJduHAhfH194ePjAysrK6xcuRJaWlpYu3YtACAzMxM//PADFi5ciG7dusHe3h6RkZE4fvw4Tp48KbazePFi+Pn5oVmzZhX2o62tjRUrVsDX1xfGxsYVD0Yme/s2Pb3Ssevp1f5YuHHjprwxPrlxk+5WFp9ERERERERE7zgmMGuBm5sbjI2NMW/evArPVzTLMSIiAmZmZuK+t7c3+vXrh7lz58LIyAj6+voICQlBUVERvvzySxgYGKBx48aIjIwU69y+fRuTJ0/GpEmTMHfuXFhZWaF58+aYPHkyvvvuOyxYsACJiYkAgLi4OMhkMuzbt09c3nLDhg2YPXs2zp07h7LZiM/O3Hz8+DH69+8PLS0ttGjRArt371a6hvj4eDg6OkJDQwMmJiaYNm2aUlI0Ozsbw4YNg7a2NkxMTBAeHg5XV1dMmjRJLPPkyROMGDEC9erVg5aWFnr16qW01GfZMqr/+9//0Lp1a+jo6MDDwwP3798Xy5w6dQo9evSAoaEh9PT04OLigt9++63K101fXx/GxsYwMzNDz5498fPPP2PYsGGYOHGimIx+fhnXstdyzZo1MDc3h1wuBwBkZGRgzJgxaNCgAXR1ddGtWzecO3dOqb89e/agQ4cOkMvlMDQ0RP/+/QEArq6uuHnzJj7//HPxdaiobwBYsWIFLCwsoK6ujlatWmH9+vVK52UyGdasWVPp6/bkyRMMGzYMDRo0gKamJlq0aKH0O/UuSEtLQ3p6utLsRj09PTg5OeHEiRMV1iksLMSZM2eU6qioqMDNzU2sc+bMGSgUCqUylpaWaNKkSaXtEhERERERERERERERUKe2B/BvpKqqirlz52Lo0KHw9/dH48aNX6qdw4cPo3Hjxjh69CgSEhIwevRoHD9+HF27dkViYiK2bt2KTz75BD169EDjxo3x888/Q6FQVDjT8pNPPsFXX32FzZs3w8nJSTw+bdo0hIWFoVmzZpDL5Zg8eTJiY2Nx8OBBAKWJnjKzZ89GaGgovvvuOyxZsgTDhg3DzZs3YWBggLt378LT0xPe3t5Yt24dLl26BF9fX8jlcsyaNQsAEBAQgISEBOzevRtGRkYICgrCb7/9ppTM9fb2xpUrV7B7927o6upi6tSp8PT0xMWLF6GmpgYAePr0KcLCwrB+/XqoqKjgv//9L7744gts3LgRQGmidOTIkViyZAkEQcCCBQvg6emJK1euoG7dujV6DT7//HOsW7cOBw4cwMCBAyssc/XqVWzfvh07duyAqqoqAGDAgAHQ1NTEvn37oKenh1WrVqF79+64fPkyDAwMsHfvXvTv3x8zZszAunXrUFhYiJiYGADAjh07YGNjg7Fjx8LX17fSse3cuROfffYZIiIi4Obmhl9++QU+Pj5o3LgxPvjgg2q9bjNnzsTFixexb98+GBoa4urVq8jLy6u0z4KCAhQUFIj7WVlZAACFQgGFQlH9G/sPunPnDgDAwMBAaYwNGjTAvXv3Khz3/fv3UVxcjPr16yudNzQ0REpKChQKBe7cuQN1dXVoa2srlWnYsCHu3r1brt3i4mIIgvDC+1RSUoKSkpLyZTQ1a3TNUqD4e8yKt3DsRO86xieRdInxKdHvVUT/VmUxydgkkh7GJ5F0MT6JpOtNx2d122UCs5b0798ftra2CA4Oxg8//PBSbRgYGGDx4sVQUVFBq1atEBoaiqdPn+Krr74CAEyfPh3z58/Hr7/+isGDB+Py5cvQ09ODiYlJubbU1dXRrFmzcs9QDAkJQY8ePcR9HR0d1KlTp8KlLL29vTFkyBAAwNy5c7F48WIkJSXBw8MDy5cvh6mpKZYuXQqZTAZLS0vcu3cPU6dORVBQEHJzc/Hjjz9i06ZN6N69O4DSJVsbNWoktl+WuExISECnTp0AABs3boSpqSmio6MxYMAAAKW//CtXroSFhQUAYOLEiQgJCRHb6datm9K4v//+e+jr6yM+Ph69e/eu5t0vZWlpCQC4ceNGpWUKCwuxbt06NGjQAADw66+/IikpCQ8fPoSGhgYAICwsDNHR0fj5558xduxYzJkzB4MHD8bs2bPFdmxsbACUvu6qqqqoW7du5UuK/t2mt7c3JkyYAKA0QXzy5EmEhYUpJTBf9LrdunULdnZ2cHBwAAClWcAVmTdvntKYy+zfvx9aWlovrPtPiY+Px4oVK8T9wMBAAMChQ4dgYGAgHr9//z5kMpmYOH7WX3/9BQA4fvy4+DMAXL9+HRkZGYiJiUFycjJKSkrK1c/MzMT169fLHb9y5QqysrIq7K/MnTt3kJubW77M5s1VXLV0Hfh7yV0ikh7GJ5F0HThwoLaHQEQVYGwSSRfjk0i6GJ9E0vWm4vPp06fVKscEZi369ttv0a1btxc+e/JF2rRpAxWV/18F2MjICG3bthX3VVVVUb9+fTx8+PClx1iWuKoOa2tr8WdtbW3o6uqKfaekpMDZ2Vlc7hQAOnfujJycHNy5cwdPnjyBQqGAo6OjeF5PTw+tWrUS91NSUlCnTh2lGaL169dHq1atkJKSIh7T0tISk5cAYGJionQPHjx4gMDAQMTFxeHhw4coLi7G06dPcevWrWpfaxlBEABA6bqe17RpUzF5CQDnzp1DTk4O6tevr1QuLy8P165dAwAkJye/cHZldaSkpGDs2LFKxzp37oxFixYpHXvR6zZ+/Hh4eXnht99+Q8+ePdGvXz8xeVyR6dOnIyAgQNzPysqCqakpevbsCV1d3Ve6ntfl/fffV7q3BQUFCAwMRNu2bZVm+y5YsAA2Njbw9PQs10ZhYSF8fX1hYWGhdP7nn39Gq1at4OnpCU1NTYSHh6NTp05KS/v6+/ujU6dO5do9ffo0UlJSKuyvzPbt25GRkVG+zFv4PCyFpiYOrF2LHqNGQe0Fs3qJ6J/H+CSSLjE+e/QQVx8hotqnUChw4MABxiaRBDE+iaSL8UkkXW86PstWbqwKE5i1qGvXrnB3d8f06dPh7e0tHldRURETY2UqmlL7/C+OTCar8FhJSQkAoGXLlsjMzMS9e/eUZjYCpQmZa9euKc3MA0oTWtX1or7/SRWN49n7OXLkSPz5559YtGgRmjZtCg0NDTg7O6OwsLDGfZUlTs3NzSst8/w9zMnJgYmJCeLi4sqVLUt0af6Dy/a96HXr1asXbt68iZiYGBw4cADdu3eHn58fwsLCKmxLQ0NDnFX6fB9S+SJiYGCgNNNSEAQYGxvj6NGj6NChA4DSN9CkpCRMmDChwnGrqanB3t4e8fHx+PjjjwGULu965MgRTJw4EWpqanBycoKamhqOHj0KLy8vAEBqaipu3bqFLl26lGtXVVW1whh+loqKClRUVMqXeYsTDGp5eUyQEEkU45NIuqT03YqI/h9jk0i6GJ9E0sX4JJKuNxWf1W1Tpeoi9CbNnz8fe/bswYkTJ8RjDRo0QHp6ulLSLTk5+ZX78vLygpqaGhYsWFDu3MqVK5GbmysuJVoZdXV1FBcX17jv1q1b48SJE0rXlJCQgLp166Jx48Zo1qwZ1NTUcOrUKfF8Zmam0pK2rVu3RlFRERITE8Vjf/75J1JTU2FlZVXtsSQkJMDf3x+enp5o06YNNDQ08Pjx4xpfEwBERERAV1cXbm5u1a7Tvn17pKeno06dOmjevLnSZmhoCKB0VuShQ4cqbaM6r0Pr1q2RkJCgdCwhIaFG9woo/X0cOXIkNmzYgIiICHz//fc1qi91MpkMkyZNwjfffIPdu3fj/PnzGDFiBBo1aoR+/fqJ5bp3746lS5eK+wEBAVi9ejV+/PFHpKSkYPz48cjNzYWPjw+A0hnEo0ePRkBAAI4cOYIzZ87Ax8cHzs7O6Nixo9jO1atXkZycjPT0dOTl5SE5ORnJyclKCfWLFy8iOTkZf/31FzIzM8UyRERERERERERERETvIs7ArGXt2rXDsGHDsHjxYvGYq6srHj16hNDQUHz88ceIjY3Fvn37XnkJziZNmiA0NBSTJ0+GXC7H8OHDoaamhl27duGrr77C5MmTlZZnrYiZmRnS0tKQnJyMxo0bo27duhXOuHvehAkTEBERgU8//RQTJ05EamoqgoODERAQABUVFdStWxcjR47El19+CQMDAzRs2BDBwcFQUVERl2dt0aIF+vbtC19fX6xatQp169bFtGnT8N5776Fv377Vvg8tWrTA+vXr4eDggKysLHz55ZfVmvGYkZGB9PR0FBQU4PLly1i1ahWio6Oxbt06pSVCq+Lm5gZnZ2f069cPoaGhaNmyJe7du4e9e/eif//+cHBwQHBwMLp37w4LCwsMHjwYRUVFiImJwdSpUwGUvg5Hjx7F4MGDoaGhISY+n/Xll19i4MCBsLOzg5ubG/bs2YMdO3bg4MGD1R5rUFAQ7O3t0aZNGxQUFOCXX35B69atq13/bTFlyhTk5uZi7NixyMjIQJcuXRAbGwu5XC6WuXbtmlKie9CgQXj06BGCgoKQnp4OW1tbxMbGwsjISCwTHh4OFRUVeHl5oaCgAO7u7li+fLlS32PGjEF8fLy4b2dnBwBIS0sTnznq6emJmzdvlisj/oOA52ZsvxUUCiAmBsjMBPiv7IikhfFJJF1l8UlERERERET0juMMTAkICQlRWmq1devWWL58OZYtWwYbGxskJSW99HMynzdp0iTs3LkTx44dg4ODA9q2bYtNmzZhxYoVlS4L+iwvLy94eHjggw8+QIMGDbB58+Zq9fvee+8hJiYGSUlJsLGxwbhx4zB69GgEBgaKZRYuXAhnZ2f07t0bbm5u6Ny5M1q3bq2URIqMjIS9vT169+4NZ2dnCIKAmJiYGk1j/uGHH/DkyRO0b98ew4cPh7+/Pxo2bFhlPR8fH5iYmMDS0hLjx4+Hjo4OkpKSMHTo0Gr3DZTO+IuJiUHXrl3h4+ODli1bYvDgwbh586aY/HJ1dcW2bduwe/du2Nraolu3bkhKShLbCAkJwY0bN2BhYaH0fM1n9evXD4sWLUJYWBjatGmDVatWITIyEq6urtUeq7q6OqZPnw5ra2t07doVqqqq2LJlS42u920gk8kQEhKC9PR05Ofn4+DBg2jZsqVSmRs3bmDWrFlKxyZOnIibN2+ioKAAiYmJ5f4BgFwux7Jly/DXX38hNzcXO3bsgLGxsVKZuLg4CIJQbitLXpb1XVEZIiIiIiIiIiIiIqJ3kUzg/wUnicrNzcV7772HBQsWYPTo0bU9HHoJWVlZ0NPTQ2Zm5ivPIKZ3i0KhQExMDDw9PfmcAyKJYXwSSRfjk0iaGJtE0sX4JJIuxieRdL3p+Kxu3oBLyJJknD17FpcuXYKjoyMyMzMREhICADVaHpaIiIiIiIiIiIiIiIjebkxgkqSEhYUhNTUV6urqsLe3x7Fjxyp8viMRERERERERERERERG9m5jAJMmws7PDmTNnansYREREREREREREREREVItUansARERERERERERERERERERlmMAkIiIiIiIiIiIiIiIiIslgApOIiIiIiIiIiIiIiIiIJIMJTCJ6awiCgKCgIJiYmEBTUxNubm64cuVKlfWWLVsGMzMzyOVyODk5ISkpSel8fn4+/Pz8UL9+fejo6MDLywsPHjxQKuPv7w97e3toaGjA1ta2XB/5+fnw9vZGu3btUKdOHfTr169cmV9//RWdO3dG/fr1oampCUtLS4SHh9foHhARERERERERERERveuYwKS3zqNHjzB+/Hg0adIEGhoaMDY2hru7OxISEt5IfzKZrNzWpUuXN9IXvVhoaCgWL16MlStXIjExEdra2nB3d0d+fn6ldbZu3YqAgAAEBwfjt99+g42NDdzd3fHw4UOxzOeff449e/Zg27ZtiI+Px7179/Cf//ynXFujRo3CoEGDKuynuLgYmpqa8Pf3h5ubW4VltLW1MXHiRBw9ehQpKSkIDAxEYGAgvv/++9ICMtm/Z9PTK71mPb3aHws3btyUN8YnN27S3crik4iIiIiIiOgdV6e2B0BUU15eXigsLMSPP/6IZs2a4cGDBzh06BD+/PPPN9ZnZGQkPDw8xH11dfUKyykUCqipqb2xcfybCYKAiIgIBAYGom/fvgCAdevWwcjICNHR0Rg8eHCF9RYuXAhfX1/4+PgAAFauXIm9e/di7dq1mDZtGjIzM/HDDz9g06ZN6NatG4DS17t169Y4efIkOnbsCABYvHgxgNIE+u+//16uH21tbaxYsQIAkJCQgIyMjHJl7OzsYGdnJ+6bmZlhx44dOHbsGMaOHfuSd4aIiIiIiIiIiIiI6N3CGZj0VsnIyMCxY8fw7bff4oMPPkDTpk3h6OiI6dOn46OPPgIA3Lp1C3379oWOjg50dXUxcOBAcTnQzMxMqKqq4vTp0wCAkpISGBgYiEkqANiwYQNMTU2V+tXX14exsbG4GRgY4MaNG5DJZNi6dStcXFwgl8uxceNGAMCaNWvQunVryOVyWFpaYvny5UrtJSUlwc7ODnK5HA4ODti5cydkMhmSk5MBAFFRUdDX11eqEx0dDZlMpnRs165daN++PeRyOZo1a4bZs2ejqKhIPC+TybBmzRr0798fWlpaaNGiBXbv3q3UxoULF9C7d2/o6uqibt26eP/993Ht2jUcPXoUampqSE9PVyo/adIkvP/++1W+Vq9bWloa0tPTlWY36unpwcnJCSdOnKiwTmFhIc6cOaNUR0VFBW5ubmKdM2fOQKFQKJWxtLREkyZNKm33dTl79iyOHz8OFxeXN9oPEREREREREREREdHbhDMw6a2io6MDHR0dREdHo2PHjtDQ0FA6X1JSIiYv4+PjUVRUBD8/PwwaNAhxcXHQ09ODra0t4uLi4ODggPPnz0Mmk+Hs2bPIyckR69UkoTRt2jQsWLBATEhu3LgRQUFBWLp0Kezs7HD27Fn4+vpCW1sbI0eORE5ODnr37o0ePXpgw4YNSEtLw2effVbje3Hs2DGMGDECixcvFpOOZbP4goODxXKzZ89GaGgovvvuOyxZsgTDhg3DzZs3YWBggLt376Jr165wdXXF4cOHoauri4SEBBQVFaFr165o1qwZ1q9fjy+//BJA6QzTjRs3IjQ0tMIxFRQUoKCgQNzPysoS6ykUihpf47Pu3LkDADAwMFBqq0GDBrh3716F7d+/fx/FxcWoX7++0nlDQ0OkpKRAoVDgzp07UFdXh7a2tlKZhg0b4u7du+XaLS4uhiAIL7yekpISlJSUVFrG3Nwcjx49QlFREWbOnImRI0eWltXUrN7NeAco/r5Wxb/omoneFoxPIukS4/MVv1cR0etVFpOMTSLpYXwSSRfjk0i63nR8VrddJjDprVKnTh1ERUXB19cXK1euRPv27eHi4oLBgwfD2toahw4dwvnz55GWlibOoly3bh3atGmDU6dOoUOHDnB1dUVcXBy++OILxMXFoUePHrh06RJ+/fVXeHh4IC4uDlOmTFHqd8iQIVBVVRX3N2zYAFtbWwClMxKffV5icHAwFixYIB4zNzfHxYsXsWrVKowcORKbNm1CSUkJfvjhB8jlcrRp0wZ37tzB+PHja3QvZs+ejWnTpmHkyJEAgGbNmuHrr7/GlClTlBKY3t7eGDJkCABg7ty5WLx4MZKSkuDh4YFly5ZBT08PW7ZsEZe+bdmypVh39OjRiIyMFBOYe/bsQX5+PgYOHFjhmObNm4fZs2eXO75//35oaWnV6Pri4+PFJVkBIDAwEABw6NAhGBgYiMfv378PmUyGmJiYcm389ddfAIDjx4+LPwPA9evXkZGRgZiYGCQnJ6OkpKRc/czMTFy/fr3c8StXriArK6vC/srcuXMHubm5lZYJCgpCXl4eLl++jIULFyI7Oxtdu3YFNm+utM131YG1a2t7CERUCcYnkXQdOHCgtodARBVgbBJJF+OTSLoYn0TS9abi8+nTp9UqxwQmvXW8vLzw4Ycf4tixYzh58iT27duH0NBQrFmzBllZWTA1NVVaAtbKygr6+vpISUlBhw4d4OLigh9++AHFxcWIj49Hz549YWxsjLi4OFhbW+Pq1atwdXVV6jM8PFxpiVETExM8evQIAODg4CAez83NxbVr1zB69Gj4+vqKx4uKiqCnpwcASElJgbW1NeRyuXje2dm5xvfh3LlzSEhIwJw5c8RjxcXFyM/Px9OnT8WEobW1tXheW1sburq6ePjwIQAgOTkZ77//fqXP7fT29kZgYKD4LMioqCgMHDgQ2traFZafPn06AgICxP2y16Nnz57Q1dWt0fW9//77SvewoKAAgYGBaNu2rZg8BoAFCxbAxsYGnp6e5dooLCyEr68vLCwslM7//PPPaNWqFTw9PaGpqYnw8HB06tRJadlef39/dOrUqVy7p0+fRkpKSoX9ldm+fTsyMjJeWKZMw4YNsXHjRsyfPx/4+3fk30ChqYkDa9eix6hRUMvLq+3hENEzGJ9E0iXGZ48efO46kYQoFAocOHCAsUkkQYxPIulifBJJ15uOz7KVG6vCBCa9leRyOXr06IEePXpg5syZGDNmDIKDgzF58uQq63bt2hXZ2dn47bffcPToUcydOxfGxsaYP38+bGxs0KhRI7Ro0UKpjrGxMZo3b650rCyB+WwyLycnBwCwevVqODk5KZV/dgZnVVRUVCAIgtKx56dV5+TkYPbs2UqzP8s8mxx9/g1GJpOhpKQEAKBZxfKADRs2RJ8+fRAZGQlzc3Ps27cPcXFxlZbX0NAot6xv2Rhq+kZnYGCgNNNSEAQYGxvj6NGj6NChA4DSN7qkpCRMmDChwvbV1NRgb2+P+Ph4fPzxxwBKl3c9cuQIJk6cCDU1NTg5OUFNTQ1Hjx6Fl5cXACA1NRW3bt1Cly5dyrWrqqoKmUz2wutRUVGBiopKta5ZJpOhsLCwtOy/MFGglpfHBAmRRDE+iaTrZb5bEdGbx9gkki7GJ5F0MT6JpOtNxWd122QCk94JVlZWiI6ORuvWrXH79m3cvn1bnIV58eJFZGRkwMrKCgCgr68Pa2trLF26FGpqarC0tETDhg0xaNAg/PLLLzV6/uXzjIyM0KhRI1y/fh3Dhg2rsEzr1q2xfv165Ofni4nGkydPKpVp0KABsrOzkZubKyZIk5OTlcq0b98eqamp5RKrNWFtbY0ff/wRCoWi0jeNMWPGYMiQIWjcuDEsLCzQuXPnl+7vVchkMkyaNAnffPMNWrRoAXNzc8ycORONGjVCv379xHLdu3dH//79MXHiRABAQEAARo4cCQcHBzg6OiIiIgK5ubnw8fEBAOjp6WH06NEICAiAgYEBdHV18emnn8LZ2RkdO3YU27169SpycnKQnp6OvLw88fWwsrKCuro6gNLftcLCQvz111/Izs4Wy5TNGF22bBmaNGkCS0tLAMDRo0cRFhYGf3//N3jniIiIiIiIiIiIiIjeLkxg0lvlzz//xIABAzBq1ChYW1ujbt26OH36NEJDQ9G3b1+4ubmhXbt2GDZsGCIiIlBUVIQJEybAxcVFaalXV1dXLFmyRJyVZ2BggNatW2Pr1q1YtmzZK41x9uzZ8Pf3h56eHjw8PFBQUIDTp0/jyZMnCAgIwNChQzFjxgz4+vpi+vTpuHHjBsLCwpTacHJygpaWFr766iv4+/sjMTERUVFRSmWCgoLQu3dvNGnSBB9//DFUVFRw7tw5/PHHH/jmm2+qNdaJEydiyZIlGDx4MKZPnw49PT2cPHkSjo6OaNWqFQDA3d0durq6+OabbxASEvJK9+ZVTZkyBbm5uRg7diwyMjLQpUsXxMbGKs04vXbtGh4/fizuDxo0CI8ePUJQUBDS09Nha2uL2NhYGBkZiWXCw8OhoqICLy8vFBQUwN3dHcuXL1fqe8yYMYiPjxf37ezsAABpaWkwMzMDAHh6euLmzZvlypTNpi0pKcH06dORlpaGOnXqwMLCAt9++y0++eQT/F3wNdylt4RCAcTEAJmZAP+VHZG0MD6JpKssPomIiIiIiIjecSq1PQCimtDR0YGTkxPCw8PRtWtXtG3bFjNnzoSvry+WLl0KmUyGXbt2oV69eujatSvc3NzQrFkzbN26VakdFxcXFBcXKz3r0tXVtdyxlzFmzBisWbMGkZGRaNeuHVxcXBAVFQVzc3PxGvbs2YPz58/Dzs4OM2bMwLfffqvUhoGBATZs2ICYmBi0a9cOmzdvxqxZs5TKuLu745dffsH+/fvRoUMHdOzYEeHh4WjatGm1x1q/fn0cPnwYOTk5cHFxgb29PVavXq00G1NFRQXe3t4oLi7GiBEjXv7GvAYymQwhISFIT09Hfn4+Dh48iJYtWyqVuXHjRrl7NXHiRNy8eRMFBQVITEwst7yvXC7HsmXL8NdffyE3Nxc7duyAsbGxUpm4uDgIglBuK0telvVdUZkyn376Kf744w/k5uYiMzMTv/32G8aPHw8VFb4VExERERERERERERGVkQnPP2iPiP5xN27cgLm5Oc6ePSsuNyolo0ePxqNHj7B79+4a1cvKyoKenh4yMzOhq6v7hkZHbyOFQoGYmBh4enryOQdEEsP4JJIuxieRNDE2iaSL8UkkXYxPIul60/FZ3bwBl5AlokplZmbi/Pnz2LRpU42Tl0RERERERERERERERC+DCUwiqlTfvn2RlJSEcePGoUePHrU9HCIiIiIiIiIiIiIi+hdgApNIAszMzCDF1Zzj4uJqewhERERERERERERERPQvo1LbAyAiIiIiIiIiIiIiIiIiKsMEJhERERERERERERERERFJBhOYRCRJgiAgKCgIJiYm0NTUhJubG65cuVJlvWXLlsHMzAxyuRxOTk5ISkpSOp+fnw8/Pz/Ur18fOjo68PLywoMHD5TK+Pv7w97eHhoaGrC1tS3XR35+Pry9vdGuXTvUqVMH/fr1e+GYEhISUKdOnQrbIiIiIiIiIiIiIiIiZUxgvkOioqKgr6//wjLe3t5VJlvo3btP1fndkJrQ0FAsXrwYK1euRGJiIrS1teHu7o78/PxK62zduhUBAQEIDg7Gb7/9BhsbG7i7u+Phw4dimc8//xx79uzBtm3bEB8fj3v37uE///lPubZGjRqFQYMGVdhPcXExNDU14e/vDzc3txdeR0ZGBkaMGIHu3btX88qJiIiIiIiIiIiIiP7dmMCsIW9vb8hkMnGrX78+PDw88Pvvv9f20Kpl0aJFiIqKeu3tPntPyrYuXbq8crs3btyATCZDcnLyqw/yb4Ig4Pvvv4eTkxN0dHSgr68PBwcHRERE4OnTp6+tn39SfHw8unXrBgMDA2hpaaFFixYYOXIkCgsLAQCDBg3C5cuXa3mU1ScIAiIiIhAYGIi+ffvC2toa69atw7179xAdHV1pvYULF8LX1xc+Pj6wsrLCypUroaWlhbVr1wIAMjMz8cMPP2DhwoXo1q0b7O3tERkZiePHj+PkyZNiO4sXL4afnx+aNWtWYT/a2tpYsWIFfH19YWxs/MJrGTduHIYOHQpnZ2flEzLZv3vT0yu9D3p6tT8Wbty4KW+MT27cpLuVxScRERERERHRO44JzJfg4eGB+/fv4/79+zh06BDq1KmD3r17V1peoVD8g6N7MT09vTc2Ey8yMlK8L/fv38fu3bvfSD8vq+x1GD58OCZNmoS+ffviyJEjSE5OxsyZM7Fr1y7s37+/lkdZcxcvXoSHhwccHBxw9OhRnD9/HkuWLIG6ujqKi4sBAJqammjYsGEtj7T60tLSkJ6erjS7UU9PD05OTjhx4kSFdQoLC3HmzBmlOioqKnBzcxPrnDlzBgqFQqmMpaUlmjRpUmm7ryIyMhLXr19HcHDwa2+biIiIiIiIiIiIiOhdxQTmS9DQ0ICxsTGMjY1ha2uLadOm4fbt23j06JE4Y3Dr1q1wcXGBXC7Hxo0b8eeff2LIkCF47733oKWlhXbt2mHz5s1K7bq6usLf3x9TpkyBgYEBjI2NMWvWLKUyGRkZ+OSTT2BkZAS5XI62bdvil19+USrzv//9D61bt4aOjo6YbC3z/NKo1enz0qVL6NKlC+RyOaysrHDw4EHIZLJyM+H09fXF+2JsbAwDA4NqXXdJSQlCQ0PRvHlzaGhooEmTJpgzZw4AwNzcHABgZ2cHmUwGV1dXsU5ISAgaN24sPqcwNjZWbLOy1+Gnn37Cxo0bsXnzZnz11Vfo0KEDzMzM0LdvXxw+fBgffPCB0tjCwsJgYmKC+vXrw8/PTykZvX79ejg4OKBu3bowNjbG0KFDlZYqjYuLg0wmw6FDh+Dg4AAtLS106tQJqampSn188803aNiwIerWrYsxY8Zg2rRp5Z6VuGbNGrRu3RpyuRyWlpZYvny5eG7//v0wNjZGaGgo2rZtCwsLC3h4eGD16tXQ1NQEUPESslX1W/a78qJ78Kakp6cDAIyMjJSOGxkZieee9/jxYxQXF7+wTnp6OtTV1cvdixe1+7KuXLmCadOmYcOGDahTp85rbZuIiIiIiIiIiIiI6F3G/6v+inJycrBhwwY0b94c9evXR25uLgBg2rRpWLBgAezs7CCXy5Gfnw97e3tMnToVurq62Lt3L4YPHw4LCws4OjqK7f34448ICAhAYmIiTpw4AW9vb3Tu3Bk9evRASUkJevXqhezsbGzYsAEWFha4ePEiVFVVxfpPnz5FWFgY1q9fDxUVFfz3v//FF198gY0bN1Z6DS/qs7i4GP369UOTJk2QmJiI7OxsTJ48udr3pzrXPX36dKxevRrh4eHo0qUL7t+/j0uXLgEAkpKS4OjoiIMHD6JNmzZQV1cHULoU7oIFC7Bq1SrY2dlh7dq1+Oijj3DhwgW0aNFC7P/512HcuHFo1aoV+vbtW26sMpkMes8sy3XkyBGYmJjgyJEjuHr1KgYNGgRbW1v4+voCKJ3R+fXXX6NVq1Z4+PAhAgIC4O3tjZiYGKV2Z8yYgQULFqBBgwYYN24cRo0ahYSEBADAxo0bMWfOHCxfvhydO3fGli1bsGDBAjFxW1YmKCgIS5cuhZ2dHc6ePQtfX19oa2tj5MiRMDY2xv3793H06FF07dq1Wq9Ldfqtzj14XkFBAQoKCsT9rKws8V69KPG5adMm+Pn5ifu7du2qsF5JSQlkMlmFbZUdKyoqUjpfXFwMQRCgUChQVFSkVLaMIAgoLi4ud/zZupUpKSlBSUlJuT6HDBmCoKAgmJubQ6FQlG/r7+Tyv5Xi7+tX/MvvA5EUMT6JpEuMTwmt8EJE/x+TjE0i6WF8EkkX45NIut50fFa3XZkgCMIbGcE7ytvbGxs2bIBcLgcA5ObmwsTEBL/88gvat2+PGzduwNzcHBEREfjss89e2Fbv3r1haWmJsLAwAKWzIYuLi3Hs2DGxjKOjI7p164b58+dj//796NWrF1JSUtCyZcty7UVFRcHHxwdXr16FhYUFAGD58uUICQkRZ5d5e3sjIyNDnD1ZVZ+xsbHo06cPbt++LT7r7+DBg+jRowd27twpzuaUyWSQy+VKydQNGzYozfas6Lqzs7PRoEEDLF26FGPGjClXtux+nj17Vml24HvvvQc/Pz989dVXSuPu0KEDli1bVunrYGVlhRYtWogJssp4e3sjLi4O165dE69p4MCBUFFRwZYtWyqsc/r0aXTo0AHZ2dnQ0dFBXFwcPvjgAxw8eBDdu3cHAMTExODDDz9EXl4e5HI5OnbsCAcHByxdulRsp0uXLsjJyRGf+9m8eXN8/fXXGDJkiFjmm2++QUxMDI4fP47i4mKMGTMGUVFRMDY2RseOHdG9e3eMGDECurq6AEp/NyZNmoSMjAwAqFa/L3MPZs2ahdmzZ5c7vmnTJmhpaVV6v/Py8sSxAaVvYP7+/li4cKHScyhnzJgBc3PzCn9XFAoFBg0ahClTpqBjx47i8UWLFiE3NxdfffUVfv/9dwQFBWHDhg3Q0dERy/j6+qJPnz746KOPlNrcvHkzEhMTERERUenYn22/TE5ODv773/9CReX/J7kLggBBEKCiooJZs2bB2tq60jaJiIiIiIiIiIiIiN5FT58+xdChQ5GZmSnmMCrCGZgv4YMPPsCKFSsAAE+ePMHy5cvRq1cvJCUliWUcHByU6hQXF2Pu3Ln46aefcPfuXRQWFqKgoKBcUuf5pIaJiYm4LGlycjIaN25cYfKyjJaWlpi8fL5+ZV7UZ2pqKkxNTcXkJQClGaPPCg8PV3q2oImJSZXXnZKSgoKCAjHBVx1ZWVm4d+8eOnfurHS8c+fOOHfunNKx51+HmuTr27Rpo5SQNTExwfnz58X9M2fOYNasWTh37hyePHmCkpISAMCtW7dgZWUllnv2/pqYmAAAHj58iCZNmiA1NRUTJkxQ6tfR0RGHDx8GUJogv3btGkaPHq0067GoqEicLaqqqorIyEh88803OHz4MBITEzF37lx8++23SEpKEvt8VlX9VvcePG/69OkICAgQ97OysmBqaoqePXu+8I3oeYIgYO7cuVAoFPD09BTbunr1KqZNmyYee569vT2ysrLE8yUlJfDz88P48ePh6emJzp074+uvv0adOnXEMqmpqXj06BF8fHzg5OSk1N7p06eRkpJSaX8AsH37dmRkZCiVKSkpUfodAIBVq1bhyJEj2LJlC8zNzaHdqFG178e7SKGpiQNr16LHqFFQy8ur7eEQ0TMYn0TSJcZnjx5QU1Or7eEQ0d8UCgUOHDjA2CSSIMYnkXQxPomk603HZ9nKjVVhAvMlaGtro3nz5uL+mjVroKenh9WrV4szw7S1tZXqfPfdd1i0aBEiIiLQrl07aGtrY9KkSSgsLFQq9/wvg0wmExNjmtVYyq2i+lUl7V7UZ00YGxsr3RcAmD9//guvuzrX9Cqefx1atmwpLk9blRfdl9zcXLi7u8Pd3R0bN25EgwYNcOvWLbi7u7/wNZXJZABQ7fubk5MDAFi9enW55NqziUWgdFbq8OHDMXz4cHz99ddo2bIlVq5cWeGMyOqq6e+GhoYGNDQ0Kmynpm90kyZNwrx582BpaQlzc3PMnDkTjRo1wscffyy21b17d/Tv3x8TJ04EAEyePBkjR46Eo6MjHB0dERERgdzcXIwZMwZqamowNDTE6NGjMWXKFDRs2BC6urr49NNP4ezsjC5duoh9X716FTk5OXj06BHy8/Nx4cIFAKUzeMuWMb548SIKCwuRkZGB7OxssUzZTGE7Ozul6zE2Noampub/H2dSAACglpfHBAmRRDE+iaTrZb5bEdGbx9gkki7GJ5F0MT6JpOtNxWd122QC8zWQyWRQUVFB3gv+J19CQgL69u2L//73vwBKE1iXL18uN0vrRaytrXHnzh1cvnz5hbMwX6dWrVrh9u3bePDgAYyMjAAAp06dqnb9qq67RYsW0NTUxKFDhypcFrQsWVRcXCwe09XVRaNGjZCQkAAXFxelviqbHVpm6NChGDx4MHbt2lXuOZiCICArK0vpOZiVuXTpEv7880/Mnz8fpqamAEpn69VUq1atcOrUKYwYMUI89uz9NTIyQqNGjXD9+nUMGzas2u3Wq1cPJiYm4jNZa9qvFEyZMgW5ubkYO3YsMjIy0KVLF8TGxorLNwPAtWvX8PjxY3F/0KBBePToEYKCgpCeng5bW1vExsaKv7tA6UxhFRUVeHl5oaCgAO7u7li+fLlS32PGjEF8fLy4X5Z0TEtLg5mZGQDA09MTN2/eLFem2rN8/+2rdysUQEwMkJkJ8EsqkbQwPomkqyw+iYiIiIiIiN5xTGC+hIKCAvGZkk+ePMHSpUuRk5ODPn36VFqnRYsW+Pnnn3H8+HHUq1cPCxcuxIMHD2qUwHRxcUHXrl3h5eWFhQsXonnz5rh06RJkMhk8PDxe+boq0qNHD1hYWGDkyJEIDQ1FdnY2AgMDAfz/bMIXqeq65XI5pk6diilTpkBdXR2dO3fGo0ePcOHCBYwePRoNGzaEpqYmYmNj0bhxY8jlcujp6eHLL79EcHAwLCwsYGtri8jISCQnJ2Pjxo0vHM/AgQOxc+dODBkyBIGBgejZsycaNGiA8+fPIzw8HJ9++mmFz+18XpMmTaCuro4lS5Zg3Lhx+OOPP/D1119XfUOf8+mnn8LX1xcODg7o1KkTtm7dit9//13puY+zZ8+Gv78/9PT04OHhgYKCApw+fRpPnjxBQEAAVq1aheTkZPTv3x8WFhbIz8/HunXrcOHCBSxZsuSl+61tMpkMISEhCAkJqbTMjRs3yh2bOHGiOCOzInK5HMuWLcOyZcsqLRMXF1fl+Crq+0VmzZqFWbNm1agOEREREREREREREdG/kUptD+BtFBsbCxMTE5iYmMDJyQmnTp3Ctm3b4OrqWmmdwMBAtG/fHu7u7nB1dYWxsXG1EmXP2759Ozp06IAhQ4bAysoKU6ZMUZqd+LqpqqoiOjoaOTk56NChA8aMGYMZM2YAgNJMuMpU57pnzpyJyZMnIygoCK1bt8agQYPEZ3DWqVMHixcvxqpVq9CoUSNx1qS/vz8CAgIwefJktGvXDrGxsdi9ezdatGjxwvHIZDJs2rQJCxcuRHR0NFxcXGBtbY1Zs2ahb9++cHd3r9Z9adCgAaKiorBt2zZYWVlh/vz5CAsLq1bdZw0bNgzTp0/HF198gfbt2yMtLQ3e3t5K93bMmDFYs2YNIiMj0a5dO7i4uCAqKgrm5uYASp9dmZOTg3HjxqFNmzZwcXHByZMnxet72X6JiIiIiIiIiIiIiIhqg0yo9nqHRKUSEhLQpUsXXL16FRYWFrU9nHdOjx49YGxsjPXr17/1/ZYtyZuZmQldXd3X1i69/RQKBWJiYuDp6cnnHBBJDOOTSLoYn0TSxNgkki7GJ5F0MT6JpOtNx2d18wZcQpaqtHPnTujo6KBFixa4evUqPvvsM3Tu3JnJy9fg6dOnWLlyJdzd3aGqqorNmzfj4MGDOHDgwDvZLxERERERERERERERUVWYwKQqZWdnY+rUqbh16xYMDQ3h5uaGBQsW1Paw3gkymQwxMTGYM2cO8vPz0apVK2zfvh1ubm7vZL9ERERERERERERERERVYQKTqjRixAiMGDGitofxTtLU1MTBgwf/Nf0SERERERERERERERFVRaW2B0BEREREREREREREREREVIYJTCIiIiIiIiIiIiIiIiKSDCYwiYiIiIiIiIiIiIiIiEgymMAkIiIiIiIiIiIiIiIiIslgApOIiIiIiIiIiIiIiIiIJIMJTCIiIiIiIiIiIiIiIiKSDCYwiYiIiIiIiIiIiIiIiEgymMAkIiIiIiIiIiIiIiIiIslgApOIiIiIiIiIiIiIiIiIJIMJTCIiIiIiIiIiIiIiIiKSDCYwiYiIiIiIiIiIiIiIiEgymMAkIiIiIiIiIiIiIiIiIslgApOIiIiIiIiIiIiIiIiIJIMJTCIiIiIiIiIiIiIiIiKSDCYwiYiIiIiIiIiIiIiIiEgymMAkIiIiIiIiIiIiIiIiIslgApOIiIiIiIiIiIiIiIiIJIMJTCIiIiIiIiIiIiIiIiKSDCYwiYiIiIiIiIiIiIiIiEgymMAkIiIiIiIiIiIiIiIiIslgApOIiIiIiIiIiIiIiIiIJIMJTCIiIiIiIiIiIiIiIiKSDCYwiYiIiIiIiIiIiIiIiEgymMAkIiIiIiIiIiIiIiIiIslgApOIiIiIiIiIiIiIiIiIJIMJTCIiIiIiIiIiIiIiIiKSDCYwiYiIiIiIiIiIiIiIiEgy6tT2AIjo3SUIAgAgKyurlkdCUqNQKPD06VNkZWVBTU2ttodDRM9gfBJJF+OTSJoYm0TSxfgkki7GJ5F0ven4LMsXlOUPKsMEJhG9MdnZ2QAAU1PTWh4JERERERERERERERFJRXZ2NvT09Co9LxOqSnESEb2kkpIS3Lt3D3Xr1oVMJqvt4ZCEZGVlwdTUFLdv34aurm5tD4eInsH4JJIuxieRNDE2iaSL8UkkXYxPIul60/EpCAKys7PRqFEjqKhU/qRLzsAkojdGRUUFjRs3ru1hkITp6urySyqRRDE+iaSL8UkkTYxNIulifBJJF+OTSLreZHy+aOZlmcpTm0RERERERERERERERERE/zAmMImIiIiIiIiIiIiIiIhIMpjAJCKif5yGhgaCg4OhoaFR20MhoucwPomki/FJJE2MTSLpYnwSSRfjk0i6pBKfMkEQhFodARERERERERERERERERHR3zgDk4iIiIiIiIiIiIiIiIgkgwlMIiIiIiIiIiIiIiIiIpIMJjCJiIiIiIiIiIiIiIiISDKYwCQiIiIiIiIiIiIiIiIiyWACk4iIiIiIiIiIiIiIiIgkgwlMIiKqsb/++gvDhg2Drq4u9PX1MXr0aOTk5LywTn5+Pvz8/FC/fn3o6OjAy8sLDx48UCpz69YtfPjhh9DS0kLDhg3x5ZdfoqioSDx///59DB06FC1btoSKigomTZpUYV/btm2DpaUl5HI52rVrh5iYmFe+ZqK3RW3FJwDExcWhffv20NDQQPPmzREVFaV0ftasWZDJZEqbpaXla7luIilatmwZzMzMIJfL4eTkhKSkpBeWr+rzSxAEBAUFwcTEBJqamnBzc8OVK1eUylTnPeD333/H+++/D7lcDlNTU4SGhr6eCyZ6S0gxNm/cuFHuM1Imk+HkyZOv78KJ3gK1EZ9z5sxBp06doKWlBX19/Qr7qc53YaJ3nVTjs6LPzy1btrzStRK9bf7p+Lxx4wZGjx4Nc3NzaGpqwsLCAsHBwSgsLFRq55X/9hSIiIhqyMPDQ7CxsRFOnjwpHDt2TGjevLkwZMiQF9YZN26cYGpqKhw6dEg4ffq00LFjR6FTp07i+aKiIqFt27aCm5ubcPbsWSEmJkYwNDQUpk+fLpZJS0sT/P39hR9//FGwtbUVPvvss3L9JCQkCKqqqkJoaKhw8eJFITAwUFBTUxPOnz//2q6fSMpqKz6vX78uaGlpCQEBAcLFixeFJUuWCKqqqkJsbKxYJjg4WGjTpo1w//59cXv06NHrvwlEErBlyxZBXV1dWLt2rXDhwgXB19dX0NfXFx48eFBh+ep8fs2fP1/Q09MToqOjhXPnzgkfffSRYG5uLuTl5YllqnoPyMzMFIyMjIRhw4YJf/zxh7B582ZBU1NTWLVq1Zu7GUQSItXYTEtLEwAIBw8eVPqcLCwsfHM3g0hiais+g4KChIULFwoBAQGCnp5euX6q812Y6F0n1fgUBEEAIERGRip9fj7bBtG7rjbic9++fYK3t7fwv//9T7h27Zqwa9cuoWHDhsLkyZPFNl7H355MYBIRUY1cvHhRACCcOnVKPLZv3z5BJpMJd+/erbBORkaGoKamJmzbtk08lpKSIgAQTpw4IQiCIMTExAgqKipCenq6WGbFihWCrq6uUFBQUK5NFxeXChOYAwcOFD788EOlY05OTsInn3xSo+skehvVZnxOmTJFaNOmjVLbgwYNEtzd3cX94OBgwcbG5pWvk+ht4OjoKPj5+Yn7xcXFQqNGjYR58+ZVWL6qz6+SkhLB2NhY+O6778TzGRkZgoaGhrB582ZBEKr3HrB8+XKhXr16Sp+tU6dOFVq1avWKV0z0dpBqbJYlMM+ePftarpPobVQb8fmsyMjIChMkNf1blehdJNX4FITSBObOnTtreEVE747ajs8yoaGhgrm5ubj/Ov725BKyRERUIydOnIC+vj4cHBzEY25ublBRUUFiYmKFdc6cOQOFQgE3NzfxmKWlJZo0aYITJ06I7bZr1w5GRkZiGXd3d2RlZeHChQs1Gt+z/ZS1U9YP0busNuOzurF35coVNGrUCM2aNcOwYcNw69atV7toIgkqLCzEmTNnlGJCRUUFbm5ulX4eVRVDaWlpSE9PVyqjp6cHJycnpVit6j3gxIkT6Nq1K9TV1ZX6SU1NxZMnT17xyomkTcqxWeajjz5Cw4YN0aVLF+zevfvVLpjoLVJb8Vkdr+tvVaK3lZTjs4yfnx8MDQ3h6OiItWvXQhCEGrdB9DaSUnxmZmbCwMBAqZ9X/duTCUwiIqqR9PR0NGzYUOlYnTp1YGBggPT09ErrqKurl3tegZGRkVgnPT1d6Q/CsvNl52oyvoraqUkbRG+r2ozPyspkZWUhLy8PAODk5ISoqCjExsZixYoVSEtLw/vvv4/s7OyXu2AiiXr8+DGKi4tr9HlU1edX2X+rKlPVe8Dr+rwlehtJOTZ1dHSwYMECbNu2DXv37kWXLl3Qr18/JjHpX6O24rM6+NlJ/3ZSjk8ACAkJwU8//YQDBw7Ay8sLEyZMwJIlS2rUBtHbSirxefXqVSxZsgSffPJJlf0820dV6lSrFBERvfOmTZuGb7/99oVlUlJS/qHRENGz3pX47NWrl/iztbU1nJyc0LRpU/z0008YPXp0LY6MiIiodhkaGiIgIEDc79ChA+7du4fvvvsOH330US2OjIiISNpmzpwp/mxnZ4fc3Fx899138Pf3r8VREf173L17Fx4eHhgwYAB8fX1fa9ucgUlERACAyZMnIyUl5YVbs2bNYGxsjIcPHyrVLSoqwl9//QVjY+MK2zY2NkZhYSEyMjKUjj948ECsY2xsjAcPHpQ7X3auuiprpyZtEEnN2xCflZXR1dWFpqZmhX3r6+ujZcuWuHr1avVuBNFbwtDQEKqqqjX6PKrq86vsv1WVqeo94HV93hK9jaQcmxVxcnLiZyT9a9RWfFYHPzvp307K8VkRJycn3LlzBwUFBa/UDtHboLbj8969e/jggw/QqVMnfP/999Xq59k+qsIEJhERAQAaNGgAS0vLF27q6upwdnZGRkYGzpw5I9Y9fPgwSkpK4OTkVGHb9vb2UFNTw6FDh8RjqampuHXrFpydnQEAzs7OOH/+vNL/3Dlw4AB0dXVhZWVV7etwdnZW6qesnbJ+iN5Gb0N8vkzs5eTk4Nq1azAxMan5TSGSMHV1ddjb2yvFRElJCQ4dOlRpTFQVQ+bm5jA2NlYqk5WVhcTERKVYreo9wNnZGUePHoVCoVDqp1WrVqhXr94rXjmRtEk5NiuSnJzMz0j616it+KyO1/W3KtHbSsrxWZHk5GTUq1cPGhoar9QO0dugNuPz7t27cHV1hb29PSIjI6GiopxufC1/ewpEREQ15OHhIdjZ2QmJiYnCr7/+KrRo0UIYMmSIeP7OnTtCq1athMTERPHYuHHjhCZNmgiHDx8WTp8+LTg7OwvOzs7i+aKiIqFt27ZCz549heTkZCE2NlZo0KCBMH36dKW+z549K5w9e1awt7cXhg4dKpw9e1a4cOGCeD4hIUGoU6eOEBYWJqSkpAjBwcGCmpqacP78+Td4R4iko7bi8/r164KWlpbw5ZdfCikpKcKyZcsEVVVVITY2ViwzefJkIS4uTkhLSxMSEhIENzc3wdDQUHj48OEbvitE/7wtW7YIGhoaQlRUlHDx4kVh7Nixgr6+vpCeni4IgiAMHz5cmDZtmli+Op9f8+fPF/T19YVdu3YJv//+u9C3b1/B3NxcyMvLE8tU9R6QkZEhGBkZCcOHDxf++OMPYcuWLYKWlpawatWqf+CuENU+qcZmVFSUsGnTJiElJUVISUkR5syZI6ioqAhr1679B+4KkTTUVnzevHlTOHv2rDB79mxBR0dH/JszOztbEITq/61K9C6Tanzu3r1bWL16tXD+/HnhypUrwvLlywUtLS0hKCjoH7ozRLWvNuLzzp07QvPmzYXu3bsLd+7cEe7fvy9uZV7H355MYBIRUY39+eefwpAhQwQdHR1BV1dX8PHxEb88CoIgpKWlCQCEI0eOiMfy8vKECRMmCPXq1RO0tLSE/v37K32oCYIg3LhxQ+jVq5egqakpGBoaCpMnTxYUCoVSGQDltqZNmyqV+emnn4SWLVsK6urqQps2bYS9e/e+9ntAJFW1GZ9HjhwRbG1tBXV1daFZs2ZCZGSk0vlBgwYJJiYmgrq6uvDee+8JgwYNEq5evfra7wGRVCxZskRo0qSJoK6uLjg6OgonT54Uz7m4uAgjR45UKl/V51dJSYkwc+ZMwcjISNDQ0BC6d+8upKamKpWp6j1AEATh3LlzQpcuXQQNDQ3hvffeE+bPn/96L5xI4qQYm1FRUULr1q0FLS0tQVdXV3B0dBS2bdv2+i+eSOJqIz5HjhxZ4d+Zz35frs53YaJ3nRTjc9++fYKtra2go6MjaGtrCzY2NsLKlSuF4uLiN3IPiKTqn47PyMjICmPz+TmTr/q3p0wQBKF6czWJiIiIiIiIiIiIiIiIiN4sPgOTiIiIiIiIiIiIiIiIiCSDCUwiIiIiIiIiIiIiIiIikgwmMImIiIiIiIiIiIiIiIhIMpjAJCIiIiIiIiIiIiIiIiLJYAKTiIiIiIiIiIiIiIiIiCSDCUwiIiIiIiIiIiIiIiIikgwmMImIiIiIiIiIiIiIiIhIMpjAJCIiIiIiIiIiIiIiIiLJYAKTiIiIiIiIiIiIiIiIiCSDCUwiIiIiIiIiIiIiIiIikgwmMImIiIiIiIiIiIiIiIhIMv4PghLjyT8RX4YAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "libc.malloc_trim(0);\n",
    "gc.collect();\n",
    "\n",
    "counter = 0\n",
    "\n",
    "inference_server = kaggle_evaluation.mcts_inference_server.MCTSInferenceServer(predict)\n",
    "if os.getenv('KAGGLE_IS_COMPETITION_RERUN'):\n",
    "    inference_server.serve()\n",
    "else:\n",
    "    inference_server.run_local_gateway(\n",
    "      (\n",
    "        '/kaggle/input/um-game-playing-strength-of-mcts-variants/test.csv',\n",
    "        '/kaggle/input/um-game-playing-strength-of-mcts-variants/sample_submission.csv'\n",
    "      )\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d6928b8",
   "metadata": {
    "papermill": {
     "duration": 0.055533,
     "end_time": "2024-10-28T05:53:59.644255",
     "exception": false,
     "start_time": "2024-10-28T05:53:59.588722",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Post Training Analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b1a1790c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:53:59.757581Z",
     "iopub.status.busy": "2024-10-28T05:53:59.756716Z",
     "iopub.status.idle": "2024-10-28T05:54:00.431785Z",
     "shell.execute_reply": "2024-10-28T05:54:00.430123Z"
    },
    "papermill": {
     "duration": 0.736405,
     "end_time": "2024-10-28T05:54:00.434860",
     "exception": false,
     "start_time": "2024-10-28T05:53:59.698455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = copy.deepcopy(train[:len_train])\n",
    "df['oof_preds'] = md.oof_preds[:len_train]\n",
    "\n",
    "for col in cols.categoricals:\n",
    "    dic_0 = {v: k for k, v in cols[col].encode.items()}\n",
    "    dic_0[0] = 'rare'\n",
    "    df[col] = df[col].astype(int).map(dic_0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c7b8b93f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:00.547011Z",
     "iopub.status.busy": "2024-10-28T05:54:00.546525Z",
     "iopub.status.idle": "2024-10-28T05:54:00.565131Z",
     "shell.execute_reply": "2024-10-28T05:54:00.563916Z"
    },
    "papermill": {
     "duration": 0.077964,
     "end_time": "2024-10-28T05:54:00.567788",
     "exception": false,
     "start_time": "2024-10-28T05:54:00.489824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.16818924868570007\n",
      "0.16776334326828532\n"
     ]
    }
   ],
   "source": [
    "print(mean_squared_error(df[CFG.target_col], df['oof_preds']))\n",
    "df.loc[df['oof_preds'] > 1, 'oof_preds'] = 1\n",
    "df.loc[df['oof_preds'] < -1, 'oof_preds'] = -1 \n",
    "print(mean_squared_error(df[CFG.target_col], df['oof_preds']))\n",
    "df['error'] = (df[CFG.target_col] - df['oof_preds'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c2347bde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:00.681270Z",
     "iopub.status.busy": "2024-10-28T05:54:00.680793Z",
     "iopub.status.idle": "2024-10-28T05:54:01.427261Z",
     "shell.execute_reply": "2024-10-28T05:54:01.425927Z"
    },
    "papermill": {
     "duration": 0.806544,
     "end_time": "2024-10-28T05:54:01.430349",
     "exception": false,
     "start_time": "2024-10-28T05:54:00.623805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.16776334326828532\n",
      "0.16412186043771027\n"
     ]
    }
   ],
   "source": [
    "print(mean_squared_error(df[CFG.target_col], df['oof_preds']))\n",
    "df[CFG.fold_col] = fld.group\n",
    "df['oof_preds'] = (df[CFG.fold_col].map(dic_std_target_0)).fillna(df['oof_preds'] )\n",
    "print(mean_squared_error(df[CFG.target_col], df['oof_preds']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "cfb46a7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:01.544586Z",
     "iopub.status.busy": "2024-10-28T05:54:01.544099Z",
     "iopub.status.idle": "2024-10-28T05:54:04.560394Z",
     "shell.execute_reply": "2024-10-28T05:54:04.558927Z"
    },
    "papermill": {
     "duration": 3.076925,
     "end_time": "2024-10-28T05:54:04.563281",
     "exception": false,
     "start_time": "2024-10-28T05:54:01.486356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.16412186043771027\n",
      "0.16419675116719004\n"
     ]
    }
   ],
   "source": [
    "def round_pred(number):\n",
    "    return min(list_rounding, key = lambda x : abs(x - number))\n",
    "\n",
    "df['oof_preds_round'] = df['oof_preds'].apply(lambda x : round_pred(x))\n",
    "print(mean_squared_error(df[CFG.target_col], df['oof_preds']))\n",
    "print(mean_squared_error(df[CFG.target_col], df['oof_preds_round']))\n",
    "\n",
    "# sns.scatterplot(df, x='oof_preds', y=CFG.target_col)\n",
    "# sns.scatterplot(df, x='oof_preds_round', y=CFG.target_col)\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2e7ae6f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:04.676831Z",
     "iopub.status.busy": "2024-10-28T05:54:04.676318Z",
     "iopub.status.idle": "2024-10-28T05:54:04.683034Z",
     "shell.execute_reply": "2024-10-28T05:54:04.681744Z"
    },
    "papermill": {
     "duration": 0.06637,
     "end_time": "2024-10-28T05:54:04.685802",
     "exception": false,
     "start_time": "2024-10-28T05:54:04.619432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.kdeplot(df,x = CFG.target_col, y = 'oof_preds')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "85c91167",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:04.799072Z",
     "iopub.status.busy": "2024-10-28T05:54:04.798604Z",
     "iopub.status.idle": "2024-10-28T05:54:04.803802Z",
     "shell.execute_reply": "2024-10-28T05:54:04.802563Z"
    },
    "papermill": {
     "duration": 0.065565,
     "end_time": "2024-10-28T05:54:04.806356",
     "exception": false,
     "start_time": "2024-10-28T05:54:04.740791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # sns.scatterplot(df, x = CFG.target_col, y = 'oof_preds')\n",
    "# sns.regplot(data=df, x=CFG.target_col, y=\"oof_preds\", marker='o', scatter_kws={\"color\": \"black\", 's':4}, line_kws={\"color\": \"red\"})\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3c9c4a06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:04.921098Z",
     "iopub.status.busy": "2024-10-28T05:54:04.920620Z",
     "iopub.status.idle": "2024-10-28T05:54:04.926269Z",
     "shell.execute_reply": "2024-10-28T05:54:04.924869Z"
    },
    "papermill": {
     "duration": 0.066972,
     "end_time": "2024-10-28T05:54:04.929059",
     "exception": false,
     "start_time": "2024-10-28T05:54:04.862087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.kdeplot(df,x =  'error')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "131cf71a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:05.044825Z",
     "iopub.status.busy": "2024-10-28T05:54:05.044354Z",
     "iopub.status.idle": "2024-10-28T05:54:05.050163Z",
     "shell.execute_reply": "2024-10-28T05:54:05.048905Z"
    },
    "papermill": {
     "duration": 0.066048,
     "end_time": "2024-10-28T05:54:05.053026",
     "exception": false,
     "start_time": "2024-10-28T05:54:04.986978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# corr_error1 = df[df['error'] > 0.8][cols.numericals + [CFG.target_col, 'error']].corr().abs()\n",
    "# corr_error2 = df[df['error'] < -0.8][cols.numericals + [CFG.target_col, 'error']].corr().abs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "40674778",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:05.168752Z",
     "iopub.status.busy": "2024-10-28T05:54:05.167595Z",
     "iopub.status.idle": "2024-10-28T05:54:05.173362Z",
     "shell.execute_reply": "2024-10-28T05:54:05.171991Z"
    },
    "papermill": {
     "duration": 0.067238,
     "end_time": "2024-10-28T05:54:05.175899",
     "exception": false,
     "start_time": "2024-10-28T05:54:05.108661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# corr_error1['error'].nlargest(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5a5c2fda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:05.288364Z",
     "iopub.status.busy": "2024-10-28T05:54:05.287245Z",
     "iopub.status.idle": "2024-10-28T05:54:05.292950Z",
     "shell.execute_reply": "2024-10-28T05:54:05.291691Z"
    },
    "papermill": {
     "duration": 0.064475,
     "end_time": "2024-10-28T05:54:05.295491",
     "exception": false,
     "start_time": "2024-10-28T05:54:05.231016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# corr_error2['error'].nlargest(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ea50633f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:05.413304Z",
     "iopub.status.busy": "2024-10-28T05:54:05.412796Z",
     "iopub.status.idle": "2024-10-28T05:54:05.419545Z",
     "shell.execute_reply": "2024-10-28T05:54:05.418217Z"
    },
    "papermill": {
     "duration": 0.070134,
     "end_time": "2024-10-28T05:54:05.422558",
     "exception": false,
     "start_time": "2024-10-28T05:54:05.352424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def r2_rmse(g):\n",
    "    #r2 = mean_squared_error(g[CFG.target_col], g['oof_preds'])\n",
    "    rmse = np.sqrt(mean_squared_error(g[CFG.target_col], g['oof_preds']))\n",
    "    #return pd.Series(dict(r2 = r2, rmse = rmse))\n",
    "    return pd.Series(dict(rmse = rmse))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "358e4037",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:05.538294Z",
     "iopub.status.busy": "2024-10-28T05:54:05.537790Z",
     "iopub.status.idle": "2024-10-28T05:54:06.101446Z",
     "shell.execute_reply": "2024-10-28T05:54:06.099967Z"
    },
    "papermill": {
     "duration": 0.625155,
     "end_time": "2024-10-28T05:54:06.104604",
     "exception": false,
     "start_time": "2024-10-28T05:54:05.479449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 ['Canadian Draughts', \"Gioco dell'Orso\", 'Haretavl', 'Hund efter Hare (Vendsyssel)', 'Hyvn aetter Hare', 'Jeu Militaire', 'Juroku Musashi', 'Mu Torere', 'Picaria', 'Ratio', 'Renard et les Poules', 'Rimoe']\n",
      "['Haretavl', 'Hund efter Hare (Vendsyssel)', 'Picaria', 'Renard et les Poules', 'Canadian Draughts', 'Mu Torere', 'Rimoe', 'Jeu Militaire', \"Gioco dell'Orso\", 'Hyvn aetter Hare']\n"
     ]
    }
   ],
   "source": [
    "col = 'Rules_game'\n",
    "rmse_ = df.groupby(col).apply(r2_rmse).reset_index()\n",
    "sns.kdeplot(rmse_['rmse'])\n",
    "plt.show()\n",
    "\n",
    "l_0p5 = list(rmse_[rmse_['rmse'] > 0.5][col].unique())\n",
    "print(len(l_0p5), l_0p5)\n",
    "\n",
    "pires = list(rmse_[rmse_['rmse'] > 0.5].sort_values('rmse').reset_index(drop = True)[-10:][col])\n",
    "print(pires)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "8bb53d69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:06.220795Z",
     "iopub.status.busy": "2024-10-28T05:54:06.220090Z",
     "iopub.status.idle": "2024-10-28T05:54:06.225853Z",
     "shell.execute_reply": "2024-10-28T05:54:06.224631Z"
    },
    "papermill": {
     "duration": 0.067229,
     "end_time": "2024-10-28T05:54:06.228694",
     "exception": false,
     "start_time": "2024-10-28T05:54:06.161465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ax = sns.kdeplot(df[df[col].isin(pires)],x = CFG.target_col, hue = col)\n",
    "# sns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "c32b1081",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:06.345114Z",
     "iopub.status.busy": "2024-10-28T05:54:06.344647Z",
     "iopub.status.idle": "2024-10-28T05:54:06.350100Z",
     "shell.execute_reply": "2024-10-28T05:54:06.348729Z"
    },
    "papermill": {
     "duration": 0.068035,
     "end_time": "2024-10-28T05:54:06.352759",
     "exception": false,
     "start_time": "2024-10-28T05:54:06.284724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ax = sns.kdeplot(df[df[col].isin(pires)], x = 'error', hue = col)\n",
    "# sns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "44abee93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:06.468581Z",
     "iopub.status.busy": "2024-10-28T05:54:06.468050Z",
     "iopub.status.idle": "2024-10-28T05:54:06.473699Z",
     "shell.execute_reply": "2024-10-28T05:54:06.472410Z"
    },
    "papermill": {
     "duration": 0.066542,
     "end_time": "2024-10-28T05:54:06.476358",
     "exception": false,
     "start_time": "2024-10-28T05:54:06.409816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ax = sns.lineplot(df[df[col].isin(pires)],x = CFG.target_col, y='error', hue = col)\n",
    "# sns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c7758464",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:06.594270Z",
     "iopub.status.busy": "2024-10-28T05:54:06.593801Z",
     "iopub.status.idle": "2024-10-28T05:54:06.599338Z",
     "shell.execute_reply": "2024-10-28T05:54:06.598043Z"
    },
    "papermill": {
     "duration": 0.067638,
     "end_time": "2024-10-28T05:54:06.602102",
     "exception": false,
     "start_time": "2024-10-28T05:54:06.534464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ax = sns.lineplot(df[df[col].isin(pires)],x = CFG.target_col, y='oof_preds', hue = col)\n",
    "# sns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2e59c3cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:06.718301Z",
     "iopub.status.busy": "2024-10-28T05:54:06.717843Z",
     "iopub.status.idle": "2024-10-28T05:54:06.723879Z",
     "shell.execute_reply": "2024-10-28T05:54:06.722338Z"
    },
    "papermill": {
     "duration": 0.067068,
     "end_time": "2024-10-28T05:54:06.726629",
     "exception": false,
     "start_time": "2024-10-28T05:54:06.659561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ax = sns.kdeplot(df[df[col].isin(pires)],x = CFG.target_col, y = 'oof_preds', hue = col)\n",
    "# sns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a15492e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-28T05:54:06.844351Z",
     "iopub.status.busy": "2024-10-28T05:54:06.843374Z",
     "iopub.status.idle": "2024-10-28T05:54:06.851165Z",
     "shell.execute_reply": "2024-10-28T05:54:06.849894Z"
    },
    "papermill": {
     "duration": 0.069446,
     "end_time": "2024-10-28T05:54:06.854027",
     "exception": false,
     "start_time": "2024-10-28T05:54:06.784581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57 ['58 Holes', 'Achi', 'Ako Okwe', 'Alquerque', 'Aw-li On-nam Ot-tjin', 'Bagh Guti', 'Baghchal', 'Bajr', 'Bechi', 'Cercar La Liebre', 'Chaturanga', 'Chisolo', 'Dabuda', 'Equi Game System', 'Felli', \"Five Men's Morris\", 'Fox and Geese', 'Gabata (Shoa I)', 'Hund efter Hare (Thy)', 'Hus (Damara)', 'Janes Soppi', 'Kisolo', 'Komikan', 'Konane', 'Koro', 'Les Pendus', 'Lontu-Holo', 'Ludus Coriovalli', 'Ludus Latrunculorum', 'Mangala (Turkey)', 'Misoro Tsoro', 'Misoro Tsoro (Additional Capture)', \"Mogul Putt'han\", 'Murus Gallicus', 'Oware', 'Pereauni', 'Poprad Game', 'Rimau-Rimau (Two Tigers)', 'Seega', 'Senet', 'Shatranj ar-Rumiya', 'Shono', \"Six Men's Morris\", 'Tablut', 'Tama', 'Tchela', 'Temeen Tavag', 'Tennessee Waltz', 'Terhuchu (Small)', 'The Concentration Game', 'The SmallHolder', 'To Kinegi tou Lagou', \"Twelve Men's Morris\", 'Um el-Bil', 'Unnee Tugalluulax', \"Yeung Luk Sz' Kon Tseung Kwan\", 'rare']\n"
     ]
    }
   ],
   "source": [
    "l_0p5 = list(rmse_[rmse_['rmse'] < 0.5][col].unique())\n",
    "print(len(l_0p5), l_0p5)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 9515283,
     "sourceId": 70089,
     "sourceType": "competition"
    },
    {
     "datasetId": 5801750,
     "sourceId": 9527386,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 198980182,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12934.731871,
   "end_time": "2024-10-28T05:54:10.344137",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-28T02:18:35.612266",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
